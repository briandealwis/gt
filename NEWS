GT NEWS

GT has undergone a significant re-architecturing to promote more
flexibility and extensibility.

Breaking Changes:

  * As part of reorganizing the code, we've renamed the namespaces
    (GTServer and GTClient -> GT.Net) and introduced a new assembly to
    hold common components (GTBase).  We have also introduced
    some new components (GT.Utils, GT.UI).
    <https://papyrus.usask.ca/trac/gt/ticket/7>

      * Change all the uses
	  'using GTServer;'  ->  'using GT.Net;'
	  'using GTClient;'  ->  'using GT.Net;'

      * You will need to add the GTBase project or DLL to your clients.
	<https://papyrus.usask.ca/trac/gt/ticket/13>

  * Server.Client has had some cleanup: the Dead property has been
    made read-only, and the class now implements IDisposable.  Any
    uses of Dead as a writable property should be changed to use
    IDisposable.Dispose().  Dead has been reversed to Active.

  * Exposed fields have been made into properties and some have been
    renamed to better conform to C#/.NET naming guidelines.
	Server.clientList -> Server.Clients

  * Some delegates have had their signatures changed to use the least
    specific collection classes possible
	ClientsRemovedHandler uses ICollection
	ClientsJoinedHandler uses ICollection

  * The marshalling code has been separated and servers and clients
    now deal in more abstract Messages.
      * delegate MessageHandler has a different calling convention

  * Specialized GT exceptions have been created to represent different
    insurpassable communications conditions in GT.  These exceptions
    inherit from GTException.

      CannotConnectToRemoteException: a client experienced some problem
	connecting to a specified server.  It may be that there was
	a mistake in the identifying information for the server,
	the server may be down or unavailable, or there are routing
	difficulties (such as firewalls) that prevent connecting.
	Potentially thrown on Client.Start().  This exception may
	also be thrown on Send() for short-lived transports where
	connections are opened periodically rather that being
	long-lived (e.g., HTTP and SMTP),

      NoMatchingTransport: no transport could be found that supported
        the required QoS specifications.  Potentially thrown by the
	various flavours of Send().

New additions

  * Added a lifecycle protocol consisting of Start(), Stop(), and
    Dispose() methods, and a read-only property Started.  These methods
    have been added to most GT user-visible objects to respectively
    start, stop, and dispose of any system object. 
    <https://papyrus.usask.ca/trac/gt/ticket/22>
    
      * Client.StartListening() and Server.StartListening() both
        automatically Start() and Stop() their respective instances.
	This ensures that the clients and servers are closed in
	their normal usage.

      * Client.Update() and Server.Update() will automagically
	call Start() if their instance has not already been started.
	This behaviour is deprecated and will be removed in a future
	release.

  * Added Client.Sleep() and Server.Sleep() methods: these new methods
    provide a much more efficient way of servicing incoming messages
    while sleeping and greatly improve the fairness of servicing
    GT requests.

  * Began creating unit tests using NUnit <http://nunit.org>

Re-organized source code

  * Separated example programs from the core client and server
    components <https://papyrus.usask.ca/trac/gt/ticket/10>


