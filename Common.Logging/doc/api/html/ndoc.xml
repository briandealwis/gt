<?xml version="1.0" encoding="utf-8"?>
<ndoc SchemaVersion="2.0" xmlns="urn:ndoc-schema">
  <feedbackEmail>netcommon-developer@lists.sourceforge.net</feedbackEmail>
  <copyright text="© The Common Infrastructure Libraries for .NET Team 2009 All Rights Reserved." />
  <threadsafety static="true" instance="false" />
  <namespaceHierarchies>
    <namespaceHierarchy name="Common.Logging.Configuration">
      <hierarchyType id="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib">
        <hierarchyType id="T:Common.Logging.Configuration.ArgUtils" displayName="ArgUtils" namespace="Common.Logging.Configuration" assembly="Common.Logging" />
        <hierarchyType id="T:Common.Logging.Configuration.DefaultConfigurationReader" displayName="DefaultConfigurationReader" namespace="Common.Logging.Configuration" assembly="Common.Logging">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:Common.Logging.IConfigurationReader" displayName="IConfigurationReader" namespace="Common.Logging" fullName="Common.Logging.IConfigurationReader" assembly="Common.Logging" />
          </hierarchyInterfaces>
        </hierarchyType>
        <hierarchyType id="T:Common.Logging.Configuration.LogSetting" displayName="LogSetting" namespace="Common.Logging.Configuration" assembly="Common.Logging" />
        <hierarchyType id="T:System.Delegate" displayName="Delegate" namespace="System" assembly="mscorlib">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:System.ICloneable" displayName="ICloneable" namespace="System" fullName="System.ICloneable" assembly="mscorlib" />
            <hierarchyInterface id="T:System.Runtime.Serialization.ISerializable" displayName="ISerializable" namespace="System.Runtime.Serialization" fullName="System.Runtime.Serialization.ISerializable" assembly="mscorlib" />
          </hierarchyInterfaces>
          <hierarchyType id="T:System.MulticastDelegate" displayName="MulticastDelegate" namespace="System" assembly="mscorlib">
            <hierarchyType id="T:Common.Logging.Configuration.ArgUtils.Action" displayName="ArgUtils.Action" namespace="Common.Logging.Configuration" assembly="Common.Logging" />
            <hierarchyType id="T:Common.Logging.Configuration.ArgUtils.Function`1" displayName="ArgUtils.Function(T)" namespace="Common.Logging.Configuration" assembly="Common.Logging" />
            <hierarchyType id="T:Common.Logging.Configuration.ArgUtils.ParseHandler`1" displayName="ArgUtils.ParseHandler(T)" namespace="Common.Logging.Configuration" assembly="Common.Logging" />
          </hierarchyType>
        </hierarchyType>
      </hierarchyType>
    </namespaceHierarchy>
    <namespaceHierarchy name="Common.Logging.Factory">
      <hierarchyType id="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib">
        <hierarchyType id="T:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter" displayName="AbstractCachingLoggerFactoryAdapter" namespace="Common.Logging.Factory" assembly="Common.Logging">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:Common.Logging.ILoggerFactoryAdapter" displayName="ILoggerFactoryAdapter" namespace="Common.Logging" fullName="Common.Logging.ILoggerFactoryAdapter" assembly="Common.Logging" />
          </hierarchyInterfaces>
        </hierarchyType>
        <hierarchyType id="T:Common.Logging.Factory.AbstractLogger" displayName="AbstractLogger" namespace="Common.Logging.Factory" assembly="Common.Logging">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" fullName="Common.Logging.ILog" assembly="Common.Logging" />
          </hierarchyInterfaces>
        </hierarchyType>
        <hierarchyType id="T:System.Delegate" displayName="Delegate" namespace="System" assembly="mscorlib">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:System.ICloneable" displayName="ICloneable" namespace="System" fullName="System.ICloneable" assembly="mscorlib" />
            <hierarchyInterface id="T:System.Runtime.Serialization.ISerializable" displayName="ISerializable" namespace="System.Runtime.Serialization" fullName="System.Runtime.Serialization.ISerializable" assembly="mscorlib" />
          </hierarchyInterfaces>
          <hierarchyType id="T:System.MulticastDelegate" displayName="MulticastDelegate" namespace="System" assembly="mscorlib">
            <hierarchyType id="T:Common.Logging.Factory.AbstractLogger.WriteHandler" displayName="AbstractLogger.WriteHandler" namespace="Common.Logging.Factory" assembly="Common.Logging" />
          </hierarchyType>
        </hierarchyType>
      </hierarchyType>
    </namespaceHierarchy>
    <namespaceHierarchy name="Common.Logging">
      <hierarchyType id="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib">
        <hierarchyType id="T:Common.Logging.ConfigurationSectionHandler" displayName="ConfigurationSectionHandler" namespace="Common.Logging" assembly="Common.Logging">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:System.Configuration.IConfigurationSectionHandler" displayName="IConfigurationSectionHandler" namespace="System.Configuration" fullName="System.Configuration.IConfigurationSectionHandler" assembly="System" />
          </hierarchyInterfaces>
        </hierarchyType>
        <hierarchyType id="T:Common.Logging.IConfigurationReader" displayName="IConfigurationReader" namespace="Common.Logging" assembly="Common.Logging" />
        <hierarchyType id="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" assembly="Common.Logging" />
        <hierarchyType id="T:Common.Logging.ILoggerFactoryAdapter" displayName="ILoggerFactoryAdapter" namespace="Common.Logging" assembly="Common.Logging" />
        <hierarchyType id="T:Common.Logging.LogManager" displayName="LogManager" namespace="Common.Logging" assembly="Common.Logging" />
        <hierarchyType id="T:System.Delegate" displayName="Delegate" namespace="System" assembly="mscorlib">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:System.ICloneable" displayName="ICloneable" namespace="System" fullName="System.ICloneable" assembly="mscorlib" />
            <hierarchyInterface id="T:System.Runtime.Serialization.ISerializable" displayName="ISerializable" namespace="System.Runtime.Serialization" fullName="System.Runtime.Serialization.ISerializable" assembly="mscorlib" />
          </hierarchyInterfaces>
          <hierarchyType id="T:System.MulticastDelegate" displayName="MulticastDelegate" namespace="System" assembly="mscorlib">
            <hierarchyType id="T:Common.Logging.FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" assembly="Common.Logging" />
          </hierarchyType>
        </hierarchyType>
        <hierarchyType id="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:System.Runtime.Serialization.ISerializable" displayName="ISerializable" namespace="System.Runtime.Serialization" fullName="System.Runtime.Serialization.ISerializable" assembly="mscorlib" />
          </hierarchyInterfaces>
          <hierarchyType id="T:System.ApplicationException" displayName="ApplicationException" namespace="System" assembly="mscorlib">
            <hierarchyType id="T:Common.Logging.ConfigurationException" displayName="ConfigurationException" namespace="Common.Logging" assembly="Common.Logging" />
          </hierarchyType>
        </hierarchyType>
        <hierarchyType id="T:System.ValueType" displayName="ValueType" namespace="System" assembly="mscorlib">
          <hierarchyType id="T:System.Enum" displayName="Enum" namespace="System" assembly="mscorlib">
            <hierarchyInterfaces>
              <hierarchyInterface id="T:System.IComparable" displayName="IComparable" namespace="System" fullName="System.IComparable" assembly="mscorlib" />
              <hierarchyInterface id="T:System.IConvertible" displayName="IConvertible" namespace="System" fullName="System.IConvertible" assembly="mscorlib" />
              <hierarchyInterface id="T:System.IFormattable" displayName="IFormattable" namespace="System" fullName="System.IFormattable" assembly="mscorlib" />
            </hierarchyInterfaces>
            <hierarchyType id="T:Common.Logging.LogLevel" displayName="LogLevel" namespace="Common.Logging" assembly="Common.Logging" />
          </hierarchyType>
        </hierarchyType>
      </hierarchyType>
    </namespaceHierarchy>
    <namespaceHierarchy name="Common.Logging.NLog">
      <hierarchyType id="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib">
        <hierarchyType id="T:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter" displayName="AbstractCachingLoggerFactoryAdapter" namespace="Common.Logging.Factory" assembly="Common.Logging">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:Common.Logging.ILoggerFactoryAdapter" displayName="ILoggerFactoryAdapter" namespace="Common.Logging" fullName="Common.Logging.ILoggerFactoryAdapter" assembly="Common.Logging" />
          </hierarchyInterfaces>
          <hierarchyType id="T:Common.Logging.NLog.NLogLoggerFactoryAdapter" displayName="NLogLoggerFactoryAdapter" namespace="Common.Logging.NLog" assembly="Common.Logging.NLog" />
        </hierarchyType>
        <hierarchyType id="T:Common.Logging.Factory.AbstractLogger" displayName="AbstractLogger" namespace="Common.Logging.Factory" assembly="Common.Logging">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" fullName="Common.Logging.ILog" assembly="Common.Logging" />
          </hierarchyInterfaces>
          <hierarchyType id="T:Common.Logging.NLog.NLogLogger" displayName="NLogLogger" namespace="Common.Logging.NLog" assembly="Common.Logging.NLog" />
        </hierarchyType>
        <hierarchyType id="T:NLog.Target" displayName="Target" namespace="NLog" assembly="NLog">
          <hierarchyType id="T:NLog.TargetWithLayout" displayName="TargetWithLayout" namespace="NLog" assembly="NLog">
            <hierarchyType id="T:Common.Logging.NLog.CommonLoggingTarget" displayName="CommonLoggingTarget" namespace="Common.Logging.NLog" assembly="Common.Logging.NLog" />
          </hierarchyType>
        </hierarchyType>
      </hierarchyType>
    </namespaceHierarchy>
    <namespaceHierarchy name="Common.Logging.Log4Net">
      <hierarchyType id="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib">
        <hierarchyType id="T:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter" displayName="AbstractCachingLoggerFactoryAdapter" namespace="Common.Logging.Factory" assembly="Common.Logging">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:Common.Logging.ILoggerFactoryAdapter" displayName="ILoggerFactoryAdapter" namespace="Common.Logging" fullName="Common.Logging.ILoggerFactoryAdapter" assembly="Common.Logging" />
          </hierarchyInterfaces>
          <hierarchyType id="T:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter" displayName="Log4NetLoggerFactoryAdapter" namespace="Common.Logging.Log4Net" assembly="Common.Logging.Log4Net" />
          <hierarchyType id="T:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter" displayName="Log4NetLoggerFactoryAdapter" namespace="Common.Logging.Log4Net" assembly="Common.Logging.Log4Net129" />
        </hierarchyType>
        <hierarchyType id="T:Common.Logging.Factory.AbstractLogger" displayName="AbstractLogger" namespace="Common.Logging.Factory" assembly="Common.Logging">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" fullName="Common.Logging.ILog" assembly="Common.Logging" />
          </hierarchyInterfaces>
          <hierarchyType id="T:Common.Logging.Log4Net.Log4NetLogger" displayName="Log4NetLogger" namespace="Common.Logging.Log4Net" assembly="Common.Logging.Log4Net" />
          <hierarchyType id="T:Common.Logging.Log4Net.Log4NetLogger" displayName="Log4NetLogger" namespace="Common.Logging.Log4Net" assembly="Common.Logging.Log4Net129" />
        </hierarchyType>
        <hierarchyType id="T:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.ILog4NetRuntime" displayName="Log4NetLoggerFactoryAdapter.ILog4NetRuntime" namespace="Common.Logging.Log4Net" assembly="Common.Logging.Log4Net129" />
        <hierarchyType id="T:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.ILog4NetRuntime" displayName="Log4NetLoggerFactoryAdapter.ILog4NetRuntime" namespace="Common.Logging.Log4Net" assembly="Common.Logging.Log4Net" />
        <hierarchyType id="T:log4net.Appender.AppenderSkeleton" displayName="AppenderSkeleton" namespace="log4net.Appender" assembly="log4net">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:log4net.Appender.IAppender" displayName="IAppender" namespace="log4net.Appender" fullName="log4net.Appender.IAppender" assembly="log4net" />
            <hierarchyInterface id="T:log4net.Appender.IBulkAppender" displayName="IBulkAppender" namespace="log4net.Appender" fullName="log4net.Appender.IBulkAppender" assembly="log4net" />
            <hierarchyInterface id="T:log4net.Core.IOptionHandler" displayName="IOptionHandler" namespace="log4net.Core" fullName="log4net.Core.IOptionHandler" assembly="log4net" />
          </hierarchyInterfaces>
          <hierarchyType id="T:Common.Logging.Log4Net.CommonLoggingAppender" displayName="CommonLoggingAppender" namespace="Common.Logging.Log4Net" assembly="Common.Logging.Log4Net" />
          <hierarchyType id="T:Common.Logging.Log4Net.CommonLoggingAppender" displayName="CommonLoggingAppender" namespace="Common.Logging.Log4Net" assembly="Common.Logging.Log4Net129" />
        </hierarchyType>
      </hierarchyType>
    </namespaceHierarchy>
    <namespaceHierarchy name="Common.Logging.Simple">
      <hierarchyType id="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib">
        <hierarchyType id="T:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter" displayName="AbstractCachingLoggerFactoryAdapter" namespace="Common.Logging.Factory" assembly="Common.Logging">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:Common.Logging.ILoggerFactoryAdapter" displayName="ILoggerFactoryAdapter" namespace="Common.Logging" fullName="Common.Logging.ILoggerFactoryAdapter" assembly="Common.Logging" />
          </hierarchyInterfaces>
          <hierarchyType id="T:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter" displayName="AbstractSimpleLoggerFactoryAdapter" namespace="Common.Logging.Simple" assembly="Common.Logging">
            <hierarchyType id="T:Common.Logging.Simple.ConsoleOutLoggerFactoryAdapter" displayName="ConsoleOutLoggerFactoryAdapter" namespace="Common.Logging.Simple" assembly="Common.Logging" />
            <hierarchyType id="T:Common.Logging.Simple.TraceLoggerFactoryAdapter" displayName="TraceLoggerFactoryAdapter" namespace="Common.Logging.Simple" assembly="Common.Logging" />
          </hierarchyType>
        </hierarchyType>
        <hierarchyType id="T:Common.Logging.Factory.AbstractLogger" displayName="AbstractLogger" namespace="Common.Logging.Factory" assembly="Common.Logging">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" fullName="Common.Logging.ILog" assembly="Common.Logging" />
          </hierarchyInterfaces>
          <hierarchyType id="T:Common.Logging.Simple.AbstractSimpleLogger" displayName="AbstractSimpleLogger" namespace="Common.Logging.Simple" assembly="Common.Logging">
            <hierarchyType id="T:Common.Logging.Simple.CapturingLogger" displayName="CapturingLogger" namespace="Common.Logging.Simple" assembly="Common.Logging" />
            <hierarchyType id="T:Common.Logging.Simple.ConsoleOutLogger" displayName="ConsoleOutLogger" namespace="Common.Logging.Simple" assembly="Common.Logging" />
            <hierarchyType id="T:Common.Logging.Simple.TraceLogger" displayName="TraceLogger" namespace="Common.Logging.Simple" assembly="Common.Logging">
              <hierarchyInterfaces>
                <hierarchyInterface id="T:System.Runtime.Serialization.IDeserializationCallback" displayName="IDeserializationCallback" namespace="System.Runtime.Serialization" fullName="System.Runtime.Serialization.IDeserializationCallback" assembly="mscorlib" />
              </hierarchyInterfaces>
            </hierarchyType>
          </hierarchyType>
        </hierarchyType>
        <hierarchyType id="T:Common.Logging.Simple.CapturingLoggerEvent" displayName="CapturingLoggerEvent" namespace="Common.Logging.Simple" assembly="Common.Logging" />
        <hierarchyType id="T:Common.Logging.Simple.CapturingLoggerFactoryAdapter" displayName="CapturingLoggerFactoryAdapter" namespace="Common.Logging.Simple" assembly="Common.Logging">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:Common.Logging.ILoggerFactoryAdapter" displayName="ILoggerFactoryAdapter" namespace="Common.Logging" fullName="Common.Logging.ILoggerFactoryAdapter" assembly="Common.Logging" />
          </hierarchyInterfaces>
        </hierarchyType>
        <hierarchyType id="T:Common.Logging.Simple.NoOpLogger" displayName="NoOpLogger" namespace="Common.Logging.Simple" assembly="Common.Logging">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" fullName="Common.Logging.ILog" assembly="Common.Logging" />
          </hierarchyInterfaces>
        </hierarchyType>
        <hierarchyType id="T:Common.Logging.Simple.NoOpLoggerFactoryAdapter" displayName="NoOpLoggerFactoryAdapter" namespace="Common.Logging.Simple" assembly="Common.Logging">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:Common.Logging.ILoggerFactoryAdapter" displayName="ILoggerFactoryAdapter" namespace="Common.Logging" fullName="Common.Logging.ILoggerFactoryAdapter" assembly="Common.Logging" />
          </hierarchyInterfaces>
        </hierarchyType>
        <hierarchyType id="T:System.MarshalByRefObject" displayName="MarshalByRefObject" namespace="System" assembly="mscorlib">
          <hierarchyType id="T:System.Diagnostics.TraceListener" displayName="TraceListener" namespace="System.Diagnostics" assembly="System">
            <hierarchyInterfaces>
              <hierarchyInterface id="T:System.IDisposable" displayName="IDisposable" namespace="System" fullName="System.IDisposable" assembly="mscorlib" />
            </hierarchyInterfaces>
            <hierarchyType id="T:Common.Logging.Simple.CommonLoggingTraceListener" displayName="CommonLoggingTraceListener" namespace="Common.Logging.Simple" assembly="Common.Logging" />
          </hierarchyType>
        </hierarchyType>
      </hierarchyType>
    </namespaceHierarchy>
    <namespaceHierarchy name="Common.Logging.EntLib">
      <hierarchyType id="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib">
        <hierarchyType id="T:Common.Logging.EntLib.EntLibLoggerSettings" displayName="EntLibLoggerSettings" namespace="Common.Logging.EntLib" assembly="Common.Logging.EntLib" />
        <hierarchyType id="T:Common.Logging.EntLib.EntLibLoggerSettings" displayName="EntLibLoggerSettings" namespace="Common.Logging.EntLib" assembly="Common.Logging.EntLib41" />
        <hierarchyType id="T:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter" displayName="AbstractCachingLoggerFactoryAdapter" namespace="Common.Logging.Factory" assembly="Common.Logging">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:Common.Logging.ILoggerFactoryAdapter" displayName="ILoggerFactoryAdapter" namespace="Common.Logging" fullName="Common.Logging.ILoggerFactoryAdapter" assembly="Common.Logging" />
          </hierarchyInterfaces>
          <hierarchyType id="T:Common.Logging.EntLib.EntLibLoggerFactoryAdapter" displayName="EntLibLoggerFactoryAdapter" namespace="Common.Logging.EntLib" assembly="Common.Logging.EntLib41" />
          <hierarchyType id="T:Common.Logging.EntLib.EntLibLoggerFactoryAdapter" displayName="EntLibLoggerFactoryAdapter" namespace="Common.Logging.EntLib" assembly="Common.Logging.EntLib" />
        </hierarchyType>
        <hierarchyType id="T:Common.Logging.Factory.AbstractLogger" displayName="AbstractLogger" namespace="Common.Logging.Factory" assembly="Common.Logging">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" fullName="Common.Logging.ILog" assembly="Common.Logging" />
          </hierarchyInterfaces>
          <hierarchyType id="T:Common.Logging.EntLib.EntLibLogger" displayName="EntLibLogger" namespace="Common.Logging.EntLib" assembly="Common.Logging.EntLib41" />
          <hierarchyType id="T:Common.Logging.EntLib.EntLibLogger" displayName="EntLibLogger" namespace="Common.Logging.EntLib" assembly="Common.Logging.EntLib" />
        </hierarchyType>
        <hierarchyType id="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerAsssembler" displayName="TraceListenerAsssembler" namespace="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration" assembly="Microsoft.Practices.EnterpriseLibrary.Logging">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.IAssembler`2" displayName="IAssembler(TObject,TConfiguration)" namespace="Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder" fullName="Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.IAssembler`2" assembly="Microsoft.Practices.EnterpriseLibrary.Common" />
          </hierarchyInterfaces>
          <hierarchyType id="T:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerAssembler" displayName="CommonLoggingEntlibTraceListenerAssembler" namespace="Common.Logging.EntLib" assembly="Common.Logging.EntLib41" />
          <hierarchyType id="T:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerAssembler" displayName="CommonLoggingEntlibTraceListenerAssembler" namespace="Common.Logging.EntLib" assembly="Common.Logging.EntLib" />
        </hierarchyType>
        <hierarchyType id="T:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogFilter" displayName="LogFilter" namespace="Microsoft.Practices.EnterpriseLibrary.Logging.Filters" assembly="Microsoft.Practices.EnterpriseLibrary.Logging">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter" displayName="ILogFilter" namespace="Microsoft.Practices.EnterpriseLibrary.Logging.Filters" fullName="Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter" assembly="Microsoft.Practices.EnterpriseLibrary.Logging" />
          </hierarchyInterfaces>
          <hierarchyType id="T:Common.Logging.EntLib.SeverityFilter" displayName="SeverityFilter" namespace="Common.Logging.EntLib" assembly="Common.Logging.EntLib41" />
          <hierarchyType id="T:Common.Logging.EntLib.SeverityFilter" displayName="SeverityFilter" namespace="Common.Logging.EntLib" assembly="Common.Logging.EntLib" />
        </hierarchyType>
        <hierarchyType id="T:System.Configuration.ConfigurationElement" displayName="ConfigurationElement" namespace="System.Configuration" assembly="System.Configuration">
          <hierarchyType id="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement" displayName="NamedConfigurationElement" namespace="Microsoft.Practices.EnterpriseLibrary.Common.Configuration" assembly="Microsoft.Practices.EnterpriseLibrary.Common">
            <hierarchyInterfaces>
              <hierarchyInterface id="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IObjectWithName" displayName="IObjectWithName" namespace="Microsoft.Practices.EnterpriseLibrary.Common.Configuration" fullName="Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IObjectWithName" assembly="Microsoft.Practices.EnterpriseLibrary.Common" />
            </hierarchyInterfaces>
            <hierarchyType id="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement" displayName="NameTypeConfigurationElement" namespace="Microsoft.Practices.EnterpriseLibrary.Common.Configuration" assembly="Microsoft.Practices.EnterpriseLibrary.Common">
              <hierarchyInterfaces>
                <hierarchyInterface id="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IObjectWithNameAndType" displayName="IObjectWithNameAndType" namespace="Microsoft.Practices.EnterpriseLibrary.Common.Configuration" fullName="Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IObjectWithNameAndType" assembly="Microsoft.Practices.EnterpriseLibrary.Common" />
              </hierarchyInterfaces>
              <hierarchyType id="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData" displayName="TraceListenerData" namespace="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration" assembly="Microsoft.Practices.EnterpriseLibrary.Logging">
                <hierarchyType id="T:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData" displayName="CommonLoggingEntlibTraceListenerData" namespace="Common.Logging.EntLib" assembly="Common.Logging.EntLib41" />
                <hierarchyType id="T:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData" displayName="CommonLoggingEntlibTraceListenerData" namespace="Common.Logging.EntLib" assembly="Common.Logging.EntLib" />
              </hierarchyType>
            </hierarchyType>
          </hierarchyType>
        </hierarchyType>
        <hierarchyType id="T:System.MarshalByRefObject" displayName="MarshalByRefObject" namespace="System" assembly="mscorlib">
          <hierarchyType id="T:System.Diagnostics.TraceListener" displayName="TraceListener" namespace="System.Diagnostics" assembly="System">
            <hierarchyInterfaces>
              <hierarchyInterface id="T:System.IDisposable" displayName="IDisposable" namespace="System" fullName="System.IDisposable" assembly="mscorlib" />
            </hierarchyInterfaces>
            <hierarchyType id="T:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTraceListenerBase" displayName="FormattedTraceListenerBase" namespace="Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners" assembly="Microsoft.Practices.EnterpriseLibrary.Logging">
              <hierarchyInterfaces>
                <hierarchyInterface id="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IInstrumentationEventProvider" displayName="IInstrumentationEventProvider" namespace="Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation" fullName="Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IInstrumentationEventProvider" assembly="Microsoft.Practices.EnterpriseLibrary.Common" />
              </hierarchyInterfaces>
              <hierarchyType id="T:Common.Logging.EntLib.CommonLoggingEntlibTraceListener" displayName="CommonLoggingEntlibTraceListener" namespace="Common.Logging.EntLib" assembly="Common.Logging.EntLib41" />
              <hierarchyType id="T:Common.Logging.EntLib.CommonLoggingEntlibTraceListener" displayName="CommonLoggingEntlibTraceListener" namespace="Common.Logging.EntLib" assembly="Common.Logging.EntLib" />
            </hierarchyType>
          </hierarchyType>
        </hierarchyType>
      </hierarchyType>
    </namespaceHierarchy>
  </namespaceHierarchies>
  <assembly name="Common.Logging" version="2.0.0.0">
    <documentation><summary> This assembly contains the core functionality of the Common.Logging framework. In particular, checkout <see cref="T:Common.Logging.LogManager" /> and <see cref="T:Common.Logging.ILog" /> for usage information. </summary></documentation>
    <assemblyReference name="mscorlib" />
    <assemblyReference name="System" />
    <assemblyReference name="System.Xml" />
    <assemblyReference name="System.Configuration" />
    <attribute name="System.Reflection.AssemblyCompanyAttribute" target="assembly">
      <property name="Company" type="System.String" value="http://netcommon.sourceforge.net/" />
    </attribute>
    <attribute name="System.Runtime.InteropServices.ComVisibleAttribute" target="assembly">
      <property name="Value" type="System.Boolean" value="False" />
    </attribute>
    <attribute name="System.CLSCompliantAttribute" target="assembly">
      <property name="IsCompliant" type="System.Boolean" value="True" />
    </attribute>
    <attribute name="System.Reflection.AssemblyCopyrightAttribute" target="assembly">
      <property name="Copyright" type="System.String" value="Copyright 2006-2009 the Common Infrastructure Libraries Team." />
    </attribute>
    <attribute name="System.Runtime.CompilerServices.RuntimeCompatibilityAttribute" target="assembly">
      <property name="WrapNonExceptionThrows" type="System.Boolean" value="True" />
    </attribute>
    <attribute name="System.Reflection.AssemblyTrademarkAttribute" target="assembly">
      <property name="Trademark" type="System.String" value="Apache License, Version 2.0" />
    </attribute>
    <attribute name="System.Diagnostics.DebuggableAttribute" target="assembly">
      <property name="IsJITTrackingEnabled" type="System.Boolean" value="True" />
      <property name="IsJITOptimizerDisabled" type="System.Boolean" value="True" />
      <property name="DebuggingFlags" type="System.Diagnostics.DebuggableAttribute+DebuggingModes" value="(DebuggingModes.Default|DebuggingModes.IgnoreSymbolStoreSequencePoints|DebuggingModes.EnableEditAndContinue|DebuggingModes.DisableOptimizations)" />
    </attribute>
    <attribute name="System.Reflection.AssemblyConfigurationAttribute" target="assembly">
      <property name="Configuration" type="System.String" value="net-2.0.win32; release" />
    </attribute>
    <attribute name="System.Reflection.AssemblyProductAttribute" target="assembly">
      <property name="Product" type="System.String" value="Common Logging Framework" />
    </attribute>
    <attribute name="System.Runtime.CompilerServices.CompilationRelaxationsAttribute" target="assembly">
      <property name="CompilationRelaxations" type="System.Int32" value="8" />
    </attribute>
    <attribute name="System.Reflection.AssemblyInformationalVersionAttribute" target="assembly">
      <property name="InformationalVersion" type="System.String" value="2.0.0.0; net-2.0.win32; release" />
    </attribute>
    <module name="Common.Logging.dll">
      <namespace name="Common.Logging.Configuration">
        <documentation><summary> This namespace contains various utility classes. </summary></documentation>
        <class name="ArgUtils" displayName="ArgUtils" namespace="Common.Logging.Configuration" id="T:Common.Logging.Configuration.ArgUtils" access="Public" static="true">
          <documentation><summary> Various utility methods for using during factory and logger instance configuration </summary>
<author>Erich Eichinger</author></documentation>
          <method name="RegisterTypeParser(T)" displayName="RegisterTypeParser(T)" id="M:Common.Logging.Configuration.ArgUtils.RegisterTypeParser``1(Common.Logging.Configuration.ArgUtils.ParseHandler{``0})" access="Public" contract="Static" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Adds the parser to the list of known type parsers. </summary>
<remarks> .NET intrinsic types are pre-registerd: short, int, long, float, double, decimal, bool </remarks></documentation>
            <parameter name="parser" typeId="T:Common.Logging.Configuration.ArgUtils.ParseHandler`1" displayName="ArgUtils.ParseHandler(T)" namespace="Common.Logging.Configuration" assembly="Common.Logging" nullable="false" valueType="false">
              <genericargument name="T" displayName="T" />
            </parameter>
            <genericargument name="T" displayName="T" />
          </method>
          <method name="GetValue" displayName="GetValue" id="M:Common.Logging.Configuration.ArgUtils.GetValue(System.Collections.Specialized.NameValueCollection,System.String)" access="Public" contract="Static" valueType="false" overload="1">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary> Retrieves the named value from the specified <see cref="T:System.Collections.Specialized.NameValueCollection" />. </summary>
<param name="values">may be null</param>
<param name="name">the value's key</param>
<returns>if <paramref name="values" /> is not null, the value returned by values[name]. <c>null</c> otherwise.</returns></documentation>
            <parameter name="values" typeId="T:System.Collections.Specialized.NameValueCollection" displayName="NameValueCollection" namespace="System.Collections.Specialized" assembly="System" nullable="false" valueType="false" />
            <parameter name="name" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetValue" displayName="GetValue" id="M:Common.Logging.Configuration.ArgUtils.GetValue(System.Collections.Specialized.NameValueCollection,System.String,System.String)" access="Public" contract="Static" valueType="false" overload="2">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary> Retrieves the named value from the specified <see cref="T:System.Collections.Specialized.NameValueCollection" />. </summary>
<param name="values">may be null</param>
<param name="name">the value's key</param>
<param name="defaultValue">the default value, if not found</param>
<returns>if <paramref name="values" /> is not null, the value returned by values[name]. <c>null</c> otherwise.</returns></documentation>
            <parameter name="values" typeId="T:System.Collections.Specialized.NameValueCollection" displayName="NameValueCollection" namespace="System.Collections.Specialized" assembly="System" nullable="false" valueType="false" />
            <parameter name="name" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="defaultValue" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Coalesce" displayName="Coalesce" id="M:Common.Logging.Configuration.ArgUtils.Coalesce(System.String[])" access="Public" contract="Static" valueType="false">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary> Returns the first nonnull, nonempty value among its arguments. </summary>
<remarks> Returns <c>null</c>, if the initial list was null or empty. </remarks>
<seealso cref="M:Common.Logging.Configuration.ArgUtils.Coalesce``1(System.Predicate{``0},``0[])" /></documentation>
            <parameter name="values" isParamArray="true" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
          </method>
          <method name="Coalesce(T)" displayName="Coalesce(T)" id="M:Common.Logging.Configuration.ArgUtils.Coalesce``1(System.Predicate{``0},``0[])" access="Public" contract="Static" valueType="false">
            <returnType typeId="T:T" displayName="ArgUtils.T" namespace="Common.Logging.Configuration" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Returns the first nonnull, nonempty value among its arguments. </summary>
<remarks> Also </remarks></documentation>
            <parameter name="predicate" typeId="T:System.Predicate`1" displayName="Predicate(T)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="T" displayName="T" />
            </parameter>
            <parameter name="values" isParamArray="true" typeId="T:T" displayName="ArgUtils.T" namespace="Common.Logging.Configuration" assembly="Common.Logging" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <genericargument name="T" displayName="T" />
            <genericconstraints param="T">
              <constraint>class</constraint>
            </genericconstraints>
          </method>
          <method name="TryParseEnum(T)" displayName="TryParseEnum(T)" id="M:Common.Logging.Configuration.ArgUtils.TryParseEnum``1(``0,System.String)" access="Public" contract="Static" valueType="true">
            <returnType typeId="T:T" displayName="ArgUtils.T" namespace="Common.Logging.Configuration" assembly="Common.Logging" nullable="false" valueType="true" />
            <documentation><summary> Tries parsing <paramref name="stringValue" /> into an enum of the type of <paramref name="defaultValue" />. </summary>
<param name="defaultValue">the default value to return if parsing fails</param>
<param name="stringValue">the string value to parse</param>
<returns>the successfully parsed value, <paramref name="defaultValue" /> otherwise.</returns></documentation>
            <parameter name="defaultValue" typeId="T:T" displayName="ArgUtils.T" namespace="Common.Logging.Configuration" assembly="Common.Logging" nullable="false" valueType="true" />
            <parameter name="stringValue" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <genericargument name="T" displayName="T" />
            <genericconstraints param="T">
              <constraint>struct</constraint>
              <constraint>System.ValueType</constraint>
            </genericconstraints>
          </method>
          <method name="TryParse(T)" displayName="TryParse(T)" id="M:Common.Logging.Configuration.ArgUtils.TryParse``1(``0,System.String)" access="Public" contract="Static" valueType="false">
            <returnType typeId="T:T" displayName="ArgUtils.T" namespace="Common.Logging.Configuration" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Tries parsing <paramref name="stringValue" /> into the specified return type. </summary>
<param name="defaultValue">the default value to return if parsing fails</param>
<param name="stringValue">the string value to parse</param>
<returns>the successfully parsed value, <paramref name="defaultValue" /> otherwise.</returns></documentation>
            <parameter name="defaultValue" typeId="T:T" displayName="ArgUtils.T" namespace="Common.Logging.Configuration" assembly="Common.Logging" nullable="false" valueType="false" />
            <parameter name="stringValue" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <genericargument name="T" displayName="T" />
          </method>
          <method name="AssertNotNull(T)" displayName="AssertNotNull(T)" id="M:Common.Logging.Configuration.ArgUtils.AssertNotNull``1(System.String,``0)" access="Public" contract="Static" valueType="false" overload="1">
            <returnType typeId="T:T" displayName="ArgUtils.T" namespace="Common.Logging.Configuration" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Throws a <see cref="T:System.ArgumentNullException" /> if <paramref name="val" /> is <c>null</c>. </summary></documentation>
            <parameter name="paramName" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="val" typeId="T:T" displayName="ArgUtils.T" namespace="Common.Logging.Configuration" assembly="Common.Logging" nullable="false" valueType="false" />
            <genericargument name="T" displayName="T" />
            <genericconstraints param="T">
              <constraint>class</constraint>
            </genericconstraints>
          </method>
          <method name="AssertNotNull(T)" displayName="AssertNotNull(T)" id="M:Common.Logging.Configuration.ArgUtils.AssertNotNull``1(System.String,``0,System.String,System.Object[])" access="Public" contract="Static" valueType="false" overload="2">
            <returnType typeId="T:T" displayName="ArgUtils.T" namespace="Common.Logging.Configuration" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Throws a <see cref="T:System.ArgumentNullException" /> if <paramref name="val" /> is <c>null</c>. </summary></documentation>
            <parameter name="paramName" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="val" typeId="T:T" displayName="ArgUtils.T" namespace="Common.Logging.Configuration" assembly="Common.Logging" nullable="false" valueType="false" />
            <parameter name="messageFormat" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <genericargument name="T" displayName="T" />
            <genericconstraints param="T">
              <constraint>class</constraint>
            </genericconstraints>
          </method>
          <method name="AssertIsAssignable(T)" displayName="AssertIsAssignable(T)" id="M:Common.Logging.Configuration.ArgUtils.AssertIsAssignable``1(System.String,System.Type)" access="Public" contract="Static" valueType="false" overload="1">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary> Throws a <see cref="T:System.ArgumentOutOfRangeException" /> if an object of type <paramref name="valType" /> is not assignable to type <typeparam name="T"></typeparam>. </summary></documentation>
            <parameter name="paramName" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="valType" typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <genericargument name="T" displayName="T" />
          </method>
          <method name="AssertIsAssignable(T)" displayName="AssertIsAssignable(T)" id="M:Common.Logging.Configuration.ArgUtils.AssertIsAssignable``1(System.String,System.Type,System.String,System.Object[])" access="Public" contract="Static" valueType="false" overload="2">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary> Throws a <see cref="T:System.ArgumentOutOfRangeException" /> if an object of type <paramref name="valType" /> is not assignable to type <typeparam name="T"></typeparam>. </summary></documentation>
            <parameter name="paramName" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="valType" typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="messageFormat" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <genericargument name="T" displayName="T" />
          </method>
          <method name="Guard" displayName="Guard" id="M:Common.Logging.Configuration.ArgUtils.Guard(Common.Logging.Configuration.ArgUtils.Action,System.String,System.Object[])" access="Public" contract="Static" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ensures any exception thrown by the given <paramref name="action" /> is wrapped with an <see cref="T:Common.Logging.ConfigurationException" />. </summary>
<remarks> If <paramref name="action" /> already throws a ConfigurationException, it will not be wrapped. </remarks>
<param name="action">the action to execute</param>
<param name="messageFormat">the message to be set on the thrown <see cref="T:Common.Logging.ConfigurationException" /></param>
<param name="args">args to be passed to <see cref="M:System.String.Format(System.String,System.Object[])" /> to format the message</param></documentation>
            <parameter name="action" typeId="T:Common.Logging.Configuration.ArgUtils.Action" displayName="ArgUtils.Action" namespace="Common.Logging.Configuration" assembly="Common.Logging" nullable="false" valueType="false" />
            <parameter name="messageFormat" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
          </method>
          <method name="Guard(T)" displayName="Guard(T)" id="M:Common.Logging.Configuration.ArgUtils.Guard``1(Common.Logging.Configuration.ArgUtils.Function{``0},System.String,System.Object[])" access="Public" contract="Static" valueType="false">
            <returnType typeId="T:T" displayName="ArgUtils.T" namespace="Common.Logging.Configuration" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Ensures any exception thrown by the given <paramref name="function" /> is wrapped with an <see cref="T:Common.Logging.ConfigurationException" />. </summary>
<remarks> If <paramref name="function" /> already throws a ConfigurationException, it will not be wrapped. </remarks>
<param name="function">the action to execute</param>
<param name="messageFormat">the message to be set on the thrown <see cref="T:Common.Logging.ConfigurationException" /></param>
<param name="args">args to be passed to <see cref="M:System.String.Format(System.String,System.Object[])" /> to format the message</param></documentation>
            <parameter name="function" typeId="T:Common.Logging.Configuration.ArgUtils.Function`1" displayName="ArgUtils.Function(T)" namespace="Common.Logging.Configuration" assembly="Common.Logging" nullable="false" valueType="false">
              <genericargument name="T" displayName="T" />
            </parameter>
            <parameter name="messageFormat" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <genericargument name="T" displayName="T" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Common.Logging.Configuration.ArgUtils.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Equals" displayName="Equals" id="M:Common.Logging.Configuration.ArgUtils.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Common.Logging.Configuration.ArgUtils.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="GetType" displayName="GetType" id="M:Common.Logging.Configuration.ArgUtils.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Common.Logging.Configuration.ArgUtils.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Common.Logging.Configuration.ArgUtils.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
        </class>
        <class name="DefaultConfigurationReader" displayName="DefaultConfigurationReader" namespace="Common.Logging.Configuration" id="T:Common.Logging.Configuration.DefaultConfigurationReader" access="Public">
          <documentation><summary> Implementation of <see cref="T:Common.Logging.IConfigurationReader" /> that uses the standard .NET configuration APIs, ConfigurationSettings in 1.x and ConfigurationManager in 2.0 </summary>
<author>Mark Pollack</author></documentation>
          <implementsClass type="Common.Logging.IConfigurationReader" id="T:Common.Logging.IConfigurationReader" displayName="IConfigurationReader" namespace="Common.Logging" />
          <constructor name=".ctor" id="M:Common.Logging.Configuration.DefaultConfigurationReader.#ctor" access="Public" contract="Normal">
            <documentation>
              <summary>Initializes a new instance of the <see cref="T:Common.Logging.Configuration.DefaultConfigurationReader" /> class.</summary>
            </documentation>
          </constructor>
          <method name="GetSection" displayName="GetSection" id="M:Common.Logging.Configuration.DefaultConfigurationReader.GetSection(System.String)" access="Public" contract="Final" valueType="false">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary> Parses the configuration section and returns the resulting object. </summary>
<param name="sectionName">Name of the configuration section.</param>
<returns> Object created by a corresponding <see cref="T:System.Configuration.IConfigurationSectionHandler" />. </returns>
<remarks>
  <p> Primary purpose of this method is to allow us to parse and load configuration sections using the same API regardless of the .NET framework version. </p>
</remarks>
<see cref="T:Common.Logging.ConfigurationSectionHandler" /></documentation>
            <parameter name="sectionName" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="GetSection" id="M:Common.Logging.IConfigurationReader.GetSection(System.String)" interface="IConfigurationReader" interfaceId="T:Common.Logging.IConfigurationReader" assembly="Common.Logging" declaringType="Common.Logging.IConfigurationReader" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Common.Logging.Configuration.DefaultConfigurationReader.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Equals" displayName="Equals" id="M:Common.Logging.Configuration.DefaultConfigurationReader.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Common.Logging.Configuration.DefaultConfigurationReader.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="GetType" displayName="GetType" id="M:Common.Logging.Configuration.DefaultConfigurationReader.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Common.Logging.Configuration.DefaultConfigurationReader.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Common.Logging.Configuration.DefaultConfigurationReader.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
        </class>
        <class name="LogSetting" displayName="LogSetting" namespace="Common.Logging.Configuration" id="T:Common.Logging.Configuration.LogSetting" access="Public">
          <documentation><summary> Container used to hold configuration information from config file. </summary>
<author>Gilles Bayon</author></documentation>
          <constructor name=".ctor" id="M:Common.Logging.Configuration.LogSetting.#ctor(System.Type,System.Collections.Specialized.NameValueCollection)" access="Public" contract="Normal">
            <documentation>
              <summary>
                <span class="missing">Missing &lt;summary&gt; documentation for M:Common.Logging.Configuration.LogSetting.#ctor(System.Type,System.Collections.Specialized.NameValueCollection)</span>
              </summary><summary></summary>
<param name="factoryAdapterType"> The <see cref="T:Common.Logging.ILoggerFactoryAdapter" /> type that will be used for creating <see cref="T:Common.Logging.ILog" /></param>
<param name="properties"> Additional user supplied properties that are passed to the <paramref name="factoryAdapterType" />'s constructor. </param></documentation>
            <parameter name="factoryAdapterType" typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="properties" typeId="T:System.Collections.Specialized.NameValueCollection" displayName="NameValueCollection" namespace="System.Collections.Specialized" assembly="System" nullable="false" valueType="false" />
          </constructor>
          <property name="FactoryAdapterType" id="P:Common.Logging.Configuration.LogSetting.FactoryAdapterType" access="Public" contract="Normal" get="Public" set="false" typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <documentation><summary> The <see cref="T:Common.Logging.ILoggerFactoryAdapter" /> type that will be used for creating <see cref="T:Common.Logging.ILog" /> instances. </summary></documentation>
          </property>
          <property name="Properties" id="P:Common.Logging.Configuration.LogSetting.Properties" access="Public" contract="Normal" get="Public" set="false" typeId="T:System.Collections.Specialized.NameValueCollection" displayName="NameValueCollection" namespace="System.Collections.Specialized" assembly="System" nullable="false" valueType="false">
            <documentation><summary> Additional user supplied properties that are passed to the <see cref="P:Common.Logging.Configuration.LogSetting.FactoryAdapterType" />'s constructor. </summary></documentation>
          </property>
          <method name="ToString" displayName="ToString" id="M:Common.Logging.Configuration.LogSetting.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Equals" displayName="Equals" id="M:Common.Logging.Configuration.LogSetting.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Common.Logging.Configuration.LogSetting.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="GetType" displayName="GetType" id="M:Common.Logging.Configuration.LogSetting.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Common.Logging.Configuration.LogSetting.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Common.Logging.Configuration.LogSetting.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
        </class>
        <delegate name="ArgUtils.ParseHandler`1" displayName="ArgUtils.ParseHandler(T)" namespace="Common.Logging.Configuration" id="T:Common.Logging.Configuration.ArgUtils.ParseHandler`1" access="NestedPublic" valueType="false">
          <returnType typeId="T:T" displayName="ArgUtils.ParseHandler(T).T" namespace="Common.Logging.Configuration" assembly="Common.Logging" nullable="false" valueType="false" />
          <documentation><summary> A delegate converting a string representation into the target type </summary></documentation>
          <parameter name="strValue" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          <genericargument name="T" displayName="T" />
        </delegate>
        <delegate name="ArgUtils.Action" displayName="ArgUtils.Action" namespace="Common.Logging.Configuration" id="T:Common.Logging.Configuration.ArgUtils.Action" access="NestedPublic" valueType="true">
          <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          <documentation><summary> An anonymous action delegate with no arguments and no return value. </summary>
<seealso cref="M:Common.Logging.Configuration.ArgUtils.Guard(Common.Logging.Configuration.ArgUtils.Action,System.String,System.Object[])" /></documentation>
        </delegate>
        <delegate name="ArgUtils.Function`1" displayName="ArgUtils.Function(T)" namespace="Common.Logging.Configuration" id="T:Common.Logging.Configuration.ArgUtils.Function`1" access="NestedPublic" valueType="false">
          <returnType typeId="T:T" displayName="ArgUtils.Function(T).T" namespace="Common.Logging.Configuration" assembly="Common.Logging" nullable="false" valueType="false" />
          <documentation><summary> An anonymous action delegate with no arguments and no return value. </summary>
<seealso cref="M:Common.Logging.Configuration.ArgUtils.Guard``1(Common.Logging.Configuration.ArgUtils.Function{``0},System.String,System.Object[])" /></documentation>
          <genericargument name="T" displayName="T" />
        </delegate>
      </namespace>
      <namespace name="Common.Logging">
        <documentation><summary> This namespace contains all core classes making up the Common.Logging framework. </summary></documentation>
        <class name="ConfigurationException" displayName="ConfigurationException" namespace="Common.Logging" id="T:Common.Logging.ConfigurationException" access="Public">
          <documentation><summary> The exception that is thrown when a configuration system error has occurred with Common.Logging </summary>
<author>Mark Pollack</author></documentation>
          <attribute name="System.SerializableAttribute" />
          <baseType name="ApplicationException" id="T:System.ApplicationException" displayName="ApplicationException" namespace="System" assembly="mscorlib">
            <baseType name="Exception" id="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" />
          </baseType>
          <implementsClass type="System.Runtime.Serialization.ISerializable" id="T:System.Runtime.Serialization.ISerializable" displayName="ISerializable" namespace="System.Runtime.Serialization" inherited="true" />
          <constructor name=".ctor" id="M:Common.Logging.ConfigurationException.#ctor" access="Public" contract="Normal" overload="1">
            <documentation><summary>Creates a new instance of the ObjectsException class.</summary></documentation>
          </constructor>
          <constructor name=".ctor" id="M:Common.Logging.ConfigurationException.#ctor(System.String)" access="Public" contract="Normal" overload="2">
            <documentation><summary> Creates a new instance of the ConfigurationException class. with the specified message. </summary>
<param name="message"> A message about the exception. </param></documentation>
            <parameter name="message" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </constructor>
          <constructor name=".ctor" id="M:Common.Logging.ConfigurationException.#ctor(System.String,System.Exception)" access="Public" contract="Normal" overload="3">
            <documentation><summary> Creates a new instance of the ConfigurationException class with the specified message and root cause. </summary>
<param name="message"> A message about the exception. </param>
<param name="rootCause"> The root exception that is being wrapped. </param></documentation>
            <parameter name="message" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="rootCause" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </constructor>
          <constructor name=".ctor" id="M:Common.Logging.ConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" access="Family" contract="Normal" overload="4">
            <documentation><summary> Creates a new instance of the ConfigurationException class. </summary>
<param name="info"> The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown. </param>
<param name="context"> The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param></documentation>
            <parameter name="info" typeId="T:System.Runtime.Serialization.SerializationInfo" displayName="SerializationInfo" namespace="System.Runtime.Serialization" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="context" typeId="T:System.Runtime.Serialization.StreamingContext" displayName="StreamingContext" namespace="System.Runtime.Serialization" assembly="mscorlib" nullable="false" valueType="true" />
          </constructor>
          <property name="Message" id="P:Common.Logging.ConfigurationException.Message" access="Public" contract="Virtual" declaringType="System.Exception" declaringAssembly="mscorlib" declaringId="P:System.Exception.Message" get="Public" set="false" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <documentation><summary></summary></documentation>
          </property>
          <property name="Data" id="P:Common.Logging.ConfigurationException.Data" access="Public" contract="Virtual" declaringType="System.Exception" declaringAssembly="mscorlib" declaringId="P:System.Exception.Data" get="Public" set="false" typeId="T:System.Collections.IDictionary" displayName="IDictionary" namespace="System.Collections" assembly="mscorlib" nullable="false" valueType="false">
            <documentation><summary></summary></documentation>
          </property>
          <property name="InnerException" id="P:Common.Logging.ConfigurationException.InnerException" access="Public" contract="Final" declaringType="System.Exception" declaringAssembly="mscorlib" declaringId="P:System.Exception.InnerException" get="Public" set="false" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <documentation><summary></summary></documentation>
          </property>
          <property name="TargetSite" id="P:Common.Logging.ConfigurationException.TargetSite" access="Public" contract="Final" declaringType="System.Exception" declaringAssembly="mscorlib" declaringId="P:System.Exception.TargetSite" get="Public" set="false" typeId="T:System.Reflection.MethodBase" displayName="MethodBase" namespace="System.Reflection" assembly="mscorlib" nullable="false" valueType="false">
            <documentation><summary></summary></documentation>
          </property>
          <property name="StackTrace" id="P:Common.Logging.ConfigurationException.StackTrace" access="Public" contract="Virtual" declaringType="System.Exception" declaringAssembly="mscorlib" declaringId="P:System.Exception.StackTrace" get="Public" set="false" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <documentation><summary></summary></documentation>
          </property>
          <property name="HelpLink" id="P:Common.Logging.ConfigurationException.HelpLink" access="Public" contract="Virtual" declaringType="System.Exception" declaringAssembly="mscorlib" declaringId="P:System.Exception.HelpLink" get="Public" set="Public" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <documentation><summary></summary></documentation>
          </property>
          <property name="Source" id="P:Common.Logging.ConfigurationException.Source" access="Public" contract="Virtual" declaringType="System.Exception" declaringAssembly="mscorlib" declaringId="P:System.Exception.Source" get="Public" set="Public" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <documentation><summary></summary></documentation>
          </property>
          <property name="HResult" id="P:Common.Logging.ConfigurationException.HResult" access="Family" contract="Normal" declaringType="System.Exception" declaringAssembly="mscorlib" declaringId="P:System.Exception.HResult" get="Family" set="Family" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary></summary></documentation>
          </property>
          <method name="GetBaseException" displayName="GetBaseException" id="M:Common.Logging.ConfigurationException.GetBaseException" access="Public" contract="Virtual" valueType="false" declaringType="System.Exception" declaringAssembly="mscorlib" declaringId="M:System.Exception.GetBaseException">
            <returnType typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="ToString" displayName="ToString" id="M:Common.Logging.ConfigurationException.ToString" access="Public" contract="Override" valueType="false" declaringType="System.Exception" declaringAssembly="mscorlib" declaringId="M:System.Exception.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="GetObjectData" displayName="GetObjectData" id="M:Common.Logging.ConfigurationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" access="Public" contract="Virtual" valueType="true" declaringType="System.Exception" declaringAssembly="mscorlib" declaringId="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Security.Permissions.SecurityPermissionAttribute">
              <property name="Flags" type="System.Security.Permissions.SecurityPermissionFlag" value="SecurityPermissionFlag.SerializationFormatter" />
              <property name="Assertion" type="System.Boolean" value="False" />
              <property name="UnmanagedCode" type="System.Boolean" value="False" />
              <property name="SkipVerification" type="System.Boolean" value="False" />
              <property name="Execution" type="System.Boolean" value="False" />
              <property name="ControlThread" type="System.Boolean" value="False" />
              <property name="ControlEvidence" type="System.Boolean" value="False" />
              <property name="ControlPolicy" type="System.Boolean" value="False" />
              <property name="SerializationFormatter" type="System.Boolean" value="True" />
              <property name="ControlDomainPolicy" type="System.Boolean" value="False" />
              <property name="ControlPrincipal" type="System.Boolean" value="False" />
              <property name="ControlAppDomain" type="System.Boolean" value="False" />
              <property name="RemotingConfiguration" type="System.Boolean" value="False" />
              <property name="Infrastructure" type="System.Boolean" value="False" />
              <property name="BindingRedirects" type="System.Boolean" value="False" />
              <property name="Action" type="System.Security.Permissions.SecurityAction" value="SecurityAction.LinkDemand" />
              <property name="Unrestricted" type="System.Boolean" value="False" />
            </attribute>
            <parameter name="info" typeId="T:System.Runtime.Serialization.SerializationInfo" displayName="SerializationInfo" namespace="System.Runtime.Serialization" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="context" typeId="T:System.Runtime.Serialization.StreamingContext" displayName="StreamingContext" namespace="System.Runtime.Serialization" assembly="mscorlib" nullable="false" valueType="true" />
            <implements name="GetObjectData" id="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" interface="ISerializable" interfaceId="T:System.Runtime.Serialization.ISerializable" assembly="mscorlib" declaringType="System.Runtime.Serialization.ISerializable" />
          </method>
          <method name="GetType" displayName="GetType" id="M:Common.Logging.ConfigurationException.GetType" access="Public" contract="Final" valueType="false" declaringType="System.Exception" declaringAssembly="mscorlib" declaringId="M:System.Exception.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Equals" displayName="Equals" id="M:Common.Logging.ConfigurationException.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Common.Logging.ConfigurationException.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Common.Logging.ConfigurationException.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Common.Logging.ConfigurationException.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
        </class>
        <class name="ConfigurationSectionHandler" displayName="ConfigurationSectionHandler" namespace="Common.Logging" id="T:Common.Logging.ConfigurationSectionHandler" access="Public">
          <documentation><summary> Used in an application's configuration file (App.Config or Web.Config) to configure the logging subsystem. </summary>
<example> An example configuration section that writes log messages to the Console using the built-in Console Logger. <code lang="XML">&lt;configuration&gt;
    &lt;configSections&gt;
      &lt;sectionGroup name="common"&gt;
        &lt;section name="logging" type="Common.Logging.ConfigurationSectionHandler, Common.Logging" /&gt;
      &lt;/sectionGroup&gt; 
    &lt;/configSections&gt;
    &lt;common&gt;
      &lt;logging&gt;
        &lt;factoryAdapter type="Common.Logging.Simple.ConsoleOutLoggerFactoryAdapter, Common.Logging"&gt;
          &lt;arg key="showLogName" value="true" /&gt;
          &lt;arg key="showDataTime" value="true" /&gt;
          &lt;arg key="level" value="ALL" /&gt;
          &lt;arg key="dateTimeFormat" value="yyyy/MM/dd HH:mm:ss:fff" /&gt;
        &lt;/factoryAdapter&gt;
      &lt;/logging&gt;
    &lt;/common&gt;
&lt;/configuration&gt;
</code></example></documentation>
          <implementsClass type="System.Configuration.IConfigurationSectionHandler" id="T:System.Configuration.IConfigurationSectionHandler" displayName="IConfigurationSectionHandler" namespace="System.Configuration" />
          <constructor name=".ctor" id="M:Common.Logging.ConfigurationSectionHandler.#ctor" access="Public" contract="Normal">
            <documentation><summary> Constructor </summary></documentation>
          </constructor>
          <method name="Create" displayName="Create" id="M:Common.Logging.ConfigurationSectionHandler.Create(Common.Logging.Configuration.LogSetting,System.Object,System.Xml.XmlNode)" access="Public" contract="Normal" valueType="false">
            <returnType typeId="T:Common.Logging.Configuration.LogSetting" displayName="LogSetting" namespace="Common.Logging.Configuration" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Verifies that the logFactoryAdapter element appears once in the configuration section. </summary>
<param name="parent">settings of a parent section - atm this must always be null</param>
<param name="configContext">Additional information about the configuration process.</param>
<param name="section">The configuration section to apply an XPath query too.</param>
<returns> A <see cref="T:Common.Logging.Configuration.LogSetting" /> object containing the specified logFactoryAdapter type along with user supplied configuration properties. </returns></documentation>
            <parameter name="parent" typeId="T:Common.Logging.Configuration.LogSetting" displayName="LogSetting" namespace="Common.Logging.Configuration" assembly="Common.Logging" nullable="false" valueType="false" />
            <parameter name="configContext" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="section" typeId="T:System.Xml.XmlNode" displayName="XmlNode" namespace="System.Xml" assembly="System.Xml" nullable="false" valueType="false" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Common.Logging.ConfigurationSectionHandler.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Equals" displayName="Equals" id="M:Common.Logging.ConfigurationSectionHandler.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Common.Logging.ConfigurationSectionHandler.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="GetType" displayName="GetType" id="M:Common.Logging.ConfigurationSectionHandler.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Common.Logging.ConfigurationSectionHandler.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Common.Logging.ConfigurationSectionHandler.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
        </class>
        <class name="LogManager" displayName="LogManager" namespace="Common.Logging" id="T:Common.Logging.LogManager" access="Public" static="true">
          <documentation><summary> Use the LogManager's <see cref="M:Common.Logging.LogManager.GetLogger(System.String)" /> or <see cref="M:Common.Logging.LogManager.GetLogger(System.Type)" /> methods to obtain <see cref="T:Common.Logging.ILog" /> instances for logging. </summary>
<remarks> For configuring the underlying log system using application configuration, see the example at <see cref="T:Common.Logging.ConfigurationSectionHandler" />. For configuring programmatically, see the example section below. </remarks>
<example> The example below shows the typical use of LogManager to obtain a reference to a logger and log an exception: <code>
ILog log = LogManager.GetLogger(this.GetType());
...
try 
{ 
  /* .... */ 
}
catch(Exception ex)
{
  log.ErrorFormat("Hi {0}", ex, "dude");
}

</code> The example below shows programmatic configuration of the underlying log system: <code>
// create properties
NameValueCollection properties = new NameValueCollection();
properties["showDateTime"] = "true";

// set Adapter
Common.Logging.LogManager.Adapter = new 
Common.Logging.Simple.ConsoleOutLoggerFactoryAdapter(properties);

</code></example>
<seealso cref="T:Common.Logging.ILog" />
<seealso cref="P:Common.Logging.LogManager.Adapter" />
<seealso cref="T:Common.Logging.ILoggerFactoryAdapter" />
<seealso cref="T:Common.Logging.ConfigurationSectionHandler" />
<author>Gilles Bayon</author></documentation>
          <field name="COMMON_LOGGING_SECTION" id="F:Common.Logging.LogManager.COMMON_LOGGING_SECTION" access="Public" contract="Static" initOnly="true" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <documentation><summary> The name of the default configuration section to read settings from. </summary>
<remarks> You can always change the source of your configuration settings by setting another <see cref="T:Common.Logging.IConfigurationReader" /> instance on <see cref="P:Common.Logging.LogManager.ConfigurationReader" />. </remarks></documentation>
          </field>
          <property name="ConfigurationReader" id="P:Common.Logging.LogManager.ConfigurationReader" access="Public" contract="Static" get="Public" set="false" typeId="T:Common.Logging.IConfigurationReader" displayName="IConfigurationReader" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="false">
            <documentation><summary> Gets the configuration reader used to initialize the LogManager. </summary>
<remarks>Primarily used for testing purposes but maybe useful to obtain configuration information from some place other than the .NET application configuration file.</remarks>
<value>The configuration reader.</value></documentation>
          </property>
          <property name="Adapter" id="P:Common.Logging.LogManager.Adapter" access="Public" contract="Static" get="Public" set="Public" typeId="T:Common.Logging.ILoggerFactoryAdapter" displayName="ILoggerFactoryAdapter" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="false">
            <documentation><summary> Gets or sets the adapter. </summary>
<value>The adapter.</value></documentation>
          </property>
          <method name="Reset" displayName="Reset" id="M:Common.Logging.LogManager.Reset" access="Public" contract="Static" valueType="true" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Reset the <see cref="N:Common.Logging" /> infrastructure to its default settings. This means, that configuration settings will be re-read from section <c>&lt;common/logging&gt;</c> of your <c>app.config</c>. </summary>
<remarks> This is mainly used for unit testing, you wouldn't normally use this in your applications.<br /><b>Note:</b><see cref="T:Common.Logging.ILog" /> instances already handed out from this LogManager are not(!) affected. Resetting LogManager only affects new instances being handed out. </remarks></documentation>
          </method>
          <method name="Reset" displayName="Reset" id="M:Common.Logging.LogManager.Reset(Common.Logging.IConfigurationReader)" access="Public" contract="Static" valueType="true" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Reset the <see cref="N:Common.Logging" /> infrastructure to its default settings. This means, that configuration settings will be re-read from section <c>&lt;common/logging&gt;</c> of your <c>app.config</c>. </summary>
<remarks> This is mainly used for unit testing, you wouldn't normally use this in your applications.<br /><b>Note:</b><see cref="T:Common.Logging.ILog" /> instances already handed out from this LogManager are not(!) affected. Resetting LogManager only affects new instances being handed out. </remarks>
<param name="reader"> the <see cref="T:Common.Logging.IConfigurationReader" /> instance to obtain settings for re-initializing the LogManager. </param></documentation>
            <parameter name="reader" typeId="T:Common.Logging.IConfigurationReader" displayName="IConfigurationReader" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="false" />
          </method>
          <method name="GetCurrentClassLogger" displayName="GetCurrentClassLogger" id="M:Common.Logging.LogManager.GetCurrentClassLogger" access="Public" contract="Static" valueType="false">
            <returnType typeId="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Gets the logger by calling <see cref="M:Common.Logging.ILoggerFactoryAdapter.GetLogger(System.Type)" /> on the currently configured <see cref="P:Common.Logging.LogManager.Adapter" /> using the type of the calling class. </summary>
<remarks> This method needs to inspect the <see cref="T:System.Diagnostics.StackTrace" /> in order to determine the calling class. This of course comes with a performance penalty, thus you shouldn't call it too often in your application. </remarks>
<seealso cref="M:Common.Logging.LogManager.GetLogger(System.Type)" />
<returns>the logger instance obtained from the current <see cref="P:Common.Logging.LogManager.Adapter" /></returns></documentation>
          </method>
          <method name="GetLogger(T)" displayName="GetLogger(T)" id="M:Common.Logging.LogManager.GetLogger``1" access="Public" contract="Static" valueType="false">
            <returnType typeId="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Gets the logger by calling <see cref="M:Common.Logging.ILoggerFactoryAdapter.GetLogger(System.Type)" /> on the currently configured <see cref="P:Common.Logging.LogManager.Adapter" /> using the specified type. </summary>
<returns>the logger instance obtained from the current <see cref="P:Common.Logging.LogManager.Adapter" /></returns></documentation>
            <genericargument name="T" displayName="T" />
          </method>
          <method name="GetLogger" displayName="GetLogger" id="M:Common.Logging.LogManager.GetLogger(System.Type)" access="Public" contract="Static" valueType="false" overload="1">
            <returnType typeId="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Gets the logger by calling <see cref="M:Common.Logging.ILoggerFactoryAdapter.GetLogger(System.Type)" /> on the currently configured <see cref="P:Common.Logging.LogManager.Adapter" /> using the specified type. </summary>
<param name="type">The type.</param>
<returns>the logger instance obtained from the current <see cref="P:Common.Logging.LogManager.Adapter" /></returns></documentation>
            <parameter name="type" typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetLogger" displayName="GetLogger" id="M:Common.Logging.LogManager.GetLogger(System.String)" access="Public" contract="Static" valueType="false" overload="2">
            <returnType typeId="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Gets the logger by calling <see cref="M:Common.Logging.ILoggerFactoryAdapter.GetLogger(System.String)" /> on the currently configured <see cref="P:Common.Logging.LogManager.Adapter" /> using the specified name. </summary>
<param name="name">The name.</param>
<returns>the logger instance obtained from the current <see cref="P:Common.Logging.LogManager.Adapter" /></returns></documentation>
            <parameter name="name" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Common.Logging.LogManager.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Equals" displayName="Equals" id="M:Common.Logging.LogManager.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Common.Logging.LogManager.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="GetType" displayName="GetType" id="M:Common.Logging.LogManager.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Common.Logging.LogManager.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Common.Logging.LogManager.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
        </class>
        <interface name="IConfigurationReader" displayName="IConfigurationReader" namespace="Common.Logging" id="T:Common.Logging.IConfigurationReader" access="Public">
          <documentation><summary> Interface for basic operations to read .NET application configuration information. </summary>
<remarks>Provides a simple abstraction to handle BCL API differences between .NET 1.x and 2.0. Also useful for testing scenarios.</remarks>
<author>Mark Pollack</author></documentation>
          <implementedBy id="T:Common.Logging.Configuration.DefaultConfigurationReader" displayName="DefaultConfigurationReader" namespace="Common.Logging.Configuration" assembly="Common.Logging" />
          <method name="GetSection" displayName="GetSection" id="M:Common.Logging.IConfigurationReader.GetSection(System.String)" access="Public" contract="Abstract" valueType="false">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary> Parses the configuration section and returns the resulting object. </summary>
<remarks>
  <p> Primary purpose of this method is to allow us to parse and load configuration sections using the same API regardless of the .NET framework version. </p>
</remarks>
<param name="sectionName">Name of the configuration section.</param>
<returns>Object created by a corresponding <see cref="T:System.Configuration.IConfigurationSectionHandler" />.</returns>
<see cref="T:Common.Logging.ConfigurationSectionHandler" /></documentation>
            <parameter name="sectionName" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
        </interface>
        <interface name="ILoggerFactoryAdapter" displayName="ILoggerFactoryAdapter" namespace="Common.Logging" id="T:Common.Logging.ILoggerFactoryAdapter" access="Public">
          <documentation><summary> LoggerFactoryAdapter interface is used internally by LogManager Only developers wishing to write new Common.Logging adapters need to worry about this interface. </summary>
<author>Gilles Bayon</author></documentation>
          <implementedBy id="T:Common.Logging.EntLib.EntLibLoggerFactoryAdapter" displayName="EntLibLoggerFactoryAdapter" namespace="Common.Logging.EntLib" assembly="Common.Logging.EntLib41" />
          <implementedBy id="T:Common.Logging.EntLib.EntLibLoggerFactoryAdapter" displayName="EntLibLoggerFactoryAdapter" namespace="Common.Logging.EntLib" assembly="Common.Logging.EntLib" />
          <implementedBy id="T:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter" displayName="AbstractCachingLoggerFactoryAdapter" namespace="Common.Logging.Factory" assembly="Common.Logging" />
          <implementedBy id="T:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter" displayName="Log4NetLoggerFactoryAdapter" namespace="Common.Logging.Log4Net" assembly="Common.Logging.Log4Net129" />
          <implementedBy id="T:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter" displayName="Log4NetLoggerFactoryAdapter" namespace="Common.Logging.Log4Net" assembly="Common.Logging.Log4Net" />
          <implementedBy id="T:Common.Logging.NLog.NLogLoggerFactoryAdapter" displayName="NLogLoggerFactoryAdapter" namespace="Common.Logging.NLog" assembly="Common.Logging.NLog" />
          <implementedBy id="T:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter" displayName="AbstractSimpleLoggerFactoryAdapter" namespace="Common.Logging.Simple" assembly="Common.Logging" />
          <implementedBy id="T:Common.Logging.Simple.CapturingLoggerFactoryAdapter" displayName="CapturingLoggerFactoryAdapter" namespace="Common.Logging.Simple" assembly="Common.Logging" />
          <implementedBy id="T:Common.Logging.Simple.ConsoleOutLoggerFactoryAdapter" displayName="ConsoleOutLoggerFactoryAdapter" namespace="Common.Logging.Simple" assembly="Common.Logging" />
          <implementedBy id="T:Common.Logging.Simple.NoOpLoggerFactoryAdapter" displayName="NoOpLoggerFactoryAdapter" namespace="Common.Logging.Simple" assembly="Common.Logging" />
          <implementedBy id="T:Common.Logging.Simple.TraceLoggerFactoryAdapter" displayName="TraceLoggerFactoryAdapter" namespace="Common.Logging.Simple" assembly="Common.Logging" />
          <method name="GetLogger" displayName="GetLogger" id="M:Common.Logging.ILoggerFactoryAdapter.GetLogger(System.Type)" access="Public" contract="Abstract" valueType="false" overload="1">
            <returnType typeId="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Get a ILog instance by type. </summary>
<param name="type">The type to use for the logger</param>
<returns></returns></documentation>
            <parameter name="type" typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetLogger" displayName="GetLogger" id="M:Common.Logging.ILoggerFactoryAdapter.GetLogger(System.String)" access="Public" contract="Abstract" valueType="false" overload="2">
            <returnType typeId="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Get a ILog instance by name. </summary>
<param name="name">The name of the logger</param>
<returns></returns></documentation>
            <parameter name="name" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
        </interface>
        <interface name="ILog" displayName="ILog" namespace="Common.Logging" id="T:Common.Logging.ILog" access="Public">
          <documentation><summary> A simple logging interface abstracting logging APIs. </summary>
<remarks>
  <para> Implementations should defer calling a message's <see cref="M:System.Object.ToString" /> until the message really needs to be logged to avoid performance penalties. </para>
  <para> Each <see cref="T:Common.Logging.ILog" nolink="true" /> log method offers to pass in a <see cref="T:System.Action`1" /> instead of the actual message. Using this style has the advantage to defer possibly expensive message argument evaluation and formatting (and formatting arguments!) until the message gets actually logged. If the message is not logged at all (e.g. due to <see cref="T:Common.Logging.LogLevel" /> settings), you won't have to pay the peformance penalty of creating the message. </para>
</remarks>
<example> The example below demonstrates using callback style for creating the message, where the call to the <see cref="M:System.Random.NextDouble" /> and the underlying <see cref="M:System.String.Format(System.String,System.Object[])" /> only happens, if level <see cref="F:Common.Logging.LogLevel.Debug" /> is enabled: <code>Log.Debug( m=&gt;m("result is {0}", random.NextDouble()) );
Log.Debug(delegate(m) { m("result is {0}", random.NextDouble()); });
</code></example>
<seealso cref="T:System.Action`1" />
<author>Mark Pollack</author>
<author>Bruno Baia</author>
<author>Erich Eichinger</author></documentation>
          <implementedBy id="T:Common.Logging.EntLib.EntLibLogger" displayName="EntLibLogger" namespace="Common.Logging.EntLib" assembly="Common.Logging.EntLib41" />
          <implementedBy id="T:Common.Logging.EntLib.EntLibLogger" displayName="EntLibLogger" namespace="Common.Logging.EntLib" assembly="Common.Logging.EntLib" />
          <implementedBy id="T:Common.Logging.Factory.AbstractLogger" displayName="AbstractLogger" namespace="Common.Logging.Factory" assembly="Common.Logging" />
          <implementedBy id="T:Common.Logging.Log4Net.Log4NetLogger" displayName="Log4NetLogger" namespace="Common.Logging.Log4Net" assembly="Common.Logging.Log4Net129" />
          <implementedBy id="T:Common.Logging.Log4Net.Log4NetLogger" displayName="Log4NetLogger" namespace="Common.Logging.Log4Net" assembly="Common.Logging.Log4Net" />
          <implementedBy id="T:Common.Logging.NLog.NLogLogger" displayName="NLogLogger" namespace="Common.Logging.NLog" assembly="Common.Logging.NLog" />
          <implementedBy id="T:Common.Logging.Simple.AbstractSimpleLogger" displayName="AbstractSimpleLogger" namespace="Common.Logging.Simple" assembly="Common.Logging" />
          <implementedBy id="T:Common.Logging.Simple.CapturingLogger" displayName="CapturingLogger" namespace="Common.Logging.Simple" assembly="Common.Logging" />
          <implementedBy id="T:Common.Logging.Simple.ConsoleOutLogger" displayName="ConsoleOutLogger" namespace="Common.Logging.Simple" assembly="Common.Logging" />
          <implementedBy id="T:Common.Logging.Simple.NoOpLogger" displayName="NoOpLogger" namespace="Common.Logging.Simple" assembly="Common.Logging" />
          <implementedBy id="T:Common.Logging.Simple.TraceLogger" displayName="TraceLogger" namespace="Common.Logging.Simple" assembly="Common.Logging" />
          <property name="IsTraceEnabled" id="P:Common.Logging.ILog.IsTraceEnabled" access="Public" contract="Abstract" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary></documentation>
          </property>
          <property name="IsDebugEnabled" id="P:Common.Logging.ILog.IsDebugEnabled" access="Public" contract="Abstract" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary></documentation>
          </property>
          <property name="IsErrorEnabled" id="P:Common.Logging.ILog.IsErrorEnabled" access="Public" contract="Abstract" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary></documentation>
          </property>
          <property name="IsFatalEnabled" id="P:Common.Logging.ILog.IsFatalEnabled" access="Public" contract="Abstract" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary></documentation>
          </property>
          <property name="IsInfoEnabled" id="P:Common.Logging.ILog.IsInfoEnabled" access="Public" contract="Abstract" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary></documentation>
          </property>
          <property name="IsWarnEnabled" id="P:Common.Logging.ILog.IsWarnEnabled" access="Public" contract="Abstract" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary></documentation>
          </property>
          <method name="WarnFormat" displayName="WarnFormat" id="M:Common.Logging.ILog.WarnFormat(System.String,System.Object[])" access="Public" contract="Abstract" valueType="true" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="args">the list of format arguments</param></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
          </method>
          <method name="WarnFormat" displayName="WarnFormat" id="M:Common.Logging.ILog.WarnFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Abstract" valueType="true" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="exception">The exception to log.</param>
<param name="args">the list of format arguments</param></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
          </method>
          <method name="WarnFormat" displayName="WarnFormat" id="M:Common.Logging.ILog.WarnFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Abstract" valueType="true" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="args"></param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
          </method>
          <method name="WarnFormat" displayName="WarnFormat" id="M:Common.Logging.ILog.WarnFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Abstract" valueType="true" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="exception">The exception to log.</param>
<param name="args"></param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.ILog.Warn(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Abstract" valueType="true" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level using a callback to obtain the message </summary>
<remarks> Using this method avoids the cost of creating a message and evaluating message arguments that probably won't be logged due to loglevel settings. </remarks>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.ILog.Warn(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Abstract" valueType="true" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level using a callback to obtain the message </summary>
<remarks> Using this method avoids the cost of creating a message and evaluating message arguments that probably won't be logged due to loglevel settings. </remarks>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
<param name="exception">The exception to log, including its stack trace.</param></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.ILog.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Abstract" valueType="true" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level using a callback to obtain the message </summary>
<remarks> Using this method avoids the cost of creating a message and evaluating message arguments that probably won't be logged due to loglevel settings. </remarks>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.ILog.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Abstract" valueType="true" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level using a callback to obtain the message </summary>
<remarks> Using this method avoids the cost of creating a message and evaluating message arguments that probably won't be logged due to loglevel settings. </remarks>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
<param name="exception">The exception to log, including its stack Warn.</param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.ILog.Error(System.Object)" access="Public" contract="Abstract" valueType="true" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary>
<param name="message">The message object to log.</param></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.ILog.Error(System.Object,System.Exception)" access="Public" contract="Abstract" valueType="true" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Error" /> level including the stack trace of the <see cref="T:System.Exception" /> passed as a parameter. </summary>
<param name="message">The message object to log.</param>
<param name="exception">The exception to log, including its stack trace.</param></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="ErrorFormat" displayName="ErrorFormat" id="M:Common.Logging.ILog.ErrorFormat(System.String,System.Object[])" access="Public" contract="Abstract" valueType="true" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="args">the list of format arguments</param></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
          </method>
          <method name="ErrorFormat" displayName="ErrorFormat" id="M:Common.Logging.ILog.ErrorFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Abstract" valueType="true" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="exception">The exception to log.</param>
<param name="args">the list of format arguments</param></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
          </method>
          <method name="ErrorFormat" displayName="ErrorFormat" id="M:Common.Logging.ILog.ErrorFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Abstract" valueType="true" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="args"></param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
          </method>
          <method name="ErrorFormat" displayName="ErrorFormat" id="M:Common.Logging.ILog.ErrorFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Abstract" valueType="true" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="exception">The exception to log.</param>
<param name="args"></param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.ILog.Error(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Abstract" valueType="true" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level using a callback to obtain the message </summary>
<remarks> Using this method avoids the cost of creating a message and evaluating message arguments that probably won't be logged due to loglevel settings. </remarks>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.ILog.Error(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Abstract" valueType="true" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level using a callback to obtain the message </summary>
<remarks> Using this method avoids the cost of creating a message and evaluating message arguments that probably won't be logged due to loglevel settings. </remarks>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
<param name="exception">The exception to log, including its stack trace.</param></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.ILog.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Abstract" valueType="true" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level using a callback to obtain the message </summary>
<remarks> Using this method avoids the cost of creating a message and evaluating message arguments that probably won't be logged due to loglevel settings. </remarks>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.ILog.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Abstract" valueType="true" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level using a callback to obtain the message </summary>
<remarks> Using this method avoids the cost of creating a message and evaluating message arguments that probably won't be logged due to loglevel settings. </remarks>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
<param name="exception">The exception to log, including its stack Error.</param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.ILog.Fatal(System.Object)" access="Public" contract="Abstract" valueType="true" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary>
<param name="message">The message object to log.</param></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.ILog.Fatal(System.Object,System.Exception)" access="Public" contract="Abstract" valueType="true" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level including the stack trace of the <see cref="T:System.Exception" /> passed as a parameter. </summary>
<param name="message">The message object to log.</param>
<param name="exception">The exception to log, including its stack trace.</param></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="FatalFormat" displayName="FatalFormat" id="M:Common.Logging.ILog.FatalFormat(System.String,System.Object[])" access="Public" contract="Abstract" valueType="true" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="args">the list of format arguments</param></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
          </method>
          <method name="FatalFormat" displayName="FatalFormat" id="M:Common.Logging.ILog.FatalFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Abstract" valueType="true" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="exception">The exception to log.</param>
<param name="args">the list of format arguments</param></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
          </method>
          <method name="FatalFormat" displayName="FatalFormat" id="M:Common.Logging.ILog.FatalFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Abstract" valueType="true" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="args"></param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
          </method>
          <method name="FatalFormat" displayName="FatalFormat" id="M:Common.Logging.ILog.FatalFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Abstract" valueType="true" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="exception">The exception to log.</param>
<param name="args"></param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.ILog.Fatal(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Abstract" valueType="true" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level using a callback to obtain the message </summary>
<remarks> Using this method avoids the cost of creating a message and evaluating message arguments that probably won't be logged due to loglevel settings. </remarks>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.ILog.Fatal(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Abstract" valueType="true" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level using a callback to obtain the message </summary>
<remarks> Using this method avoids the cost of creating a message and evaluating message arguments that probably won't be logged due to loglevel settings. </remarks>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
<param name="exception">The exception to log, including its stack trace.</param></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.ILog.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Abstract" valueType="true" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level using a callback to obtain the message </summary>
<remarks> Using this method avoids the cost of creating a message and evaluating message arguments that probably won't be logged due to loglevel settings. </remarks>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.ILog.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Abstract" valueType="true" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level using a callback to obtain the message </summary>
<remarks> Using this method avoids the cost of creating a message and evaluating message arguments that probably won't be logged due to loglevel settings. </remarks>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
<param name="exception">The exception to log, including its stack Fatal.</param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.ILog.Trace(System.Object)" access="Public" contract="Abstract" valueType="true" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary>
<param name="message">The message object to log.</param></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.ILog.Trace(System.Object,System.Exception)" access="Public" contract="Abstract" valueType="true" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Trace" /> level including the stack trace of the <see cref="T:System.Exception" /> passed as a parameter. </summary>
<param name="message">The message object to log.</param>
<param name="exception">The exception to log, including its stack trace.</param></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="TraceFormat" displayName="TraceFormat" id="M:Common.Logging.ILog.TraceFormat(System.String,System.Object[])" access="Public" contract="Abstract" valueType="true" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="args">the list of format arguments</param></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
          </method>
          <method name="TraceFormat" displayName="TraceFormat" id="M:Common.Logging.ILog.TraceFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Abstract" valueType="true" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="exception">The exception to log.</param>
<param name="args">the list of format arguments</param></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
          </method>
          <method name="TraceFormat" displayName="TraceFormat" id="M:Common.Logging.ILog.TraceFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Abstract" valueType="true" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="args"></param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
          </method>
          <method name="TraceFormat" displayName="TraceFormat" id="M:Common.Logging.ILog.TraceFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Abstract" valueType="true" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="exception">The exception to log.</param>
<param name="args"></param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.ILog.Trace(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Abstract" valueType="true" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level using a callback to obtain the message </summary>
<remarks> Using this method avoids the cost of creating a message and evaluating message arguments that probably won't be logged due to loglevel settings. </remarks>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.ILog.Trace(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Abstract" valueType="true" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level using a callback to obtain the message </summary>
<remarks> Using this method avoids the cost of creating a message and evaluating message arguments that probably won't be logged due to loglevel settings. </remarks>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
<param name="exception">The exception to log, including its stack trace.</param></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.ILog.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Abstract" valueType="true" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level using a callback to obtain the message </summary>
<remarks> Using this method avoids the cost of creating a message and evaluating message arguments that probably won't be logged due to loglevel settings. </remarks>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.ILog.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Abstract" valueType="true" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level using a callback to obtain the message </summary>
<remarks> Using this method avoids the cost of creating a message and evaluating message arguments that probably won't be logged due to loglevel settings. </remarks>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
<param name="exception">The exception to log, including its stack trace.</param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.ILog.Debug(System.Object)" access="Public" contract="Abstract" valueType="true" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary>
<param name="message">The message object to log.</param></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.ILog.Debug(System.Object,System.Exception)" access="Public" contract="Abstract" valueType="true" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Debug" /> level including the stack trace of the <see cref="T:System.Exception" /> passed as a parameter. </summary>
<param name="message">The message object to log.</param>
<param name="exception">The exception to log, including its stack trace.</param></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="DebugFormat" displayName="DebugFormat" id="M:Common.Logging.ILog.DebugFormat(System.String,System.Object[])" access="Public" contract="Abstract" valueType="true" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="args">the list of format arguments</param></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
          </method>
          <method name="DebugFormat" displayName="DebugFormat" id="M:Common.Logging.ILog.DebugFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Abstract" valueType="true" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="exception">The exception to log.</param>
<param name="args">the list of format arguments</param></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
          </method>
          <method name="DebugFormat" displayName="DebugFormat" id="M:Common.Logging.ILog.DebugFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Abstract" valueType="true" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="args"></param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
          </method>
          <method name="DebugFormat" displayName="DebugFormat" id="M:Common.Logging.ILog.DebugFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Abstract" valueType="true" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="exception">The exception to log.</param>
<param name="args"></param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.ILog.Debug(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Abstract" valueType="true" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level using a callback to obtain the message </summary>
<remarks> Using this method avoids the cost of creating a message and evaluating message arguments that probably won't be logged due to loglevel settings. </remarks>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.ILog.Debug(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Abstract" valueType="true" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level using a callback to obtain the message </summary>
<remarks> Using this method avoids the cost of creating a message and evaluating message arguments that probably won't be logged due to loglevel settings. </remarks>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
<param name="exception">The exception to log, including its stack trace.</param></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.ILog.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Abstract" valueType="true" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level using a callback to obtain the message </summary>
<remarks> Using this method avoids the cost of creating a message and evaluating message arguments that probably won't be logged due to loglevel settings. </remarks>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.ILog.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Abstract" valueType="true" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level using a callback to obtain the message </summary>
<remarks> Using this method avoids the cost of creating a message and evaluating message arguments that probably won't be logged due to loglevel settings. </remarks>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
<param name="exception">The exception to log, including its stack Debug.</param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.ILog.Info(System.Object)" access="Public" contract="Abstract" valueType="true" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary>
<param name="message">The message object to log.</param></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.ILog.Info(System.Object,System.Exception)" access="Public" contract="Abstract" valueType="true" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Info" /> level including the stack trace of the <see cref="T:System.Exception" /> passed as a parameter. </summary>
<param name="message">The message object to log.</param>
<param name="exception">The exception to log, including its stack trace.</param></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="InfoFormat" displayName="InfoFormat" id="M:Common.Logging.ILog.InfoFormat(System.String,System.Object[])" access="Public" contract="Abstract" valueType="true" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="args">the list of format arguments</param></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
          </method>
          <method name="InfoFormat" displayName="InfoFormat" id="M:Common.Logging.ILog.InfoFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Abstract" valueType="true" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="exception">The exception to log.</param>
<param name="args">the list of format arguments</param></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
          </method>
          <method name="InfoFormat" displayName="InfoFormat" id="M:Common.Logging.ILog.InfoFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Abstract" valueType="true" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="args"></param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
          </method>
          <method name="InfoFormat" displayName="InfoFormat" id="M:Common.Logging.ILog.InfoFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Abstract" valueType="true" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="exception">The exception to log.</param>
<param name="args"></param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.ILog.Info(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Abstract" valueType="true" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level using a callback to obtain the message </summary>
<remarks> Using this method avoids the cost of creating a message and evaluating message arguments that probably won't be logged due to loglevel settings. </remarks>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.ILog.Info(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Abstract" valueType="true" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level using a callback to obtain the message </summary>
<remarks> Using this method avoids the cost of creating a message and evaluating message arguments that probably won't be logged due to loglevel settings. </remarks>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
<param name="exception">The exception to log, including its stack trace.</param></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.ILog.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Abstract" valueType="true" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level using a callback to obtain the message </summary>
<remarks> Using this method avoids the cost of creating a message and evaluating message arguments that probably won't be logged due to loglevel settings. </remarks>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.ILog.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Abstract" valueType="true" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level using a callback to obtain the message </summary>
<remarks> Using this method avoids the cost of creating a message and evaluating message arguments that probably won't be logged due to loglevel settings. </remarks>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
<param name="exception">The exception to log, including its stack Info.</param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.ILog.Warn(System.Object)" access="Public" contract="Abstract" valueType="true" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary>
<param name="message">The message object to log.</param></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.ILog.Warn(System.Object,System.Exception)" access="Public" contract="Abstract" valueType="true" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Warn" /> level including the stack trace of the <see cref="T:System.Exception" /> passed as a parameter. </summary>
<param name="message">The message object to log.</param>
<param name="exception">The exception to log, including its stack trace.</param></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
        </interface>
        <delegate name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" id="T:Common.Logging.FormatMessageHandler" access="Public" valueType="false">
          <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          <documentation><summary> The type of method that is passed into e.g. <see cref="M:Common.Logging.ILog.Debug(System.Action{Common.Logging.FormatMessageHandler})" /> and allows the callback method to "submit" it's message to the underlying output system. </summary>
<param name="format">the format argument as in <see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="args">the argument list as in <see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<seealso cref="T:Common.Logging.ILog" />
<author>Erich Eichinger</author></documentation>
          <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <array rank="1" />
            <attribute name="System.ParamArrayAttribute" />
          </parameter>
        </delegate>
        <enumeration name="LogLevel" id="T:Common.Logging.LogLevel" displayName="LogLevel" namespace="Common.Logging" access="Public">
          <documentation><summary> The 7 possible logging levels </summary>
<author>Gilles Bayon</author></documentation>
          <field name="All" id="F:Common.Logging.LogLevel.All" access="Public" contract="Static" literal="true" value="0" typeId="T:Common.Logging.LogLevel" displayName="LogLevel" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="true">
            <documentation><summary> All logging levels </summary></documentation>
          </field>
          <field name="Trace" id="F:Common.Logging.LogLevel.Trace" access="Public" contract="Static" literal="true" value="1" typeId="T:Common.Logging.LogLevel" displayName="LogLevel" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="true">
            <documentation><summary> A trace logging level </summary></documentation>
          </field>
          <field name="Debug" id="F:Common.Logging.LogLevel.Debug" access="Public" contract="Static" literal="true" value="2" typeId="T:Common.Logging.LogLevel" displayName="LogLevel" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="true">
            <documentation><summary> A debug logging level </summary></documentation>
          </field>
          <field name="Info" id="F:Common.Logging.LogLevel.Info" access="Public" contract="Static" literal="true" value="3" typeId="T:Common.Logging.LogLevel" displayName="LogLevel" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="true">
            <documentation><summary> A info logging level </summary></documentation>
          </field>
          <field name="Warn" id="F:Common.Logging.LogLevel.Warn" access="Public" contract="Static" literal="true" value="4" typeId="T:Common.Logging.LogLevel" displayName="LogLevel" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="true">
            <documentation><summary> A warn logging level </summary></documentation>
          </field>
          <field name="Error" id="F:Common.Logging.LogLevel.Error" access="Public" contract="Static" literal="true" value="5" typeId="T:Common.Logging.LogLevel" displayName="LogLevel" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="true">
            <documentation><summary> An error logging level </summary></documentation>
          </field>
          <field name="Fatal" id="F:Common.Logging.LogLevel.Fatal" access="Public" contract="Static" literal="true" value="6" typeId="T:Common.Logging.LogLevel" displayName="LogLevel" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="true">
            <documentation><summary> A fatal logging level </summary></documentation>
          </field>
          <field name="Off" id="F:Common.Logging.LogLevel.Off" access="Public" contract="Static" literal="true" value="7" typeId="T:Common.Logging.LogLevel" displayName="LogLevel" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="true">
            <documentation><summary> Do not log anything. </summary></documentation>
          </field>
        </enumeration>
      </namespace>
      <namespace name="Common.Logging.Factory">
        <documentation><summary> This namespace contains convenience base classes for implementing your own <see cref="T:Common.Logging.ILoggerFactoryAdapter" />s. </summary></documentation>
        <class name="AbstractCachingLoggerFactoryAdapter" displayName="AbstractCachingLoggerFactoryAdapter" namespace="Common.Logging.Factory" id="T:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter" access="Public" abstract="true">
          <documentation><summary> An implementation of <see cref="T:Common.Logging.ILoggerFactoryAdapter" /> that caches loggers handed out by this factory. </summary>
<remarks> Implementors just need to override <see cref="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.CreateLogger(System.String)" />. </remarks>
<author>Erich Eichinger</author></documentation>
          <derivedBy id="T:Common.Logging.EntLib.EntLibLoggerFactoryAdapter" displayName="EntLibLoggerFactoryAdapter" namespace="Common.Logging.EntLib" assembly="Common.Logging.EntLib" />
          <derivedBy id="T:Common.Logging.EntLib.EntLibLoggerFactoryAdapter" displayName="EntLibLoggerFactoryAdapter" namespace="Common.Logging.EntLib" assembly="Common.Logging.EntLib41" />
          <derivedBy id="T:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter" displayName="Log4NetLoggerFactoryAdapter" namespace="Common.Logging.Log4Net" assembly="Common.Logging.Log4Net129" />
          <derivedBy id="T:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter" displayName="Log4NetLoggerFactoryAdapter" namespace="Common.Logging.Log4Net" assembly="Common.Logging.Log4Net" />
          <derivedBy id="T:Common.Logging.NLog.NLogLoggerFactoryAdapter" displayName="NLogLoggerFactoryAdapter" namespace="Common.Logging.NLog" assembly="Common.Logging.NLog" />
          <derivedBy id="T:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter" displayName="AbstractSimpleLoggerFactoryAdapter" namespace="Common.Logging.Simple" assembly="Common.Logging" />
          <implementsClass type="Common.Logging.ILoggerFactoryAdapter" id="T:Common.Logging.ILoggerFactoryAdapter" displayName="ILoggerFactoryAdapter" namespace="Common.Logging" />
          <constructor name=".ctor" id="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.#ctor(System.Boolean)" access="Family" contract="Normal">
            <documentation><summary> Creates a new </summary>
<param name="caseSensitiveLoggerCache"></param></documentation>
            <parameter name="caseSensitiveLoggerCache" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </constructor>
          <method name="ClearLoggerCache" displayName="ClearLoggerCache" id="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.ClearLoggerCache" access="Family" contract="Normal" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Purges all loggers from cache </summary></documentation>
          </method>
          <method name="CreateLogger" displayName="CreateLogger" id="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.CreateLogger(System.String)" access="Family" contract="Abstract" valueType="false">
            <returnType typeId="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Create the specified named logger instance </summary>
<remarks> Derived factories need to implement this method to create the actual logger instance. </remarks></documentation>
            <parameter name="name" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetLogger" displayName="GetLogger" id="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.GetLogger(System.Type)" access="Public" contract="Final" valueType="false" overload="1">
            <returnType typeId="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Get a ILog instance by <see cref="T:System.Type" />. </summary>
<param name="type">Usually the <see cref="T:System.Type" /> of the current class.</param>
<returns> An ILog instance either obtained from the internal cache or created by a call to <see cref="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.CreateLogger(System.String)" />. </returns></documentation>
            <parameter name="type" typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="GetLogger" id="M:Common.Logging.ILoggerFactoryAdapter.GetLogger(System.Type)" interface="ILoggerFactoryAdapter" interfaceId="T:Common.Logging.ILoggerFactoryAdapter" assembly="Common.Logging" declaringType="Common.Logging.ILoggerFactoryAdapter" />
          </method>
          <method name="GetLogger" displayName="GetLogger" id="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.GetLogger(System.String)" access="Public" contract="Final" valueType="false" overload="2">
            <returnType typeId="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Get a ILog instance by name. </summary>
<param name="name">Usually a <see cref="T:System.Type" />'s Name or FullName property.</param>
<returns> An ILog instance either obtained from the internal cache or created by a call to <see cref="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.CreateLogger(System.String)" />. </returns></documentation>
            <parameter name="name" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="GetLogger" id="M:Common.Logging.ILoggerFactoryAdapter.GetLogger(System.String)" interface="ILoggerFactoryAdapter" interfaceId="T:Common.Logging.ILoggerFactoryAdapter" assembly="Common.Logging" declaringType="Common.Logging.ILoggerFactoryAdapter" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Equals" displayName="Equals" id="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="GetType" displayName="GetType" id="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
        </class>
        <class name="AbstractLogger" displayName="AbstractLogger" namespace="Common.Logging.Factory" id="T:Common.Logging.Factory.AbstractLogger" access="Public" abstract="true">
          <documentation><summary> Provides base implementation common for most logger adapters </summary>
<author>Erich Eichinger</author></documentation>
          <attribute name="System.SerializableAttribute" />
          <derivedBy id="T:Common.Logging.EntLib.EntLibLogger" displayName="EntLibLogger" namespace="Common.Logging.EntLib" assembly="Common.Logging.EntLib" />
          <derivedBy id="T:Common.Logging.EntLib.EntLibLogger" displayName="EntLibLogger" namespace="Common.Logging.EntLib" assembly="Common.Logging.EntLib41" />
          <derivedBy id="T:Common.Logging.Log4Net.Log4NetLogger" displayName="Log4NetLogger" namespace="Common.Logging.Log4Net" assembly="Common.Logging.Log4Net129" />
          <derivedBy id="T:Common.Logging.Log4Net.Log4NetLogger" displayName="Log4NetLogger" namespace="Common.Logging.Log4Net" assembly="Common.Logging.Log4Net" />
          <derivedBy id="T:Common.Logging.NLog.NLogLogger" displayName="NLogLogger" namespace="Common.Logging.NLog" assembly="Common.Logging.NLog" />
          <derivedBy id="T:Common.Logging.Simple.AbstractSimpleLogger" displayName="AbstractSimpleLogger" namespace="Common.Logging.Simple" assembly="Common.Logging" />
          <implementsClass type="Common.Logging.ILog" id="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" />
          <constructor name=".ctor" id="M:Common.Logging.Factory.AbstractLogger.#ctor" access="Family" contract="Normal">
            <documentation><summary> Creates a new logger instance using <see cref="M:Common.Logging.Factory.AbstractLogger.WriteInternal(Common.Logging.LogLevel,System.Object,System.Exception)" /> for writing log events to the underlying log system. </summary>
<seealso cref="M:Common.Logging.Factory.AbstractLogger.GetWriteHandler" /></documentation>
          </constructor>
          <property name="IsTraceEnabled" id="P:Common.Logging.Factory.AbstractLogger.IsTraceEnabled" access="Public" contract="Abstract" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary>
<remarks> Override this in your derived class to comply with the underlying logging system </remarks></documentation>
            <implements name="IsTraceEnabled" id="P:Common.Logging.ILog.IsTraceEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsDebugEnabled" id="P:Common.Logging.Factory.AbstractLogger.IsDebugEnabled" access="Public" contract="Abstract" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary>
<remarks> Override this in your derived class to comply with the underlying logging system </remarks></documentation>
            <implements name="IsDebugEnabled" id="P:Common.Logging.ILog.IsDebugEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsInfoEnabled" id="P:Common.Logging.Factory.AbstractLogger.IsInfoEnabled" access="Public" contract="Abstract" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary>
<remarks> Override this in your derived class to comply with the underlying logging system </remarks></documentation>
            <implements name="IsInfoEnabled" id="P:Common.Logging.ILog.IsInfoEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsWarnEnabled" id="P:Common.Logging.Factory.AbstractLogger.IsWarnEnabled" access="Public" contract="Abstract" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary>
<remarks> Override this in your derived class to comply with the underlying logging system </remarks></documentation>
            <implements name="IsWarnEnabled" id="P:Common.Logging.ILog.IsWarnEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsErrorEnabled" id="P:Common.Logging.Factory.AbstractLogger.IsErrorEnabled" access="Public" contract="Abstract" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary>
<remarks> Override this in your derived class to comply with the underlying logging system </remarks></documentation>
            <implements name="IsErrorEnabled" id="P:Common.Logging.ILog.IsErrorEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsFatalEnabled" id="P:Common.Logging.Factory.AbstractLogger.IsFatalEnabled" access="Public" contract="Abstract" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary>
<remarks> Override this in your derived class to comply with the underlying logging system </remarks></documentation>
            <implements name="IsFatalEnabled" id="P:Common.Logging.ILog.IsFatalEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <method name="GetWriteHandler" displayName="GetWriteHandler" id="M:Common.Logging.Factory.AbstractLogger.GetWriteHandler" access="Family" contract="Virtual" valueType="false">
            <returnType typeId="T:Common.Logging.Factory.AbstractLogger.WriteHandler" displayName="AbstractLogger.WriteHandler" namespace="Common.Logging.Factory" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Override this method to use a different method than <see cref="M:Common.Logging.Factory.AbstractLogger.WriteInternal(Common.Logging.LogLevel,System.Object,System.Exception)" /> for writing log events to the underlying log system. </summary>
<remarks> Usually you don't need to override thise method. The default implementation returns <c>null</c> to indicate that the default handler <see cref="M:Common.Logging.Factory.AbstractLogger.WriteInternal(Common.Logging.LogLevel,System.Object,System.Exception)" /> should be used. </remarks></documentation>
          </method>
          <method name="WriteInternal" displayName="WriteInternal" id="M:Common.Logging.Factory.AbstractLogger.WriteInternal(Common.Logging.LogLevel,System.Object,System.Exception)" access="Family" contract="Abstract" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Actually sends the message to the underlying log system. </summary>
<param name="level">the level of this log event.</param>
<param name="message">the message to log</param>
<param name="exception">the exception to log (may be null)</param></documentation>
            <parameter name="level" typeId="T:Common.Logging.LogLevel" displayName="LogLevel" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="true" />
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.Factory.AbstractLogger.Trace(System.Object)" access="Public" contract="Virtual" valueType="true" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary>
<param name="message">The message object to log.</param></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.Factory.AbstractLogger.Trace(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Trace" /> level including the stack trace of the <see cref="T:System.Exception" /> passed as a parameter. </summary>
<param name="message">The message object to log.</param>
<param name="exception">The exception to log, including its stack trace.</param></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="TraceFormat" displayName="TraceFormat" id="M:Common.Logging.Factory.AbstractLogger.TraceFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="args"></param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="TraceFormat" id="M:Common.Logging.ILog.TraceFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="TraceFormat" displayName="TraceFormat" id="M:Common.Logging.Factory.AbstractLogger.TraceFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="exception">The exception to log.</param>
<param name="args"></param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="TraceFormat" id="M:Common.Logging.ILog.TraceFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="TraceFormat" displayName="TraceFormat" id="M:Common.Logging.Factory.AbstractLogger.TraceFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="args">the list of format arguments</param></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="TraceFormat" id="M:Common.Logging.ILog.TraceFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="TraceFormat" displayName="TraceFormat" id="M:Common.Logging.Factory.AbstractLogger.TraceFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="exception">The exception to log.</param>
<param name="args">the list of format arguments</param></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="TraceFormat" id="M:Common.Logging.ILog.TraceFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.Factory.AbstractLogger.Trace(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level using a callback to obtain the message </summary>
<remarks> Using this method avoids the cost of creating a message and evaluating message arguments that probably won't be logged due to loglevel settings. </remarks>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.Factory.AbstractLogger.Trace(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level using a callback to obtain the message </summary>
<remarks> Using this method avoids the cost of creating a message and evaluating message arguments that probably won't be logged due to loglevel settings. </remarks>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
<param name="exception">The exception to log, including its stack trace.</param></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.Factory.AbstractLogger.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level using a callback to obtain the message </summary>
<remarks> Using this method avoids the cost of creating a message and evaluating message arguments that probably won't be logged due to loglevel settings. </remarks>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.Factory.AbstractLogger.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level using a callback to obtain the message </summary>
<remarks> Using this method avoids the cost of creating a message and evaluating message arguments that probably won't be logged due to loglevel settings. </remarks>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
<param name="exception">The exception to log, including its stack trace.</param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.Factory.AbstractLogger.Debug(System.Object)" access="Public" contract="Virtual" valueType="true" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary>
<param name="message">The message object to log.</param></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.Factory.AbstractLogger.Debug(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Debug" /> level including the stack Debug of the <see cref="T:System.Exception" /> passed as a parameter. </summary>
<param name="message">The message object to log.</param>
<param name="exception">The exception to log, including its stack Debug.</param></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="DebugFormat" displayName="DebugFormat" id="M:Common.Logging.Factory.AbstractLogger.DebugFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="args"></param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="DebugFormat" id="M:Common.Logging.ILog.DebugFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="DebugFormat" displayName="DebugFormat" id="M:Common.Logging.Factory.AbstractLogger.DebugFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="exception">The exception to log.</param>
<param name="args"></param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="DebugFormat" id="M:Common.Logging.ILog.DebugFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="DebugFormat" displayName="DebugFormat" id="M:Common.Logging.Factory.AbstractLogger.DebugFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="args">the list of format arguments</param></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="DebugFormat" id="M:Common.Logging.ILog.DebugFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="DebugFormat" displayName="DebugFormat" id="M:Common.Logging.Factory.AbstractLogger.DebugFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="exception">The exception to log.</param>
<param name="args">the list of format arguments</param></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="DebugFormat" id="M:Common.Logging.ILog.DebugFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.Factory.AbstractLogger.Debug(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level using a callback to obtain the message </summary>
<remarks> Using this method avoids the cost of creating a message and evaluating message arguments that probably won't be logged due to loglevel settings. </remarks>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.Factory.AbstractLogger.Debug(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level using a callback to obtain the message </summary>
<remarks> Using this method avoids the cost of creating a message and evaluating message arguments that probably won't be logged due to loglevel settings. </remarks>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
<param name="exception">The exception to log, including its stack Debug.</param></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.Factory.AbstractLogger.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level using a callback to obtain the message </summary>
<remarks> Using this method avoids the cost of creating a message and evaluating message arguments that probably won't be logged due to loglevel settings. </remarks>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.Factory.AbstractLogger.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level using a callback to obtain the message </summary>
<remarks> Using this method avoids the cost of creating a message and evaluating message arguments that probably won't be logged due to loglevel settings. </remarks>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
<param name="exception">The exception to log, including its stack Debug.</param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.Factory.AbstractLogger.Info(System.Object)" access="Public" contract="Virtual" valueType="true" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary>
<param name="message">The message object to log.</param></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.Factory.AbstractLogger.Info(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Info" /> level including the stack Info of the <see cref="T:System.Exception" /> passed as a parameter. </summary>
<param name="message">The message object to log.</param>
<param name="exception">The exception to log, including its stack Info.</param></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="InfoFormat" displayName="InfoFormat" id="M:Common.Logging.Factory.AbstractLogger.InfoFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="args"></param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="InfoFormat" id="M:Common.Logging.ILog.InfoFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="InfoFormat" displayName="InfoFormat" id="M:Common.Logging.Factory.AbstractLogger.InfoFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="exception">The exception to log.</param>
<param name="args"></param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="InfoFormat" id="M:Common.Logging.ILog.InfoFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="InfoFormat" displayName="InfoFormat" id="M:Common.Logging.Factory.AbstractLogger.InfoFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="args">the list of format arguments</param></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="InfoFormat" id="M:Common.Logging.ILog.InfoFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="InfoFormat" displayName="InfoFormat" id="M:Common.Logging.Factory.AbstractLogger.InfoFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="exception">The exception to log.</param>
<param name="args">the list of format arguments</param></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="InfoFormat" id="M:Common.Logging.ILog.InfoFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.Factory.AbstractLogger.Info(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level using a callback to obtain the message </summary>
<remarks> Using this method avoids the cost of creating a message and evaluating message arguments that probably won't be logged due to loglevel settings. </remarks>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.Factory.AbstractLogger.Info(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level using a callback to obtain the message </summary>
<remarks> Using this method avoids the cost of creating a message and evaluating message arguments that probably won't be logged due to loglevel settings. </remarks>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
<param name="exception">The exception to log, including its stack Info.</param></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.Factory.AbstractLogger.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level using a callback to obtain the message </summary>
<remarks> Using this method avoids the cost of creating a message and evaluating message arguments that probably won't be logged due to loglevel settings. </remarks>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.Factory.AbstractLogger.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level using a callback to obtain the message </summary>
<remarks> Using this method avoids the cost of creating a message and evaluating message arguments that probably won't be logged due to loglevel settings. </remarks>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
<param name="exception">The exception to log, including its stack Info.</param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.Factory.AbstractLogger.Warn(System.Object)" access="Public" contract="Virtual" valueType="true" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary>
<param name="message">The message object to log.</param></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.Factory.AbstractLogger.Warn(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Warn" /> level including the stack Warn of the <see cref="T:System.Exception" /> passed as a parameter. </summary>
<param name="message">The message object to log.</param>
<param name="exception">The exception to log, including its stack Warn.</param></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="WarnFormat" displayName="WarnFormat" id="M:Common.Logging.Factory.AbstractLogger.WarnFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting Warnrmation.</param>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="args"></param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="WarnFormat" id="M:Common.Logging.ILog.WarnFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="WarnFormat" displayName="WarnFormat" id="M:Common.Logging.Factory.AbstractLogger.WarnFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting Warnrmation.</param>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="exception">The exception to log.</param>
<param name="args"></param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="WarnFormat" id="M:Common.Logging.ILog.WarnFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="WarnFormat" displayName="WarnFormat" id="M:Common.Logging.Factory.AbstractLogger.WarnFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="args">the list of format arguments</param></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="WarnFormat" id="M:Common.Logging.ILog.WarnFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="WarnFormat" displayName="WarnFormat" id="M:Common.Logging.Factory.AbstractLogger.WarnFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="exception">The exception to log.</param>
<param name="args">the list of format arguments</param></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="WarnFormat" id="M:Common.Logging.ILog.WarnFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.Factory.AbstractLogger.Warn(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level using a callback to obtain the message </summary>
<remarks> Using this method avoids the cost of creating a message and evaluating message arguments that probably won't be logged due to loglevel settings. </remarks>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.Factory.AbstractLogger.Warn(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level using a callback to obtain the message </summary>
<remarks> Using this method avoids the cost of creating a message and evaluating message arguments that probably won't be logged due to loglevel settings. </remarks>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
<param name="exception">The exception to log, including its stack Warn.</param></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.Factory.AbstractLogger.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level using a callback to obtain the message </summary>
<remarks> Using this method avoids the cost of creating a message and evaluating message arguments that probably won't be logged due to loglevel settings. </remarks>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.Factory.AbstractLogger.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level using a callback to obtain the message </summary>
<remarks> Using this method avoids the cost of creating a message and evaluating message arguments that probably won't be logged due to loglevel settings. </remarks>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
<param name="exception">The exception to log, including its stack Warn.</param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.Factory.AbstractLogger.Error(System.Object)" access="Public" contract="Virtual" valueType="true" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary>
<param name="message">The message object to log.</param></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.Factory.AbstractLogger.Error(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Error" /> level including the stack Error of the <see cref="T:System.Exception" /> passed as a parameter. </summary>
<param name="message">The message object to log.</param>
<param name="exception">The exception to log, including its stack Error.</param></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ErrorFormat" displayName="ErrorFormat" id="M:Common.Logging.Factory.AbstractLogger.ErrorFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting Errorrmation.</param>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="args"></param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="ErrorFormat" id="M:Common.Logging.ILog.ErrorFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ErrorFormat" displayName="ErrorFormat" id="M:Common.Logging.Factory.AbstractLogger.ErrorFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting Errorrmation.</param>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="exception">The exception to log.</param>
<param name="args"></param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="ErrorFormat" id="M:Common.Logging.ILog.ErrorFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ErrorFormat" displayName="ErrorFormat" id="M:Common.Logging.Factory.AbstractLogger.ErrorFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="args">the list of format arguments</param></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="ErrorFormat" id="M:Common.Logging.ILog.ErrorFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ErrorFormat" displayName="ErrorFormat" id="M:Common.Logging.Factory.AbstractLogger.ErrorFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="exception">The exception to log.</param>
<param name="args">the list of format arguments</param></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="ErrorFormat" id="M:Common.Logging.ILog.ErrorFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.Factory.AbstractLogger.Error(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level using a callback to obtain the message </summary>
<remarks> Using this method avoids the cost of creating a message and evaluating message arguments that probably won't be logged due to loglevel settings. </remarks>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.Factory.AbstractLogger.Error(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level using a callback to obtain the message </summary>
<remarks> Using this method avoids the cost of creating a message and evaluating message arguments that probably won't be logged due to loglevel settings. </remarks>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
<param name="exception">The exception to log, including its stack Error.</param></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.Factory.AbstractLogger.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level using a callback to obtain the message </summary>
<remarks> Using this method avoids the cost of creating a message and evaluating message arguments that probably won't be logged due to loglevel settings. </remarks>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.Factory.AbstractLogger.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level using a callback to obtain the message </summary>
<remarks> Using this method avoids the cost of creating a message and evaluating message arguments that probably won't be logged due to loglevel settings. </remarks>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
<param name="exception">The exception to log, including its stack Error.</param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.Factory.AbstractLogger.Fatal(System.Object)" access="Public" contract="Virtual" valueType="true" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary>
<param name="message">The message object to log.</param></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.Factory.AbstractLogger.Fatal(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level including the stack Fatal of the <see cref="T:System.Exception" /> passed as a parameter. </summary>
<param name="message">The message object to log.</param>
<param name="exception">The exception to log, including its stack Fatal.</param></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="FatalFormat" displayName="FatalFormat" id="M:Common.Logging.Factory.AbstractLogger.FatalFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting Fatalrmation.</param>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="args"></param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="FatalFormat" id="M:Common.Logging.ILog.FatalFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="FatalFormat" displayName="FatalFormat" id="M:Common.Logging.Factory.AbstractLogger.FatalFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting Fatalrmation.</param>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="exception">The exception to log.</param>
<param name="args"></param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="FatalFormat" id="M:Common.Logging.ILog.FatalFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="FatalFormat" displayName="FatalFormat" id="M:Common.Logging.Factory.AbstractLogger.FatalFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="args">the list of format arguments</param></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="FatalFormat" id="M:Common.Logging.ILog.FatalFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="FatalFormat" displayName="FatalFormat" id="M:Common.Logging.Factory.AbstractLogger.FatalFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="exception">The exception to log.</param>
<param name="args">the list of format arguments</param></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="FatalFormat" id="M:Common.Logging.ILog.FatalFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.Factory.AbstractLogger.Fatal(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level using a callback to obtain the message </summary>
<remarks> Using this method avoids the cost of creating a message and evaluating message arguments that probably won't be logged due to loglevel settings. </remarks>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.Factory.AbstractLogger.Fatal(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level using a callback to obtain the message </summary>
<remarks> Using this method avoids the cost of creating a message and evaluating message arguments that probably won't be logged due to loglevel settings. </remarks>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
<param name="exception">The exception to log, including its stack Fatal.</param></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.Factory.AbstractLogger.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level using a callback to obtain the message </summary>
<remarks> Using this method avoids the cost of creating a message and evaluating message arguments that probably won't be logged due to loglevel settings. </remarks>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.Factory.AbstractLogger.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level using a callback to obtain the message </summary>
<remarks> Using this method avoids the cost of creating a message and evaluating message arguments that probably won't be logged due to loglevel settings. </remarks>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
<param name="exception">The exception to log, including its stack Fatal.</param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Common.Logging.Factory.AbstractLogger.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Equals" displayName="Equals" id="M:Common.Logging.Factory.AbstractLogger.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Common.Logging.Factory.AbstractLogger.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="GetType" displayName="GetType" id="M:Common.Logging.Factory.AbstractLogger.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Common.Logging.Factory.AbstractLogger.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Common.Logging.Factory.AbstractLogger.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
        </class>
        <delegate name="AbstractLogger.WriteHandler" displayName="AbstractLogger.WriteHandler" namespace="Common.Logging.Factory" id="T:Common.Logging.Factory.AbstractLogger.WriteHandler" access="NestedFamily" valueType="true">
          <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          <documentation><summary> Represents a method responsible for writing a message to the log system. </summary></documentation>
          <parameter name="level" typeId="T:Common.Logging.LogLevel" displayName="LogLevel" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="true" />
          <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
        </delegate>
      </namespace>
      <namespace name="Common.Logging.Simple">
        <documentation><summary> This namespace contains out-of-the-box adapters to intrinsic systems, namely <see cref="T:Common.Logging.Simple.ConsoleOutLoggerFactoryAdapter" /> and <see cref="T:Common.Logging.Simple.TraceLoggerFactoryAdapter" />. </summary></documentation>
        <class name="AbstractSimpleLogger" displayName="AbstractSimpleLogger" namespace="Common.Logging.Simple" id="T:Common.Logging.Simple.AbstractSimpleLogger" access="Public" abstract="true">
          <documentation><summary> Abstract class providing a standard implementation of simple loggers. </summary>
<author>Erich Eichinger</author></documentation>
          <attribute name="System.SerializableAttribute" />
          <baseType name="AbstractLogger" id="T:Common.Logging.Factory.AbstractLogger" displayName="AbstractLogger" namespace="Common.Logging.Factory" assembly="Common.Logging" />
          <derivedBy id="T:Common.Logging.Simple.CapturingLogger" displayName="CapturingLogger" namespace="Common.Logging.Simple" assembly="Common.Logging" />
          <derivedBy id="T:Common.Logging.Simple.ConsoleOutLogger" displayName="ConsoleOutLogger" namespace="Common.Logging.Simple" assembly="Common.Logging" />
          <derivedBy id="T:Common.Logging.Simple.TraceLogger" displayName="TraceLogger" namespace="Common.Logging.Simple" assembly="Common.Logging" />
          <implementsClass type="Common.Logging.ILog" id="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" inherited="true" />
          <constructor name=".ctor" id="M:Common.Logging.Simple.AbstractSimpleLogger.#ctor(System.String,Common.Logging.LogLevel,System.Boolean,System.Boolean,System.Boolean,System.String)" access="Public" contract="Normal">
            <documentation><summary> Creates and initializes a the simple logger. </summary>
<param name="logName">The name, usually type name of the calling class, of the logger.</param>
<param name="logLevel">The current logging threshold. Messages recieved that are beneath this threshold will not be logged.</param>
<param name="showlevel">Include level in the log message.</param>
<param name="showDateTime">Include the current time in the log message.</param>
<param name="showLogName">Include the instance name in the log message.</param>
<param name="dateTimeFormat">The date and time format to use in the log message.</param></documentation>
            <parameter name="logName" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="logLevel" typeId="T:Common.Logging.LogLevel" displayName="LogLevel" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="true" />
            <parameter name="showlevel" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="showDateTime" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="showLogName" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="dateTimeFormat" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </constructor>
          <property name="Name" id="P:Common.Logging.Simple.AbstractSimpleLogger.Name" access="Public" contract="Normal" get="Public" set="false" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <documentation><summary> The name of the logger. </summary></documentation>
          </property>
          <property name="ShowLevel" id="P:Common.Logging.Simple.AbstractSimpleLogger.ShowLevel" access="Public" contract="Normal" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Include the current log level in the log message. </summary></documentation>
          </property>
          <property name="ShowDateTime" id="P:Common.Logging.Simple.AbstractSimpleLogger.ShowDateTime" access="Public" contract="Normal" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Include the current time in the log message. </summary></documentation>
          </property>
          <property name="ShowLogName" id="P:Common.Logging.Simple.AbstractSimpleLogger.ShowLogName" access="Public" contract="Normal" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Include the instance name in the log message. </summary></documentation>
          </property>
          <property name="CurrentLogLevel" id="P:Common.Logging.Simple.AbstractSimpleLogger.CurrentLogLevel" access="Public" contract="Normal" get="Public" set="Public" typeId="T:Common.Logging.LogLevel" displayName="LogLevel" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="true">
            <documentation><summary> The current logging threshold. Messages recieved that are beneath this threshold will not be logged. </summary></documentation>
          </property>
          <property name="DateTimeFormat" id="P:Common.Logging.Simple.AbstractSimpleLogger.DateTimeFormat" access="Public" contract="Normal" get="Public" set="false" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <documentation><summary> The date and time format to use in the log message. </summary></documentation>
          </property>
          <property name="HasDateTimeFormat" id="P:Common.Logging.Simple.AbstractSimpleLogger.HasDateTimeFormat" access="Public" contract="Normal" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Determines Whether <see cref="P:Common.Logging.Simple.AbstractSimpleLogger.DateTimeFormat" /> is set. </summary></documentation>
          </property>
          <property name="IsTraceEnabled" id="P:Common.Logging.Simple.AbstractSimpleLogger.IsTraceEnabled" access="Public" contract="Override" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Returns <see langword="true" /> if the current <see cref="T:Common.Logging.LogLevel" /> is greater than or equal to <see cref="F:Common.Logging.LogLevel.Trace" />. If it is, all messages will be sent to <see cref="P:System.Console.Out" />. </summary></documentation>
            <implements name="IsTraceEnabled" id="P:Common.Logging.ILog.IsTraceEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsDebugEnabled" id="P:Common.Logging.Simple.AbstractSimpleLogger.IsDebugEnabled" access="Public" contract="Override" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Returns <see langword="true" /> if the current <see cref="T:Common.Logging.LogLevel" /> is greater than or equal to <see cref="F:Common.Logging.LogLevel.Debug" />. If it is, all messages will be sent to <see cref="P:System.Console.Out" />. </summary></documentation>
            <implements name="IsDebugEnabled" id="P:Common.Logging.ILog.IsDebugEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsInfoEnabled" id="P:Common.Logging.Simple.AbstractSimpleLogger.IsInfoEnabled" access="Public" contract="Override" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Returns <see langword="true" /> if the current <see cref="T:Common.Logging.LogLevel" /> is greater than or equal to <see cref="F:Common.Logging.LogLevel.Info" />. If it is, only messages with a <see cref="T:Common.Logging.LogLevel" nolink="true" /> of <see cref="F:Common.Logging.LogLevel.Info" nolink="true" />, <see cref="F:Common.Logging.LogLevel.Warn" />, <see cref="F:Common.Logging.LogLevel.Error" />, and <see cref="F:Common.Logging.LogLevel.Fatal" /> will be sent to <see cref="P:System.Console.Out" />. </summary></documentation>
            <implements name="IsInfoEnabled" id="P:Common.Logging.ILog.IsInfoEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsWarnEnabled" id="P:Common.Logging.Simple.AbstractSimpleLogger.IsWarnEnabled" access="Public" contract="Override" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Returns <see langword="true" /> if the current <see cref="T:Common.Logging.LogLevel" /> is greater than or equal to <see cref="F:Common.Logging.LogLevel.Warn" />. If it is, only messages with a <see cref="T:Common.Logging.LogLevel" nolink="true" /> of <see cref="F:Common.Logging.LogLevel.Warn" nolink="true" />, <see cref="F:Common.Logging.LogLevel.Error" />, and <see cref="F:Common.Logging.LogLevel.Fatal" /> will be sent to <see cref="P:System.Console.Out" />. </summary></documentation>
            <implements name="IsWarnEnabled" id="P:Common.Logging.ILog.IsWarnEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsErrorEnabled" id="P:Common.Logging.Simple.AbstractSimpleLogger.IsErrorEnabled" access="Public" contract="Override" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Returns <see langword="true" /> if the current <see cref="T:Common.Logging.LogLevel" /> is greater than or equal to <see cref="F:Common.Logging.LogLevel.Error" />. If it is, only messages with a <see cref="T:Common.Logging.LogLevel" nolink="true" /> of <see cref="F:Common.Logging.LogLevel.Error" nolink="true" /> and <see cref="F:Common.Logging.LogLevel.Fatal" /> will be sent to <see cref="P:System.Console.Out" />. </summary></documentation>
            <implements name="IsErrorEnabled" id="P:Common.Logging.ILog.IsErrorEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsFatalEnabled" id="P:Common.Logging.Simple.AbstractSimpleLogger.IsFatalEnabled" access="Public" contract="Override" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Returns <see langword="true" /> if the current <see cref="T:Common.Logging.LogLevel" /> is greater than or equal to <see cref="F:Common.Logging.LogLevel.Fatal" />. If it is, only messages with a <see cref="T:Common.Logging.LogLevel" nolink="true" /> of <see cref="F:Common.Logging.LogLevel.Fatal" nolink="true" /> will be sent to <see cref="P:System.Console.Out" />. </summary></documentation>
            <implements name="IsFatalEnabled" id="P:Common.Logging.ILog.IsFatalEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <method name="FormatOutput" displayName="FormatOutput" id="M:Common.Logging.Simple.AbstractSimpleLogger.FormatOutput(System.Text.StringBuilder,Common.Logging.LogLevel,System.Object,System.Exception)" access="Family" contract="Virtual" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Appends the formatted message to the specified <see cref="T:System.Text.StringBuilder" />. </summary>
<param name="stringBuilder">the <see cref="T:System.Text.StringBuilder" /> that receíves the formatted message.</param>
<param name="level"></param>
<param name="message"></param>
<param name="e"></param></documentation>
            <parameter name="stringBuilder" typeId="T:System.Text.StringBuilder" displayName="StringBuilder" namespace="System.Text" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="level" typeId="T:Common.Logging.LogLevel" displayName="LogLevel" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="true" />
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="e" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="IsLevelEnabled" displayName="IsLevelEnabled" id="M:Common.Logging.Simple.AbstractSimpleLogger.IsLevelEnabled(Common.Logging.LogLevel)" access="Family" contract="Virtual" valueType="true">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Determines if the given log level is currently enabled. </summary>
<param name="level"></param>
<returns></returns></documentation>
            <parameter name="level" typeId="T:Common.Logging.LogLevel" displayName="LogLevel" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="true" />
          </method>
          <method name="GetWriteHandler" displayName="GetWriteHandler" id="M:Common.Logging.Simple.AbstractSimpleLogger.GetWriteHandler" access="Family" contract="Virtual" valueType="false" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.GetWriteHandler">
            <returnType typeId="T:Common.Logging.Factory.AbstractLogger.WriteHandler" displayName="AbstractLogger.WriteHandler" namespace="Common.Logging.Factory" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Override this method to use a different method than <see cref="M:Common.Logging.Factory.AbstractLogger.WriteInternal(Common.Logging.LogLevel,System.Object,System.Exception)" /> for writing log events to the underlying log system. </summary></documentation>
          </method>
          <method name="WriteInternal" displayName="WriteInternal" id="M:Common.Logging.Simple.AbstractSimpleLogger.WriteInternal(Common.Logging.LogLevel,System.Object,System.Exception)" access="Family" contract="Abstract" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.WriteInternal(Common.Logging.LogLevel,System.Object,System.Exception)">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Actually sends the message to the underlying log system. </summary></documentation>
            <parameter name="level" typeId="T:Common.Logging.LogLevel" displayName="LogLevel" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="true" />
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.Simple.AbstractSimpleLogger.Trace(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.Simple.AbstractSimpleLogger.Trace(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Trace" /> level including the stack trace of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="TraceFormat" displayName="TraceFormat" id="M:Common.Logging.Simple.AbstractSimpleLogger.TraceFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.TraceFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="TraceFormat" id="M:Common.Logging.ILog.TraceFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="TraceFormat" displayName="TraceFormat" id="M:Common.Logging.Simple.AbstractSimpleLogger.TraceFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.TraceFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="TraceFormat" id="M:Common.Logging.ILog.TraceFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="TraceFormat" displayName="TraceFormat" id="M:Common.Logging.Simple.AbstractSimpleLogger.TraceFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.TraceFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="TraceFormat" id="M:Common.Logging.ILog.TraceFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="TraceFormat" displayName="TraceFormat" id="M:Common.Logging.Simple.AbstractSimpleLogger.TraceFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.TraceFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="TraceFormat" id="M:Common.Logging.ILog.TraceFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.Simple.AbstractSimpleLogger.Trace(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.Simple.AbstractSimpleLogger.Trace(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.Simple.AbstractSimpleLogger.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.Simple.AbstractSimpleLogger.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.Simple.AbstractSimpleLogger.Debug(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.Simple.AbstractSimpleLogger.Debug(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Debug" /> level including the stack Debug of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="DebugFormat" displayName="DebugFormat" id="M:Common.Logging.Simple.AbstractSimpleLogger.DebugFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.DebugFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="DebugFormat" id="M:Common.Logging.ILog.DebugFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="DebugFormat" displayName="DebugFormat" id="M:Common.Logging.Simple.AbstractSimpleLogger.DebugFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.DebugFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="DebugFormat" id="M:Common.Logging.ILog.DebugFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="DebugFormat" displayName="DebugFormat" id="M:Common.Logging.Simple.AbstractSimpleLogger.DebugFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.DebugFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="DebugFormat" id="M:Common.Logging.ILog.DebugFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="DebugFormat" displayName="DebugFormat" id="M:Common.Logging.Simple.AbstractSimpleLogger.DebugFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.DebugFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="DebugFormat" id="M:Common.Logging.ILog.DebugFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.Simple.AbstractSimpleLogger.Debug(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.Simple.AbstractSimpleLogger.Debug(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.Simple.AbstractSimpleLogger.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.Simple.AbstractSimpleLogger.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.Simple.AbstractSimpleLogger.Info(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.Simple.AbstractSimpleLogger.Info(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Info" /> level including the stack Info of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="InfoFormat" displayName="InfoFormat" id="M:Common.Logging.Simple.AbstractSimpleLogger.InfoFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.InfoFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="InfoFormat" id="M:Common.Logging.ILog.InfoFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="InfoFormat" displayName="InfoFormat" id="M:Common.Logging.Simple.AbstractSimpleLogger.InfoFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.InfoFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="InfoFormat" id="M:Common.Logging.ILog.InfoFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="InfoFormat" displayName="InfoFormat" id="M:Common.Logging.Simple.AbstractSimpleLogger.InfoFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.InfoFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="InfoFormat" id="M:Common.Logging.ILog.InfoFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="InfoFormat" displayName="InfoFormat" id="M:Common.Logging.Simple.AbstractSimpleLogger.InfoFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.InfoFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="InfoFormat" id="M:Common.Logging.ILog.InfoFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.Simple.AbstractSimpleLogger.Info(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.Simple.AbstractSimpleLogger.Info(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.Simple.AbstractSimpleLogger.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.Simple.AbstractSimpleLogger.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.Simple.AbstractSimpleLogger.Warn(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.Simple.AbstractSimpleLogger.Warn(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Warn" /> level including the stack Warn of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="WarnFormat" displayName="WarnFormat" id="M:Common.Logging.Simple.AbstractSimpleLogger.WarnFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.WarnFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="WarnFormat" id="M:Common.Logging.ILog.WarnFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="WarnFormat" displayName="WarnFormat" id="M:Common.Logging.Simple.AbstractSimpleLogger.WarnFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.WarnFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="WarnFormat" id="M:Common.Logging.ILog.WarnFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="WarnFormat" displayName="WarnFormat" id="M:Common.Logging.Simple.AbstractSimpleLogger.WarnFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.WarnFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="WarnFormat" id="M:Common.Logging.ILog.WarnFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="WarnFormat" displayName="WarnFormat" id="M:Common.Logging.Simple.AbstractSimpleLogger.WarnFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.WarnFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="WarnFormat" id="M:Common.Logging.ILog.WarnFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.Simple.AbstractSimpleLogger.Warn(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.Simple.AbstractSimpleLogger.Warn(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.Simple.AbstractSimpleLogger.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.Simple.AbstractSimpleLogger.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.Simple.AbstractSimpleLogger.Error(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.Simple.AbstractSimpleLogger.Error(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Error" /> level including the stack Error of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ErrorFormat" displayName="ErrorFormat" id="M:Common.Logging.Simple.AbstractSimpleLogger.ErrorFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.ErrorFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="ErrorFormat" id="M:Common.Logging.ILog.ErrorFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ErrorFormat" displayName="ErrorFormat" id="M:Common.Logging.Simple.AbstractSimpleLogger.ErrorFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.ErrorFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="ErrorFormat" id="M:Common.Logging.ILog.ErrorFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ErrorFormat" displayName="ErrorFormat" id="M:Common.Logging.Simple.AbstractSimpleLogger.ErrorFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.ErrorFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="ErrorFormat" id="M:Common.Logging.ILog.ErrorFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ErrorFormat" displayName="ErrorFormat" id="M:Common.Logging.Simple.AbstractSimpleLogger.ErrorFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.ErrorFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="ErrorFormat" id="M:Common.Logging.ILog.ErrorFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.Simple.AbstractSimpleLogger.Error(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.Simple.AbstractSimpleLogger.Error(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.Simple.AbstractSimpleLogger.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.Simple.AbstractSimpleLogger.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.Simple.AbstractSimpleLogger.Fatal(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.Simple.AbstractSimpleLogger.Fatal(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level including the stack Fatal of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="FatalFormat" displayName="FatalFormat" id="M:Common.Logging.Simple.AbstractSimpleLogger.FatalFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.FatalFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="FatalFormat" id="M:Common.Logging.ILog.FatalFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="FatalFormat" displayName="FatalFormat" id="M:Common.Logging.Simple.AbstractSimpleLogger.FatalFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.FatalFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="FatalFormat" id="M:Common.Logging.ILog.FatalFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="FatalFormat" displayName="FatalFormat" id="M:Common.Logging.Simple.AbstractSimpleLogger.FatalFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.FatalFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="FatalFormat" id="M:Common.Logging.ILog.FatalFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="FatalFormat" displayName="FatalFormat" id="M:Common.Logging.Simple.AbstractSimpleLogger.FatalFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.FatalFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="FatalFormat" id="M:Common.Logging.ILog.FatalFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.Simple.AbstractSimpleLogger.Fatal(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.Simple.AbstractSimpleLogger.Fatal(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.Simple.AbstractSimpleLogger.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.Simple.AbstractSimpleLogger.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Common.Logging.Simple.AbstractSimpleLogger.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Equals" displayName="Equals" id="M:Common.Logging.Simple.AbstractSimpleLogger.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Common.Logging.Simple.AbstractSimpleLogger.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="GetType" displayName="GetType" id="M:Common.Logging.Simple.AbstractSimpleLogger.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Common.Logging.Simple.AbstractSimpleLogger.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Common.Logging.Simple.AbstractSimpleLogger.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
        </class>
        <class name="AbstractSimpleLoggerFactoryAdapter" displayName="AbstractSimpleLoggerFactoryAdapter" namespace="Common.Logging.Simple" id="T:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter" access="Public" abstract="true">
          <documentation><summary> Base factory implementation for creating simple <see cref="T:Common.Logging.ILog" /> instances. </summary>
<remarks>Default settings are LogLevel.All, showDateTime = true, showLogName = true, and no DateTimeFormat. The keys in the NameValueCollection to configure this adapter are the following <list type="bullet"><item>level</item><item>showDateTime</item><item>showLogName</item><item>dateTimeFormat</item></list></remarks>
<seealso cref="P:Common.Logging.LogManager.Adapter" />
<seealso cref="T:Common.Logging.ConfigurationSectionHandler" />
<author>Gilles Bayon</author>
<author>Mark Pollack</author>
<author>Erich Eichinger</author></documentation>
          <baseType name="AbstractCachingLoggerFactoryAdapter" id="T:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter" displayName="AbstractCachingLoggerFactoryAdapter" namespace="Common.Logging.Factory" assembly="Common.Logging" />
          <derivedBy id="T:Common.Logging.Simple.ConsoleOutLoggerFactoryAdapter" displayName="ConsoleOutLoggerFactoryAdapter" namespace="Common.Logging.Simple" assembly="Common.Logging" />
          <derivedBy id="T:Common.Logging.Simple.TraceLoggerFactoryAdapter" displayName="TraceLoggerFactoryAdapter" namespace="Common.Logging.Simple" assembly="Common.Logging" />
          <implementsClass type="Common.Logging.ILoggerFactoryAdapter" id="T:Common.Logging.ILoggerFactoryAdapter" displayName="ILoggerFactoryAdapter" namespace="Common.Logging" inherited="true" />
          <constructor name=".ctor" id="M:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter.#ctor(System.Collections.Specialized.NameValueCollection)" access="Family" contract="Normal">
            <documentation><summary> Initializes a new instance of the <see cref="T:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter" /> class. </summary>
<remarks> Looks for level, showDateTime, showLogName, dateTimeFormat items from <paramref name="properties" /> for use when the GetLogger methods are called. <see cref="T:Common.Logging.ConfigurationSectionHandler" /> for more information on how to use the standard .NET application configuraiton file (App.config/Web.config) to configure this adapter. </remarks>
<param name="properties">The name value collection, typically specified by the user in a configuration section named common/logging.</param></documentation>
            <parameter name="properties" typeId="T:System.Collections.Specialized.NameValueCollection" displayName="NameValueCollection" namespace="System.Collections.Specialized" assembly="System" nullable="false" valueType="false" />
          </constructor>
          <property name="Level" id="P:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter.Level" access="Public" contract="Normal" get="Public" set="Public" typeId="T:Common.Logging.LogLevel" displayName="LogLevel" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="true">
            <documentation><summary> The default <see cref="T:Common.Logging.LogLevel" /> to use when creating new <see cref="T:Common.Logging.ILog" /> instances. </summary></documentation>
          </property>
          <property name="ShowLevel" id="P:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter.ShowLevel" access="Public" contract="Normal" get="Public" set="Public" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> The default setting to use when creating new <see cref="T:Common.Logging.ILog" /> instances. </summary></documentation>
          </property>
          <property name="ShowDateTime" id="P:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter.ShowDateTime" access="Public" contract="Normal" get="Public" set="Public" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> The default setting to use when creating new <see cref="T:Common.Logging.ILog" /> instances. </summary></documentation>
          </property>
          <property name="ShowLogName" id="P:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter.ShowLogName" access="Public" contract="Normal" get="Public" set="Public" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> The default setting to use when creating new <see cref="T:Common.Logging.ILog" /> instances. </summary></documentation>
          </property>
          <property name="DateTimeFormat" id="P:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter.DateTimeFormat" access="Public" contract="Normal" get="Public" set="Public" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <documentation><summary> The default setting to use when creating new <see cref="T:Common.Logging.ILog" /> instances. </summary></documentation>
          </property>
          <method name="CreateLogger" displayName="CreateLogger" id="M:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter.CreateLogger(System.String)" access="Family" contract="Override" valueType="false" overload="1">
            <returnType typeId="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Create the specified logger instance </summary></documentation>
            <parameter name="name" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="CreateLogger" displayName="CreateLogger" id="M:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter.CreateLogger(System.String,Common.Logging.LogLevel,System.Boolean,System.Boolean,System.Boolean,System.String)" access="Family" contract="Abstract" valueType="false" overload="2">
            <returnType typeId="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Derived factories need to implement this method to create the actual logger instance. </summary>
<returns>a new logger instance. Must never be <c>null</c>!</returns></documentation>
            <parameter name="name" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="level" typeId="T:Common.Logging.LogLevel" displayName="LogLevel" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="true" />
            <parameter name="showLevel" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="showDateTime" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="showLogName" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="dateTimeFormat" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="ClearLoggerCache" displayName="ClearLoggerCache" id="M:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter.ClearLoggerCache" access="Family" contract="Normal" valueType="true" declaringType="Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.ClearLoggerCache">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Purges all loggers from cache </summary></documentation>
          </method>
          <method name="GetLogger" displayName="GetLogger" id="M:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter.GetLogger(System.Type)" access="Public" contract="Final" valueType="false" declaringType="Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.GetLogger(System.Type)" overload="1">
            <returnType typeId="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Get a ILog instance by <see cref="T:System.Type" />. </summary></documentation>
            <parameter name="type" typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="GetLogger" id="M:Common.Logging.ILoggerFactoryAdapter.GetLogger(System.Type)" interface="ILoggerFactoryAdapter" interfaceId="T:Common.Logging.ILoggerFactoryAdapter" assembly="Common.Logging" declaringType="Common.Logging.ILoggerFactoryAdapter" />
          </method>
          <method name="GetLogger" displayName="GetLogger" id="M:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter.GetLogger(System.String)" access="Public" contract="Final" valueType="false" declaringType="Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.GetLogger(System.String)" overload="2">
            <returnType typeId="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Get a ILog instance by name. </summary></documentation>
            <parameter name="name" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="GetLogger" id="M:Common.Logging.ILoggerFactoryAdapter.GetLogger(System.String)" interface="ILoggerFactoryAdapter" interfaceId="T:Common.Logging.ILoggerFactoryAdapter" assembly="Common.Logging" declaringType="Common.Logging.ILoggerFactoryAdapter" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Equals" displayName="Equals" id="M:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="GetType" displayName="GetType" id="M:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
        </class>
        <class name="CapturingLogger" displayName="CapturingLogger" namespace="Common.Logging.Simple" id="T:Common.Logging.Simple.CapturingLogger" access="Public">
          <documentation><summary> A logger created by <see cref="T:Common.Logging.Simple.CapturingLoggerFactoryAdapter" /> that sends all log events to the owning adapter's <see cref="M:Common.Logging.Simple.CapturingLoggerFactoryAdapter.AddEvent(Common.Logging.Simple.CapturingLoggerEvent)" /></summary>
<author>Erich Eichinger</author></documentation>
          <baseType name="AbstractSimpleLogger" id="T:Common.Logging.Simple.AbstractSimpleLogger" displayName="AbstractSimpleLogger" namespace="Common.Logging.Simple" assembly="Common.Logging">
            <baseType name="AbstractLogger" id="T:Common.Logging.Factory.AbstractLogger" displayName="AbstractLogger" namespace="Common.Logging.Factory" assembly="Common.Logging" />
          </baseType>
          <implementsClass type="Common.Logging.ILog" id="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" inherited="true" />
          <constructor name=".ctor" id="M:Common.Logging.Simple.CapturingLogger.#ctor(Common.Logging.Simple.CapturingLoggerFactoryAdapter,System.String)" access="Public" contract="Normal">
            <documentation><summary> Create a new logger instance. </summary></documentation>
            <parameter name="owner" typeId="T:Common.Logging.Simple.CapturingLoggerFactoryAdapter" displayName="CapturingLoggerFactoryAdapter" namespace="Common.Logging.Simple" assembly="Common.Logging" nullable="false" valueType="false" />
            <parameter name="logName" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </constructor>
          <field name="Owner" id="F:Common.Logging.Simple.CapturingLogger.Owner" access="Public" contract="Normal" initOnly="true" typeId="T:Common.Logging.Simple.CapturingLoggerFactoryAdapter" displayName="CapturingLoggerFactoryAdapter" namespace="Common.Logging.Simple" assembly="Common.Logging" nullable="false" valueType="false">
            <documentation><summary> The adapter that created this logger instance. </summary></documentation>
          </field>
          <field name="LastEvent" id="F:Common.Logging.Simple.CapturingLogger.LastEvent" access="Public" contract="Normal" typeId="T:Common.Logging.Simple.CapturingLoggerEvent" displayName="CapturingLoggerEvent" namespace="Common.Logging.Simple" assembly="Common.Logging" nullable="false" valueType="false">
            <documentation><summary> Allows to retrieve the last logged event instance captured by this logger </summary></documentation>
          </field>
          <property name="Name" id="P:Common.Logging.Simple.CapturingLogger.Name" access="Public" contract="Normal" declaringType="Common.Logging.Simple.AbstractSimpleLogger" declaringAssembly="Common.Logging" declaringId="P:Common.Logging.Simple.AbstractSimpleLogger.Name" get="Public" set="false" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <documentation><summary> The name of the logger. </summary></documentation>
          </property>
          <property name="ShowLevel" id="P:Common.Logging.Simple.CapturingLogger.ShowLevel" access="Public" contract="Normal" declaringType="Common.Logging.Simple.AbstractSimpleLogger" declaringAssembly="Common.Logging" declaringId="P:Common.Logging.Simple.AbstractSimpleLogger.ShowLevel" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Include the current log level in the log message. </summary></documentation>
          </property>
          <property name="ShowDateTime" id="P:Common.Logging.Simple.CapturingLogger.ShowDateTime" access="Public" contract="Normal" declaringType="Common.Logging.Simple.AbstractSimpleLogger" declaringAssembly="Common.Logging" declaringId="P:Common.Logging.Simple.AbstractSimpleLogger.ShowDateTime" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Include the current time in the log message. </summary></documentation>
          </property>
          <property name="ShowLogName" id="P:Common.Logging.Simple.CapturingLogger.ShowLogName" access="Public" contract="Normal" declaringType="Common.Logging.Simple.AbstractSimpleLogger" declaringAssembly="Common.Logging" declaringId="P:Common.Logging.Simple.AbstractSimpleLogger.ShowLogName" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Include the instance name in the log message. </summary></documentation>
          </property>
          <property name="CurrentLogLevel" id="P:Common.Logging.Simple.CapturingLogger.CurrentLogLevel" access="Public" contract="Normal" declaringType="Common.Logging.Simple.AbstractSimpleLogger" declaringAssembly="Common.Logging" declaringId="P:Common.Logging.Simple.AbstractSimpleLogger.CurrentLogLevel" get="Public" set="Public" typeId="T:Common.Logging.LogLevel" displayName="LogLevel" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="true">
            <documentation><summary> The current logging threshold. Messages recieved that are beneath this threshold will not be logged. </summary></documentation>
          </property>
          <property name="DateTimeFormat" id="P:Common.Logging.Simple.CapturingLogger.DateTimeFormat" access="Public" contract="Normal" declaringType="Common.Logging.Simple.AbstractSimpleLogger" declaringAssembly="Common.Logging" declaringId="P:Common.Logging.Simple.AbstractSimpleLogger.DateTimeFormat" get="Public" set="false" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <documentation><summary> The date and time format to use in the log message. </summary></documentation>
          </property>
          <property name="HasDateTimeFormat" id="P:Common.Logging.Simple.CapturingLogger.HasDateTimeFormat" access="Public" contract="Normal" declaringType="Common.Logging.Simple.AbstractSimpleLogger" declaringAssembly="Common.Logging" declaringId="P:Common.Logging.Simple.AbstractSimpleLogger.HasDateTimeFormat" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Determines Whether <see cref="P:Common.Logging.Simple.AbstractSimpleLogger.DateTimeFormat" /> is set. </summary></documentation>
          </property>
          <property name="IsTraceEnabled" id="P:Common.Logging.Simple.CapturingLogger.IsTraceEnabled" access="Public" contract="Override" declaringType="Common.Logging.Simple.AbstractSimpleLogger" declaringAssembly="Common.Logging" declaringId="P:Common.Logging.Simple.AbstractSimpleLogger.IsTraceEnabled" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Returns <see langword="true" /> if the current <see cref="T:Common.Logging.LogLevel" /> is greater than or equal to <see cref="F:Common.Logging.LogLevel.Trace" />. If it is, all messages will be sent to <see cref="P:System.Console.Out" />. </summary></documentation>
            <implements name="IsTraceEnabled" id="P:Common.Logging.ILog.IsTraceEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsDebugEnabled" id="P:Common.Logging.Simple.CapturingLogger.IsDebugEnabled" access="Public" contract="Override" declaringType="Common.Logging.Simple.AbstractSimpleLogger" declaringAssembly="Common.Logging" declaringId="P:Common.Logging.Simple.AbstractSimpleLogger.IsDebugEnabled" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Returns <see langword="true" /> if the current <see cref="T:Common.Logging.LogLevel" /> is greater than or equal to <see cref="F:Common.Logging.LogLevel.Debug" />. If it is, all messages will be sent to <see cref="P:System.Console.Out" />. </summary></documentation>
            <implements name="IsDebugEnabled" id="P:Common.Logging.ILog.IsDebugEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsInfoEnabled" id="P:Common.Logging.Simple.CapturingLogger.IsInfoEnabled" access="Public" contract="Override" declaringType="Common.Logging.Simple.AbstractSimpleLogger" declaringAssembly="Common.Logging" declaringId="P:Common.Logging.Simple.AbstractSimpleLogger.IsInfoEnabled" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Returns <see langword="true" /> if the current <see cref="T:Common.Logging.LogLevel" /> is greater than or equal to <see cref="F:Common.Logging.LogLevel.Info" />. If it is, only messages with a <see cref="T:Common.Logging.LogLevel" /> of <see cref="F:Common.Logging.LogLevel.Info" />, <see cref="F:Common.Logging.LogLevel.Warn" />, <see cref="F:Common.Logging.LogLevel.Error" />, and <see cref="F:Common.Logging.LogLevel.Fatal" /> will be sent to <see cref="P:System.Console.Out" />. </summary></documentation>
            <implements name="IsInfoEnabled" id="P:Common.Logging.ILog.IsInfoEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsWarnEnabled" id="P:Common.Logging.Simple.CapturingLogger.IsWarnEnabled" access="Public" contract="Override" declaringType="Common.Logging.Simple.AbstractSimpleLogger" declaringAssembly="Common.Logging" declaringId="P:Common.Logging.Simple.AbstractSimpleLogger.IsWarnEnabled" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Returns <see langword="true" /> if the current <see cref="T:Common.Logging.LogLevel" /> is greater than or equal to <see cref="F:Common.Logging.LogLevel.Warn" />. If it is, only messages with a <see cref="T:Common.Logging.LogLevel" /> of <see cref="F:Common.Logging.LogLevel.Warn" />, <see cref="F:Common.Logging.LogLevel.Error" />, and <see cref="F:Common.Logging.LogLevel.Fatal" /> will be sent to <see cref="P:System.Console.Out" />. </summary></documentation>
            <implements name="IsWarnEnabled" id="P:Common.Logging.ILog.IsWarnEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsErrorEnabled" id="P:Common.Logging.Simple.CapturingLogger.IsErrorEnabled" access="Public" contract="Override" declaringType="Common.Logging.Simple.AbstractSimpleLogger" declaringAssembly="Common.Logging" declaringId="P:Common.Logging.Simple.AbstractSimpleLogger.IsErrorEnabled" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Returns <see langword="true" /> if the current <see cref="T:Common.Logging.LogLevel" /> is greater than or equal to <see cref="F:Common.Logging.LogLevel.Error" />. If it is, only messages with a <see cref="T:Common.Logging.LogLevel" /> of <see cref="F:Common.Logging.LogLevel.Error" /> and <see cref="F:Common.Logging.LogLevel.Fatal" /> will be sent to <see cref="P:System.Console.Out" />. </summary></documentation>
            <implements name="IsErrorEnabled" id="P:Common.Logging.ILog.IsErrorEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsFatalEnabled" id="P:Common.Logging.Simple.CapturingLogger.IsFatalEnabled" access="Public" contract="Override" declaringType="Common.Logging.Simple.AbstractSimpleLogger" declaringAssembly="Common.Logging" declaringId="P:Common.Logging.Simple.AbstractSimpleLogger.IsFatalEnabled" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Returns <see langword="true" /> if the current <see cref="T:Common.Logging.LogLevel" /> is greater than or equal to <see cref="F:Common.Logging.LogLevel.Fatal" />. If it is, only messages with a <see cref="T:Common.Logging.LogLevel" /> of <see cref="F:Common.Logging.LogLevel.Fatal" /> will be sent to <see cref="P:System.Console.Out" />. </summary></documentation>
            <implements name="IsFatalEnabled" id="P:Common.Logging.ILog.IsFatalEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <method name="WriteInternal" displayName="WriteInternal" id="M:Common.Logging.Simple.CapturingLogger.WriteInternal(Common.Logging.LogLevel,System.Object,System.Exception)" access="Family" contract="Override" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Create a new <see cref="T:Common.Logging.Simple.CapturingLoggerEvent" /> and send it to <see cref="M:Common.Logging.Simple.CapturingLoggerFactoryAdapter.AddEvent(Common.Logging.Simple.CapturingLoggerEvent)" /></summary>
<param name="level"></param>
<param name="message"></param>
<param name="exception"></param></documentation>
            <parameter name="level" typeId="T:Common.Logging.LogLevel" displayName="LogLevel" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="true" />
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="FormatOutput" displayName="FormatOutput" id="M:Common.Logging.Simple.CapturingLogger.FormatOutput(System.Text.StringBuilder,Common.Logging.LogLevel,System.Object,System.Exception)" access="Family" contract="Virtual" valueType="true" declaringType="Common.Logging.Simple.AbstractSimpleLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Simple.AbstractSimpleLogger.FormatOutput(System.Text.StringBuilder,Common.Logging.LogLevel,System.Object,System.Exception)">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Appends the formatted message to the specified <see cref="T:System.Text.StringBuilder" />. </summary></documentation>
            <parameter name="stringBuilder" typeId="T:System.Text.StringBuilder" displayName="StringBuilder" namespace="System.Text" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="level" typeId="T:Common.Logging.LogLevel" displayName="LogLevel" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="true" />
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="e" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="IsLevelEnabled" displayName="IsLevelEnabled" id="M:Common.Logging.Simple.CapturingLogger.IsLevelEnabled(Common.Logging.LogLevel)" access="Family" contract="Virtual" valueType="true" declaringType="Common.Logging.Simple.AbstractSimpleLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Simple.AbstractSimpleLogger.IsLevelEnabled(Common.Logging.LogLevel)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Determines if the given log level is currently enabled. </summary></documentation>
            <parameter name="level" typeId="T:Common.Logging.LogLevel" displayName="LogLevel" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="true" />
          </method>
          <method name="GetWriteHandler" displayName="GetWriteHandler" id="M:Common.Logging.Simple.CapturingLogger.GetWriteHandler" access="Family" contract="Virtual" valueType="false" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.GetWriteHandler">
            <returnType typeId="T:Common.Logging.Factory.AbstractLogger.WriteHandler" displayName="AbstractLogger.WriteHandler" namespace="Common.Logging.Factory" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Override this method to use a different method than <see cref="M:Common.Logging.Factory.AbstractLogger.WriteInternal(Common.Logging.LogLevel,System.Object,System.Exception)" /> for writing log events to the underlying log system. </summary></documentation>
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.Simple.CapturingLogger.Trace(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.Simple.CapturingLogger.Trace(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Trace" /> level including the stack trace of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="TraceFormat" displayName="TraceFormat" id="M:Common.Logging.Simple.CapturingLogger.TraceFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.TraceFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="TraceFormat" id="M:Common.Logging.ILog.TraceFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="TraceFormat" displayName="TraceFormat" id="M:Common.Logging.Simple.CapturingLogger.TraceFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.TraceFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="TraceFormat" id="M:Common.Logging.ILog.TraceFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="TraceFormat" displayName="TraceFormat" id="M:Common.Logging.Simple.CapturingLogger.TraceFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.TraceFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="TraceFormat" id="M:Common.Logging.ILog.TraceFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="TraceFormat" displayName="TraceFormat" id="M:Common.Logging.Simple.CapturingLogger.TraceFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.TraceFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="TraceFormat" id="M:Common.Logging.ILog.TraceFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.Simple.CapturingLogger.Trace(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.Simple.CapturingLogger.Trace(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.Simple.CapturingLogger.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.Simple.CapturingLogger.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.Simple.CapturingLogger.Debug(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.Simple.CapturingLogger.Debug(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Debug" /> level including the stack Debug of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="DebugFormat" displayName="DebugFormat" id="M:Common.Logging.Simple.CapturingLogger.DebugFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.DebugFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="DebugFormat" id="M:Common.Logging.ILog.DebugFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="DebugFormat" displayName="DebugFormat" id="M:Common.Logging.Simple.CapturingLogger.DebugFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.DebugFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="DebugFormat" id="M:Common.Logging.ILog.DebugFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="DebugFormat" displayName="DebugFormat" id="M:Common.Logging.Simple.CapturingLogger.DebugFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.DebugFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="DebugFormat" id="M:Common.Logging.ILog.DebugFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="DebugFormat" displayName="DebugFormat" id="M:Common.Logging.Simple.CapturingLogger.DebugFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.DebugFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="DebugFormat" id="M:Common.Logging.ILog.DebugFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.Simple.CapturingLogger.Debug(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.Simple.CapturingLogger.Debug(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.Simple.CapturingLogger.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.Simple.CapturingLogger.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.Simple.CapturingLogger.Info(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.Simple.CapturingLogger.Info(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Info" /> level including the stack Info of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="InfoFormat" displayName="InfoFormat" id="M:Common.Logging.Simple.CapturingLogger.InfoFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.InfoFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="InfoFormat" id="M:Common.Logging.ILog.InfoFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="InfoFormat" displayName="InfoFormat" id="M:Common.Logging.Simple.CapturingLogger.InfoFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.InfoFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="InfoFormat" id="M:Common.Logging.ILog.InfoFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="InfoFormat" displayName="InfoFormat" id="M:Common.Logging.Simple.CapturingLogger.InfoFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.InfoFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="InfoFormat" id="M:Common.Logging.ILog.InfoFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="InfoFormat" displayName="InfoFormat" id="M:Common.Logging.Simple.CapturingLogger.InfoFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.InfoFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="InfoFormat" id="M:Common.Logging.ILog.InfoFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.Simple.CapturingLogger.Info(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.Simple.CapturingLogger.Info(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.Simple.CapturingLogger.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.Simple.CapturingLogger.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.Simple.CapturingLogger.Warn(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.Simple.CapturingLogger.Warn(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Warn" /> level including the stack Warn of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="WarnFormat" displayName="WarnFormat" id="M:Common.Logging.Simple.CapturingLogger.WarnFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.WarnFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="WarnFormat" id="M:Common.Logging.ILog.WarnFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="WarnFormat" displayName="WarnFormat" id="M:Common.Logging.Simple.CapturingLogger.WarnFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.WarnFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="WarnFormat" id="M:Common.Logging.ILog.WarnFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="WarnFormat" displayName="WarnFormat" id="M:Common.Logging.Simple.CapturingLogger.WarnFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.WarnFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="WarnFormat" id="M:Common.Logging.ILog.WarnFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="WarnFormat" displayName="WarnFormat" id="M:Common.Logging.Simple.CapturingLogger.WarnFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.WarnFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="WarnFormat" id="M:Common.Logging.ILog.WarnFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.Simple.CapturingLogger.Warn(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.Simple.CapturingLogger.Warn(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.Simple.CapturingLogger.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.Simple.CapturingLogger.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.Simple.CapturingLogger.Error(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.Simple.CapturingLogger.Error(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Error" /> level including the stack Error of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ErrorFormat" displayName="ErrorFormat" id="M:Common.Logging.Simple.CapturingLogger.ErrorFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.ErrorFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="ErrorFormat" id="M:Common.Logging.ILog.ErrorFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ErrorFormat" displayName="ErrorFormat" id="M:Common.Logging.Simple.CapturingLogger.ErrorFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.ErrorFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="ErrorFormat" id="M:Common.Logging.ILog.ErrorFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ErrorFormat" displayName="ErrorFormat" id="M:Common.Logging.Simple.CapturingLogger.ErrorFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.ErrorFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="ErrorFormat" id="M:Common.Logging.ILog.ErrorFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ErrorFormat" displayName="ErrorFormat" id="M:Common.Logging.Simple.CapturingLogger.ErrorFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.ErrorFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="ErrorFormat" id="M:Common.Logging.ILog.ErrorFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.Simple.CapturingLogger.Error(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.Simple.CapturingLogger.Error(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.Simple.CapturingLogger.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.Simple.CapturingLogger.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.Simple.CapturingLogger.Fatal(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.Simple.CapturingLogger.Fatal(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level including the stack Fatal of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="FatalFormat" displayName="FatalFormat" id="M:Common.Logging.Simple.CapturingLogger.FatalFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.FatalFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="FatalFormat" id="M:Common.Logging.ILog.FatalFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="FatalFormat" displayName="FatalFormat" id="M:Common.Logging.Simple.CapturingLogger.FatalFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.FatalFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="FatalFormat" id="M:Common.Logging.ILog.FatalFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="FatalFormat" displayName="FatalFormat" id="M:Common.Logging.Simple.CapturingLogger.FatalFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.FatalFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="FatalFormat" id="M:Common.Logging.ILog.FatalFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="FatalFormat" displayName="FatalFormat" id="M:Common.Logging.Simple.CapturingLogger.FatalFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.FatalFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="FatalFormat" id="M:Common.Logging.ILog.FatalFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.Simple.CapturingLogger.Fatal(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.Simple.CapturingLogger.Fatal(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.Simple.CapturingLogger.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.Simple.CapturingLogger.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Common.Logging.Simple.CapturingLogger.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Equals" displayName="Equals" id="M:Common.Logging.Simple.CapturingLogger.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Common.Logging.Simple.CapturingLogger.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="GetType" displayName="GetType" id="M:Common.Logging.Simple.CapturingLogger.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Common.Logging.Simple.CapturingLogger.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Common.Logging.Simple.CapturingLogger.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
        </class>
        <class name="CapturingLoggerEvent" displayName="CapturingLoggerEvent" namespace="Common.Logging.Simple" id="T:Common.Logging.Simple.CapturingLoggerEvent" access="Public">
          <documentation><summary> A logging event captured by <see cref="T:Common.Logging.Simple.CapturingLogger" /></summary>
<author>Erich Eichinger</author></documentation>
          <constructor name=".ctor" id="M:Common.Logging.Simple.CapturingLoggerEvent.#ctor(Common.Logging.Simple.CapturingLogger,Common.Logging.LogLevel,System.Object,System.Exception)" access="Public" contract="Normal">
            <documentation><summary> Create a new event instance </summary></documentation>
            <parameter name="source" typeId="T:Common.Logging.Simple.CapturingLogger" displayName="CapturingLogger" namespace="Common.Logging.Simple" assembly="Common.Logging" nullable="false" valueType="false" />
            <parameter name="level" typeId="T:Common.Logging.LogLevel" displayName="LogLevel" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="true" />
            <parameter name="messageObject" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </constructor>
          <field name="Source" id="F:Common.Logging.Simple.CapturingLoggerEvent.Source" access="Public" contract="Normal" initOnly="true" typeId="T:Common.Logging.Simple.CapturingLogger" displayName="CapturingLogger" namespace="Common.Logging.Simple" assembly="Common.Logging" nullable="false" valueType="false">
            <documentation><summary> The logger that logged this event </summary></documentation>
          </field>
          <field name="Level" id="F:Common.Logging.Simple.CapturingLoggerEvent.Level" access="Public" contract="Normal" initOnly="true" typeId="T:Common.Logging.LogLevel" displayName="LogLevel" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="true">
            <documentation><summary> The level used to log this event </summary></documentation>
          </field>
          <field name="MessageObject" id="F:Common.Logging.Simple.CapturingLoggerEvent.MessageObject" access="Public" contract="Normal" initOnly="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <documentation><summary> The raw message object </summary></documentation>
          </field>
          <field name="Exception" id="F:Common.Logging.Simple.CapturingLoggerEvent.Exception" access="Public" contract="Normal" initOnly="true" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <documentation><summary> A logged exception </summary></documentation>
          </field>
          <property name="RenderedMessage" id="P:Common.Logging.Simple.CapturingLoggerEvent.RenderedMessage" access="Public" contract="Normal" get="Public" set="false" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <documentation><summary> Retrieves the formatted message text </summary></documentation>
          </property>
          <method name="ToString" displayName="ToString" id="M:Common.Logging.Simple.CapturingLoggerEvent.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Equals" displayName="Equals" id="M:Common.Logging.Simple.CapturingLoggerEvent.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Common.Logging.Simple.CapturingLoggerEvent.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="GetType" displayName="GetType" id="M:Common.Logging.Simple.CapturingLoggerEvent.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Common.Logging.Simple.CapturingLoggerEvent.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Common.Logging.Simple.CapturingLoggerEvent.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
        </class>
        <class name="CapturingLoggerFactoryAdapter" displayName="CapturingLoggerFactoryAdapter" namespace="Common.Logging.Simple" id="T:Common.Logging.Simple.CapturingLoggerFactoryAdapter" access="Public">
          <documentation><summary> An adapter, who's loggers capture all log events and send them to <see cref="M:Common.Logging.Simple.CapturingLoggerFactoryAdapter.AddEvent(Common.Logging.Simple.CapturingLoggerEvent)" />. Retrieve the list of log events from <see cref="F:Common.Logging.Simple.CapturingLoggerFactoryAdapter.LoggerEvents" />. </summary>
<remarks> This logger factory is mainly for debugging and test purposes. <example> This is an example how you might use this adapter for testing: <code>// configure for capturing
CapturingLoggerFactoryAdapter adapter = new CapturingLoggerFactoryAdapter();
LogManager.Adapter = adapter;

// reset capture state
adapter.Clear();
// log something
ILog log = LogManager.GetCurrentClassLogger();
log.DebugFormat("Current Time:{0}", DateTime.Now);

// check logged data
Assert.AreEqual(1, adapter.LoggerEvents.Count);
Assert.AreEqual(LogLevel.Debug, adapter.LastEvent.Level);
</code></example></remarks>
<author>Erich Eichinger</author></documentation>
          <implementsClass type="Common.Logging.ILoggerFactoryAdapter" id="T:Common.Logging.ILoggerFactoryAdapter" displayName="ILoggerFactoryAdapter" namespace="Common.Logging" />
          <constructor name=".ctor" id="M:Common.Logging.Simple.CapturingLoggerFactoryAdapter.#ctor" access="Public" contract="Normal">
            <documentation>
              <summary>Initializes a new instance of the <see cref="T:Common.Logging.Simple.CapturingLoggerFactoryAdapter" /> class.</summary>
            </documentation>
          </constructor>
          <field name="LoggerEvents" id="F:Common.Logging.Simple.CapturingLoggerFactoryAdapter.LoggerEvents" access="Public" contract="Normal" initOnly="true" typeId="T:System.Collections.Generic.IList`1" displayName="IList(CapturingLoggerEvent)" namespace="System.Collections.Generic" assembly="mscorlib" nullable="false" valueType="false">
            <genericargument name="CapturingLoggerEvent" displayName="CapturingLoggerEvent" namespace="Common.Logging.Simple" typeId="T:Common.Logging.Simple.CapturingLoggerEvent" assembly="Common.Logging" />
            <documentation><summary> Holds the list of logged events. </summary>
<remarks> To access this collection in a multithreaded application, put a lock on the list instance. </remarks></documentation>
          </field>
          <property name="LastEvent" id="P:Common.Logging.Simple.CapturingLoggerFactoryAdapter.LastEvent" access="Public" contract="Normal" get="Public" set="false" typeId="T:Common.Logging.Simple.CapturingLoggerEvent" displayName="CapturingLoggerEvent" namespace="Common.Logging.Simple" assembly="Common.Logging" nullable="false" valueType="false">
            <documentation><summary> Holds the last log event received from any of this adapter's loggers. </summary></documentation>
          </property>
          <method name="Clear" displayName="Clear" id="M:Common.Logging.Simple.CapturingLoggerFactoryAdapter.Clear" access="Public" contract="Normal" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Clears all captured events </summary></documentation>
          </method>
          <method name="ClearLastEvent" displayName="ClearLastEvent" id="M:Common.Logging.Simple.CapturingLoggerFactoryAdapter.ClearLastEvent" access="Public" contract="Normal" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Resets the <see cref="P:Common.Logging.Simple.CapturingLoggerFactoryAdapter.LastEvent" /> to <c>null</c>. </summary></documentation>
          </method>
          <method name="AddEvent" displayName="AddEvent" id="M:Common.Logging.Simple.CapturingLoggerFactoryAdapter.AddEvent(Common.Logging.Simple.CapturingLoggerEvent)" access="Public" contract="Virtual" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary>
  <see cref="T:Common.Logging.Simple.CapturingLogger" /> instances send their captured log events to this method. </summary></documentation>
            <parameter name="loggerEvent" typeId="T:Common.Logging.Simple.CapturingLoggerEvent" displayName="CapturingLoggerEvent" namespace="Common.Logging.Simple" assembly="Common.Logging" nullable="false" valueType="false" />
          </method>
          <method name="GetLogger" displayName="GetLogger" id="M:Common.Logging.Simple.CapturingLoggerFactoryAdapter.GetLogger(System.Type)" access="Public" contract="Final" valueType="false" overload="1">
            <returnType typeId="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Get a <see cref="T:Common.Logging.Simple.CapturingLogger" /> instance for the given type. </summary></documentation>
            <parameter name="type" typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="GetLogger" id="M:Common.Logging.ILoggerFactoryAdapter.GetLogger(System.Type)" interface="ILoggerFactoryAdapter" interfaceId="T:Common.Logging.ILoggerFactoryAdapter" assembly="Common.Logging" declaringType="Common.Logging.ILoggerFactoryAdapter" />
          </method>
          <method name="GetLogger" displayName="GetLogger" id="M:Common.Logging.Simple.CapturingLoggerFactoryAdapter.GetLogger(System.String)" access="Public" contract="Final" valueType="false" overload="2">
            <returnType typeId="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Get a <see cref="T:Common.Logging.Simple.CapturingLogger" /> instance for the given name. </summary></documentation>
            <parameter name="name" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="GetLogger" id="M:Common.Logging.ILoggerFactoryAdapter.GetLogger(System.String)" interface="ILoggerFactoryAdapter" interfaceId="T:Common.Logging.ILoggerFactoryAdapter" assembly="Common.Logging" declaringType="Common.Logging.ILoggerFactoryAdapter" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Common.Logging.Simple.CapturingLoggerFactoryAdapter.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Equals" displayName="Equals" id="M:Common.Logging.Simple.CapturingLoggerFactoryAdapter.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Common.Logging.Simple.CapturingLoggerFactoryAdapter.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="GetType" displayName="GetType" id="M:Common.Logging.Simple.CapturingLoggerFactoryAdapter.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Common.Logging.Simple.CapturingLoggerFactoryAdapter.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Common.Logging.Simple.CapturingLoggerFactoryAdapter.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
        </class>
        <class name="CommonLoggingTraceListener" displayName="CommonLoggingTraceListener" namespace="Common.Logging.Simple" id="T:Common.Logging.Simple.CommonLoggingTraceListener" access="Public">
          <documentation><summary> A <see cref="T:System.Diagnostics.TraceListener" /> implementation sending all <see cref="T:System.Diagnostics.Trace">System.Diagnostics.Trace</see> output to the Common.Logging infrastructure. </summary>
<remarks> This listener captures all output sent by calls to <see cref="T:System.Diagnostics.Trace">System.Diagnostics.Trace</see> and and <see cref="T:System.Diagnostics.TraceSource" /> and sends it to an <see cref="T:Common.Logging.ILog" /> instance.<br /> The <see cref="T:Common.Logging.ILog" nolink="true" /> instance to be used is obtained by calling <see cref="M:Common.Logging.LogManager.GetLogger(System.String)" />. The name of the logger is created by passing this listener's <see cref="P:System.Diagnostics.TraceListener.Name" /> and any <c>source</c> or <c>category</c> passed into this listener (see <see cref="M:System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)" /> or <see cref="M:System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])" /> for example). </remarks>
<example> The snippet below shows how to add and configure this listener to your app.config: <code lang="XML">&lt;system.diagnostics&gt;
  &lt;sharedListeners&gt;
    &lt;add name="Diagnostics"
         type="Common.Logging.Simple.CommonLoggingTraceListener, Common.Logging"
         initializeData="DefaultTraceEventType=Information; LoggerNameFormat={listenerName}.{sourceName}"&gt;
      &lt;filter type="System.Diagnostics.EventTypeFilter" initializeData="Information"/&gt;
    &lt;/add&gt;
  &lt;/sharedListeners&gt;
  &lt;trace&gt;
    &lt;listeners&gt;
      &lt;add name="Diagnostics" /&gt;
    &lt;/listeners&gt;
  &lt;/trace&gt;
&lt;/system.diagnostics&gt;
</code></example>
<author>Erich Eichinger</author></documentation>
          <baseType name="TraceListener" id="T:System.Diagnostics.TraceListener" displayName="TraceListener" namespace="System.Diagnostics" assembly="System">
            <baseType name="MarshalByRefObject" id="T:System.MarshalByRefObject" displayName="MarshalByRefObject" namespace="System" assembly="mscorlib" />
          </baseType>
          <implementsClass type="System.IDisposable" id="T:System.IDisposable" displayName="IDisposable" namespace="System" inherited="true" />
          <constructor name=".ctor" id="M:Common.Logging.Simple.CommonLoggingTraceListener.#ctor" access="Public" contract="Normal" overload="1">
            <documentation><summary> Creates a new instance with the default name "Diagnostics" and <see cref="T:Common.Logging.LogLevel" /> "Trace". </summary></documentation>
          </constructor>
          <constructor name=".ctor" id="M:Common.Logging.Simple.CommonLoggingTraceListener.#ctor(System.String)" access="Public" contract="Normal" overload="2">
            <documentation><summary> Creates a new instance initialized with properties from the <paramref name="initializeData" />. string. </summary>
<remarks>
  <paramref name="initializeData" /> is a semicolon separated string of name/value pairs, where each pair has the form <c>key=value</c>. E.g. "<c>Name=MyLoggerName;LogLevel=Debug</c>" </remarks>
<param name="initializeData">a semicolon separated list of name/value pairs.</param></documentation>
            <parameter name="initializeData" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </constructor>
          <constructor name=".ctor" id="M:Common.Logging.Simple.CommonLoggingTraceListener.#ctor(System.Collections.Specialized.NameValueCollection)" access="Public" contract="Normal" overload="3">
            <documentation><summary> Creates a new instance initialized with the specified properties. </summary>
<param name="properties">name/value configuration properties.</param></documentation>
            <parameter name="properties" typeId="T:System.Collections.Specialized.NameValueCollection" displayName="NameValueCollection" namespace="System.Collections.Specialized" assembly="System" nullable="false" valueType="false" />
          </constructor>
          <property name="DefaultTraceEventType" id="P:Common.Logging.Simple.CommonLoggingTraceListener.DefaultTraceEventType" access="Public" contract="Normal" get="Public" set="Public" typeId="T:System.Diagnostics.TraceEventType" displayName="TraceEventType" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="true">
            <documentation><summary> Sets the default <see cref="T:System.Diagnostics.TraceEventType" /> to use for logging all events emitted by <see cref="T:System.Diagnostics.Trace" /><c>.Write(...)</c> and <see cref="T:System.Diagnostics.Trace" nolink="true" /><c>.WriteLine(...)</c> methods. </summary>
<remarks> This listener captures all output sent by calls to <see cref="T:System.Diagnostics.Trace" /> and sends it to an <see cref="T:Common.Logging.ILog" /> instance using the <see cref="T:Common.Logging.LogLevel" /> specified on <see cref="T:Common.Logging.LogLevel" nolink="true" />. </remarks></documentation>
          </property>
          <property name="LoggerNameFormat" id="P:Common.Logging.Simple.CommonLoggingTraceListener.LoggerNameFormat" access="Public" contract="Normal" get="Public" set="Public" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <documentation><summary> Format to use for creating the logger name. Defaults to "{listenerName}.{sourceName}". </summary>
<remarks> Available placeholders are: <list type="bullet"><item>{listenerName}: the configured name of this listener instance.</item><item>{sourceName}: the trace source name an event originates from (see e.g. <see cref="M:System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])" />.</item></list></remarks></documentation>
          </property>
          <property name="Attributes" id="P:Common.Logging.Simple.CommonLoggingTraceListener.Attributes" access="Public" contract="Normal" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="P:System.Diagnostics.TraceListener.Attributes" get="Public" set="false" typeId="T:System.Collections.Specialized.StringDictionary" displayName="StringDictionary" namespace="System.Collections.Specialized" assembly="System" nullable="false" valueType="false">
            <documentation><summary></summary></documentation>
          </property>
          <property name="Name" id="P:Common.Logging.Simple.CommonLoggingTraceListener.Name" access="Public" contract="Virtual" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="P:System.Diagnostics.TraceListener.Name" get="Public" set="Public" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <documentation><summary></summary></documentation>
          </property>
          <property name="IsThreadSafe" id="P:Common.Logging.Simple.CommonLoggingTraceListener.IsThreadSafe" access="Public" contract="Virtual" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="P:System.Diagnostics.TraceListener.IsThreadSafe" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary></summary></documentation>
          </property>
          <property name="IndentLevel" id="P:Common.Logging.Simple.CommonLoggingTraceListener.IndentLevel" access="Public" contract="Normal" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="P:System.Diagnostics.TraceListener.IndentLevel" get="Public" set="Public" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary></summary></documentation>
          </property>
          <property name="IndentSize" id="P:Common.Logging.Simple.CommonLoggingTraceListener.IndentSize" access="Public" contract="Normal" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="P:System.Diagnostics.TraceListener.IndentSize" get="Public" set="Public" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary></summary></documentation>
          </property>
          <property name="Filter" id="P:Common.Logging.Simple.CommonLoggingTraceListener.Filter" access="Public" contract="Normal" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="P:System.Diagnostics.TraceListener.Filter" get="Public" set="Public" typeId="T:System.Diagnostics.TraceFilter" displayName="TraceFilter" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="false">
            <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
              <property name="Value" type="System.Boolean" value="False" />
            </attribute>
            <documentation><summary></summary></documentation>
          </property>
          <property name="NeedIndent" id="P:Common.Logging.Simple.CommonLoggingTraceListener.NeedIndent" access="Family" contract="Normal" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="P:System.Diagnostics.TraceListener.NeedIndent" get="Family" set="Family" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary></summary></documentation>
          </property>
          <property name="TraceOutputOptions" id="P:Common.Logging.Simple.CommonLoggingTraceListener.TraceOutputOptions" access="Public" contract="Normal" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="P:System.Diagnostics.TraceListener.TraceOutputOptions" get="Public" set="Public" typeId="T:System.Diagnostics.TraceOptions" displayName="TraceOptions" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="true">
            <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
              <property name="Value" type="System.Boolean" value="False" />
            </attribute>
            <documentation><summary></summary></documentation>
          </property>
          <method name="Log" displayName="Log" id="M:Common.Logging.Simple.CommonLoggingTraceListener.Log(System.Diagnostics.TraceEventType,System.String,System.Int32,System.String,System.Object[])" access="Family" contract="Virtual" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Logs the given message to the Common.Logging infrastructure. </summary>
<param name="eventType">the eventType</param>
<param name="source">the <see cref="T:System.Diagnostics.TraceSource" /> name or category name passed into e.g. <see cref="M:System.Diagnostics.Trace.Write(System.Object,System.String)" />.</param>
<param name="id">the id of this event</param>
<param name="format">the message format</param>
<param name="args">the message arguments</param></documentation>
            <parameter name="eventType" typeId="T:System.Diagnostics.TraceEventType" displayName="TraceEventType" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="true" />
            <parameter name="source" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="id" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
          </method>
          <method name="Write" displayName="Write" id="M:Common.Logging.Simple.CommonLoggingTraceListener.Write(System.Object)" access="Public" contract="Override" valueType="true" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Writes message to logger provided by <see cref="M:Common.Logging.LogManager.GetLogger(System.String)" />. </summary></documentation>
            <parameter name="o" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Write" displayName="Write" id="M:Common.Logging.Simple.CommonLoggingTraceListener.Write(System.Object,System.String)" access="Public" contract="Override" valueType="true" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Writes message to logger provided by <see cref="M:Common.Logging.LogManager.GetLogger(System.String)" />. </summary></documentation>
            <parameter name="o" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="category" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Write" displayName="Write" id="M:Common.Logging.Simple.CommonLoggingTraceListener.Write(System.String)" access="Public" contract="Override" valueType="true" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Writes message to logger provided by <see cref="M:Common.Logging.LogManager.GetLogger(System.String)" />. </summary></documentation>
            <parameter name="message" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Write" displayName="Write" id="M:Common.Logging.Simple.CommonLoggingTraceListener.Write(System.String,System.String)" access="Public" contract="Override" valueType="true" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Writes message to logger provided by <see cref="M:Common.Logging.LogManager.GetLogger(System.String)" />. </summary></documentation>
            <parameter name="message" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="category" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="WriteLine" displayName="WriteLine" id="M:Common.Logging.Simple.CommonLoggingTraceListener.WriteLine(System.Object)" access="Public" contract="Override" valueType="true" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Writes message to logger provided by <see cref="M:Common.Logging.LogManager.GetLogger(System.String)" />. </summary></documentation>
            <parameter name="o" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="WriteLine" displayName="WriteLine" id="M:Common.Logging.Simple.CommonLoggingTraceListener.WriteLine(System.Object,System.String)" access="Public" contract="Override" valueType="true" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Writes message to logger provided by <see cref="M:Common.Logging.LogManager.GetLogger(System.String)" />. </summary></documentation>
            <parameter name="o" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="category" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="WriteLine" displayName="WriteLine" id="M:Common.Logging.Simple.CommonLoggingTraceListener.WriteLine(System.String)" access="Public" contract="Override" valueType="true" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Writes message to logger provided by <see cref="M:Common.Logging.LogManager.GetLogger(System.String)" />. </summary></documentation>
            <parameter name="message" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="WriteLine" displayName="WriteLine" id="M:Common.Logging.Simple.CommonLoggingTraceListener.WriteLine(System.String,System.String)" access="Public" contract="Override" valueType="true" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Writes message to logger provided by <see cref="M:Common.Logging.LogManager.GetLogger(System.String)" /></summary></documentation>
            <parameter name="message" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="category" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="TraceEvent" displayName="TraceEvent" id="M:Common.Logging.Simple.CommonLoggingTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)" access="Public" contract="Override" valueType="true" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Writes message to logger provided by <see cref="M:Common.Logging.LogManager.GetLogger(System.String)" /></summary></documentation>
            <parameter name="eventCache" typeId="T:System.Diagnostics.TraceEventCache" displayName="TraceEventCache" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="false" />
            <parameter name="source" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="eventType" typeId="T:System.Diagnostics.TraceEventType" displayName="TraceEventType" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="true" />
            <parameter name="id" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="TraceEvent" displayName="TraceEvent" id="M:Common.Logging.Simple.CommonLoggingTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" access="Public" contract="Override" valueType="true" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Writes message to logger provided by <see cref="M:Common.Logging.LogManager.GetLogger(System.String)" /></summary></documentation>
            <parameter name="eventCache" typeId="T:System.Diagnostics.TraceEventCache" displayName="TraceEventCache" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="false" />
            <parameter name="source" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="eventType" typeId="T:System.Diagnostics.TraceEventType" displayName="TraceEventType" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="true" />
            <parameter name="id" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="message" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="TraceEvent" displayName="TraceEvent" id="M:Common.Logging.Simple.CommonLoggingTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])" access="Public" contract="Override" valueType="true" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Writes message to logger provided by <see cref="M:Common.Logging.LogManager.GetLogger(System.String)" /></summary></documentation>
            <parameter name="eventCache" typeId="T:System.Diagnostics.TraceEventCache" displayName="TraceEventCache" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="false" />
            <parameter name="source" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="eventType" typeId="T:System.Diagnostics.TraceEventType" displayName="TraceEventType" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="true" />
            <parameter name="id" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="message" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
          </method>
          <method name="TraceData" displayName="TraceData" id="M:Common.Logging.Simple.CommonLoggingTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])" access="Public" contract="Override" valueType="true" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Writes message to logger provided by <see cref="M:Common.Logging.LogManager.GetLogger(System.String)" /></summary></documentation>
            <parameter name="eventCache" typeId="T:System.Diagnostics.TraceEventCache" displayName="TraceEventCache" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="false" />
            <parameter name="source" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="eventType" typeId="T:System.Diagnostics.TraceEventType" displayName="TraceEventType" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="true" />
            <parameter name="id" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="data" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
          </method>
          <method name="TraceData" displayName="TraceData" id="M:Common.Logging.Simple.CommonLoggingTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" access="Public" contract="Override" valueType="true" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Writes message to logger provided by <see cref="M:Common.Logging.LogManager.GetLogger(System.String)" /></summary></documentation>
            <parameter name="eventCache" typeId="T:System.Diagnostics.TraceEventCache" displayName="TraceEventCache" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="false" />
            <parameter name="source" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="eventType" typeId="T:System.Diagnostics.TraceEventType" displayName="TraceEventType" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="true" />
            <parameter name="id" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="data" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Dispose" displayName="Dispose" id="M:Common.Logging.Simple.CommonLoggingTraceListener.Dispose" access="Public" contract="Final" valueType="true" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="M:System.Diagnostics.TraceListener.Dispose" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <implements name="Dispose" id="M:System.IDisposable.Dispose" interface="IDisposable" interfaceId="T:System.IDisposable" assembly="mscorlib" declaringType="System.IDisposable" />
          </method>
          <method name="Dispose" displayName="Dispose" id="M:Common.Logging.Simple.CommonLoggingTraceListener.Dispose(System.Boolean)" access="Family" contract="Virtual" valueType="true" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="M:System.Diagnostics.TraceListener.Dispose(System.Boolean)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="disposing" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="Close" displayName="Close" id="M:Common.Logging.Simple.CommonLoggingTraceListener.Close" access="Public" contract="Virtual" valueType="true" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="M:System.Diagnostics.TraceListener.Close">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Flush" displayName="Flush" id="M:Common.Logging.Simple.CommonLoggingTraceListener.Flush" access="Public" contract="Virtual" valueType="true" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="M:System.Diagnostics.TraceListener.Flush">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Fail" displayName="Fail" id="M:Common.Logging.Simple.CommonLoggingTraceListener.Fail(System.String)" access="Public" contract="Virtual" valueType="true" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="M:System.Diagnostics.TraceListener.Fail(System.String)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="message" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Fail" displayName="Fail" id="M:Common.Logging.Simple.CommonLoggingTraceListener.Fail(System.String,System.String)" access="Public" contract="Virtual" valueType="true" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="M:System.Diagnostics.TraceListener.Fail(System.String,System.String)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="message" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="detailMessage" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetSupportedAttributes" displayName="GetSupportedAttributes" id="M:Common.Logging.Simple.CommonLoggingTraceListener.GetSupportedAttributes" access="Family" contract="Virtual" valueType="false" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="M:System.Diagnostics.TraceListener.GetSupportedAttributes">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
            </returnType>
            <documentation><summary></summary></documentation>
          </method>
          <method name="WriteIndent" displayName="WriteIndent" id="M:Common.Logging.Simple.CommonLoggingTraceListener.WriteIndent" access="Family" contract="Virtual" valueType="true" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="M:System.Diagnostics.TraceListener.WriteIndent">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="TraceTransfer" displayName="TraceTransfer" id="M:Common.Logging.Simple.CommonLoggingTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)" access="Public" contract="Virtual" valueType="true" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="M:System.Diagnostics.TraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
              <property name="Value" type="System.Boolean" value="False" />
            </attribute>
            <parameter name="eventCache" typeId="T:System.Diagnostics.TraceEventCache" displayName="TraceEventCache" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="false" />
            <parameter name="source" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="id" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="message" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="relatedActivityId" typeId="T:System.Guid" displayName="Guid" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Common.Logging.Simple.CommonLoggingTraceListener.MemberwiseClone(System.Boolean)" access="Family" contract="Normal" valueType="false" declaringType="System.MarshalByRefObject" declaringAssembly="mscorlib" declaringId="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)" overload="1">
            <returnType typeId="T:System.MarshalByRefObject" displayName="MarshalByRefObject" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
            <parameter name="cloneIdentity" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="GetLifetimeService" displayName="GetLifetimeService" id="M:Common.Logging.Simple.CommonLoggingTraceListener.GetLifetimeService" access="Public" contract="Final" valueType="false" declaringType="System.MarshalByRefObject" declaringAssembly="mscorlib" declaringId="M:System.MarshalByRefObject.GetLifetimeService">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Security.Permissions.SecurityPermissionAttribute">
              <property name="Flags" type="System.Security.Permissions.SecurityPermissionFlag" value="SecurityPermissionFlag.Infrastructure" />
              <property name="Assertion" type="System.Boolean" value="False" />
              <property name="UnmanagedCode" type="System.Boolean" value="False" />
              <property name="SkipVerification" type="System.Boolean" value="False" />
              <property name="Execution" type="System.Boolean" value="False" />
              <property name="ControlThread" type="System.Boolean" value="False" />
              <property name="ControlEvidence" type="System.Boolean" value="False" />
              <property name="ControlPolicy" type="System.Boolean" value="False" />
              <property name="SerializationFormatter" type="System.Boolean" value="False" />
              <property name="ControlDomainPolicy" type="System.Boolean" value="False" />
              <property name="ControlPrincipal" type="System.Boolean" value="False" />
              <property name="ControlAppDomain" type="System.Boolean" value="False" />
              <property name="RemotingConfiguration" type="System.Boolean" value="False" />
              <property name="Infrastructure" type="System.Boolean" value="True" />
              <property name="BindingRedirects" type="System.Boolean" value="False" />
              <property name="Action" type="System.Security.Permissions.SecurityAction" value="SecurityAction.LinkDemand" />
              <property name="Unrestricted" type="System.Boolean" value="False" />
            </attribute>
          </method>
          <method name="InitializeLifetimeService" displayName="InitializeLifetimeService" id="M:Common.Logging.Simple.CommonLoggingTraceListener.InitializeLifetimeService" access="Public" contract="Virtual" valueType="false" declaringType="System.MarshalByRefObject" declaringAssembly="mscorlib" declaringId="M:System.MarshalByRefObject.InitializeLifetimeService">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Security.Permissions.SecurityPermissionAttribute">
              <property name="Flags" type="System.Security.Permissions.SecurityPermissionFlag" value="SecurityPermissionFlag.Infrastructure" />
              <property name="Assertion" type="System.Boolean" value="False" />
              <property name="UnmanagedCode" type="System.Boolean" value="False" />
              <property name="SkipVerification" type="System.Boolean" value="False" />
              <property name="Execution" type="System.Boolean" value="False" />
              <property name="ControlThread" type="System.Boolean" value="False" />
              <property name="ControlEvidence" type="System.Boolean" value="False" />
              <property name="ControlPolicy" type="System.Boolean" value="False" />
              <property name="SerializationFormatter" type="System.Boolean" value="False" />
              <property name="ControlDomainPolicy" type="System.Boolean" value="False" />
              <property name="ControlPrincipal" type="System.Boolean" value="False" />
              <property name="ControlAppDomain" type="System.Boolean" value="False" />
              <property name="RemotingConfiguration" type="System.Boolean" value="False" />
              <property name="Infrastructure" type="System.Boolean" value="True" />
              <property name="BindingRedirects" type="System.Boolean" value="False" />
              <property name="Action" type="System.Security.Permissions.SecurityAction" value="SecurityAction.LinkDemand" />
              <property name="Unrestricted" type="System.Boolean" value="False" />
            </attribute>
          </method>
          <method name="CreateObjRef" displayName="CreateObjRef" id="M:Common.Logging.Simple.CommonLoggingTraceListener.CreateObjRef(System.Type)" access="Public" contract="Virtual" valueType="false" declaringType="System.MarshalByRefObject" declaringAssembly="mscorlib" declaringId="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
            <returnType typeId="T:System.Runtime.Remoting.ObjRef" displayName="ObjRef" namespace="System.Runtime.Remoting" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Security.Permissions.SecurityPermissionAttribute">
              <property name="Flags" type="System.Security.Permissions.SecurityPermissionFlag" value="SecurityPermissionFlag.Infrastructure" />
              <property name="Assertion" type="System.Boolean" value="False" />
              <property name="UnmanagedCode" type="System.Boolean" value="False" />
              <property name="SkipVerification" type="System.Boolean" value="False" />
              <property name="Execution" type="System.Boolean" value="False" />
              <property name="ControlThread" type="System.Boolean" value="False" />
              <property name="ControlEvidence" type="System.Boolean" value="False" />
              <property name="ControlPolicy" type="System.Boolean" value="False" />
              <property name="SerializationFormatter" type="System.Boolean" value="False" />
              <property name="ControlDomainPolicy" type="System.Boolean" value="False" />
              <property name="ControlPrincipal" type="System.Boolean" value="False" />
              <property name="ControlAppDomain" type="System.Boolean" value="False" />
              <property name="RemotingConfiguration" type="System.Boolean" value="False" />
              <property name="Infrastructure" type="System.Boolean" value="True" />
              <property name="BindingRedirects" type="System.Boolean" value="False" />
              <property name="Action" type="System.Security.Permissions.SecurityAction" value="SecurityAction.LinkDemand" />
              <property name="Unrestricted" type="System.Boolean" value="False" />
            </attribute>
            <parameter name="requestedType" typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Common.Logging.Simple.CommonLoggingTraceListener.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Equals" displayName="Equals" id="M:Common.Logging.Simple.CommonLoggingTraceListener.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Common.Logging.Simple.CommonLoggingTraceListener.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="GetType" displayName="GetType" id="M:Common.Logging.Simple.CommonLoggingTraceListener.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Common.Logging.Simple.CommonLoggingTraceListener.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Common.Logging.Simple.CommonLoggingTraceListener.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone" overload="2">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
        </class>
        <class name="ConsoleOutLogger" displayName="ConsoleOutLogger" namespace="Common.Logging.Simple" id="T:Common.Logging.Simple.ConsoleOutLogger" access="Public">
          <documentation><summary> Sends log messages to <see cref="P:System.Console.Out" />. </summary>
<author>Gilles Bayon</author></documentation>
          <attribute name="System.SerializableAttribute" />
          <baseType name="AbstractSimpleLogger" id="T:Common.Logging.Simple.AbstractSimpleLogger" displayName="AbstractSimpleLogger" namespace="Common.Logging.Simple" assembly="Common.Logging">
            <baseType name="AbstractLogger" id="T:Common.Logging.Factory.AbstractLogger" displayName="AbstractLogger" namespace="Common.Logging.Factory" assembly="Common.Logging" />
          </baseType>
          <implementsClass type="Common.Logging.ILog" id="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" inherited="true" />
          <constructor name=".ctor" id="M:Common.Logging.Simple.ConsoleOutLogger.#ctor(System.String,Common.Logging.LogLevel,System.Boolean,System.Boolean,System.Boolean,System.String)" access="Public" contract="Normal">
            <documentation><summary> Creates and initializes a logger that writes messages to <see cref="P:System.Console.Out" />. </summary>
<param name="logName">The name, usually type name of the calling class, of the logger.</param>
<param name="logLevel">The current logging threshold. Messages recieved that are beneath this threshold will not be logged.</param>
<param name="showLevel">Include the current log level in the log message.</param>
<param name="showDateTime">Include the current time in the log message.</param>
<param name="showLogName">Include the instance name in the log message.</param>
<param name="dateTimeFormat">The date and time format to use in the log message.</param></documentation>
            <parameter name="logName" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="logLevel" typeId="T:Common.Logging.LogLevel" displayName="LogLevel" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="true" />
            <parameter name="showLevel" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="showDateTime" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="showLogName" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="dateTimeFormat" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </constructor>
          <property name="Name" id="P:Common.Logging.Simple.ConsoleOutLogger.Name" access="Public" contract="Normal" declaringType="Common.Logging.Simple.AbstractSimpleLogger" declaringAssembly="Common.Logging" declaringId="P:Common.Logging.Simple.AbstractSimpleLogger.Name" get="Public" set="false" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <documentation><summary> The name of the logger. </summary></documentation>
          </property>
          <property name="ShowLevel" id="P:Common.Logging.Simple.ConsoleOutLogger.ShowLevel" access="Public" contract="Normal" declaringType="Common.Logging.Simple.AbstractSimpleLogger" declaringAssembly="Common.Logging" declaringId="P:Common.Logging.Simple.AbstractSimpleLogger.ShowLevel" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Include the current log level in the log message. </summary></documentation>
          </property>
          <property name="ShowDateTime" id="P:Common.Logging.Simple.ConsoleOutLogger.ShowDateTime" access="Public" contract="Normal" declaringType="Common.Logging.Simple.AbstractSimpleLogger" declaringAssembly="Common.Logging" declaringId="P:Common.Logging.Simple.AbstractSimpleLogger.ShowDateTime" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Include the current time in the log message. </summary></documentation>
          </property>
          <property name="ShowLogName" id="P:Common.Logging.Simple.ConsoleOutLogger.ShowLogName" access="Public" contract="Normal" declaringType="Common.Logging.Simple.AbstractSimpleLogger" declaringAssembly="Common.Logging" declaringId="P:Common.Logging.Simple.AbstractSimpleLogger.ShowLogName" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Include the instance name in the log message. </summary></documentation>
          </property>
          <property name="CurrentLogLevel" id="P:Common.Logging.Simple.ConsoleOutLogger.CurrentLogLevel" access="Public" contract="Normal" declaringType="Common.Logging.Simple.AbstractSimpleLogger" declaringAssembly="Common.Logging" declaringId="P:Common.Logging.Simple.AbstractSimpleLogger.CurrentLogLevel" get="Public" set="Public" typeId="T:Common.Logging.LogLevel" displayName="LogLevel" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="true">
            <documentation><summary> The current logging threshold. Messages recieved that are beneath this threshold will not be logged. </summary></documentation>
          </property>
          <property name="DateTimeFormat" id="P:Common.Logging.Simple.ConsoleOutLogger.DateTimeFormat" access="Public" contract="Normal" declaringType="Common.Logging.Simple.AbstractSimpleLogger" declaringAssembly="Common.Logging" declaringId="P:Common.Logging.Simple.AbstractSimpleLogger.DateTimeFormat" get="Public" set="false" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <documentation><summary> The date and time format to use in the log message. </summary></documentation>
          </property>
          <property name="HasDateTimeFormat" id="P:Common.Logging.Simple.ConsoleOutLogger.HasDateTimeFormat" access="Public" contract="Normal" declaringType="Common.Logging.Simple.AbstractSimpleLogger" declaringAssembly="Common.Logging" declaringId="P:Common.Logging.Simple.AbstractSimpleLogger.HasDateTimeFormat" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Determines Whether <see cref="P:Common.Logging.Simple.AbstractSimpleLogger.DateTimeFormat" /> is set. </summary></documentation>
          </property>
          <property name="IsTraceEnabled" id="P:Common.Logging.Simple.ConsoleOutLogger.IsTraceEnabled" access="Public" contract="Override" declaringType="Common.Logging.Simple.AbstractSimpleLogger" declaringAssembly="Common.Logging" declaringId="P:Common.Logging.Simple.AbstractSimpleLogger.IsTraceEnabled" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Returns <see langword="true" /> if the current <see cref="T:Common.Logging.LogLevel" /> is greater than or equal to <see cref="F:Common.Logging.LogLevel.Trace" />. If it is, all messages will be sent to <see cref="P:System.Console.Out" />. </summary></documentation>
            <implements name="IsTraceEnabled" id="P:Common.Logging.ILog.IsTraceEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsDebugEnabled" id="P:Common.Logging.Simple.ConsoleOutLogger.IsDebugEnabled" access="Public" contract="Override" declaringType="Common.Logging.Simple.AbstractSimpleLogger" declaringAssembly="Common.Logging" declaringId="P:Common.Logging.Simple.AbstractSimpleLogger.IsDebugEnabled" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Returns <see langword="true" /> if the current <see cref="T:Common.Logging.LogLevel" /> is greater than or equal to <see cref="F:Common.Logging.LogLevel.Debug" />. If it is, all messages will be sent to <see cref="P:System.Console.Out" />. </summary></documentation>
            <implements name="IsDebugEnabled" id="P:Common.Logging.ILog.IsDebugEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsInfoEnabled" id="P:Common.Logging.Simple.ConsoleOutLogger.IsInfoEnabled" access="Public" contract="Override" declaringType="Common.Logging.Simple.AbstractSimpleLogger" declaringAssembly="Common.Logging" declaringId="P:Common.Logging.Simple.AbstractSimpleLogger.IsInfoEnabled" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Returns <see langword="true" /> if the current <see cref="T:Common.Logging.LogLevel" /> is greater than or equal to <see cref="F:Common.Logging.LogLevel.Info" />. If it is, only messages with a <see cref="T:Common.Logging.LogLevel" /> of <see cref="F:Common.Logging.LogLevel.Info" />, <see cref="F:Common.Logging.LogLevel.Warn" />, <see cref="F:Common.Logging.LogLevel.Error" />, and <see cref="F:Common.Logging.LogLevel.Fatal" /> will be sent to <see cref="P:System.Console.Out" />. </summary></documentation>
            <implements name="IsInfoEnabled" id="P:Common.Logging.ILog.IsInfoEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsWarnEnabled" id="P:Common.Logging.Simple.ConsoleOutLogger.IsWarnEnabled" access="Public" contract="Override" declaringType="Common.Logging.Simple.AbstractSimpleLogger" declaringAssembly="Common.Logging" declaringId="P:Common.Logging.Simple.AbstractSimpleLogger.IsWarnEnabled" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Returns <see langword="true" /> if the current <see cref="T:Common.Logging.LogLevel" /> is greater than or equal to <see cref="F:Common.Logging.LogLevel.Warn" />. If it is, only messages with a <see cref="T:Common.Logging.LogLevel" /> of <see cref="F:Common.Logging.LogLevel.Warn" />, <see cref="F:Common.Logging.LogLevel.Error" />, and <see cref="F:Common.Logging.LogLevel.Fatal" /> will be sent to <see cref="P:System.Console.Out" />. </summary></documentation>
            <implements name="IsWarnEnabled" id="P:Common.Logging.ILog.IsWarnEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsErrorEnabled" id="P:Common.Logging.Simple.ConsoleOutLogger.IsErrorEnabled" access="Public" contract="Override" declaringType="Common.Logging.Simple.AbstractSimpleLogger" declaringAssembly="Common.Logging" declaringId="P:Common.Logging.Simple.AbstractSimpleLogger.IsErrorEnabled" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Returns <see langword="true" /> if the current <see cref="T:Common.Logging.LogLevel" /> is greater than or equal to <see cref="F:Common.Logging.LogLevel.Error" />. If it is, only messages with a <see cref="T:Common.Logging.LogLevel" /> of <see cref="F:Common.Logging.LogLevel.Error" /> and <see cref="F:Common.Logging.LogLevel.Fatal" /> will be sent to <see cref="P:System.Console.Out" />. </summary></documentation>
            <implements name="IsErrorEnabled" id="P:Common.Logging.ILog.IsErrorEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsFatalEnabled" id="P:Common.Logging.Simple.ConsoleOutLogger.IsFatalEnabled" access="Public" contract="Override" declaringType="Common.Logging.Simple.AbstractSimpleLogger" declaringAssembly="Common.Logging" declaringId="P:Common.Logging.Simple.AbstractSimpleLogger.IsFatalEnabled" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Returns <see langword="true" /> if the current <see cref="T:Common.Logging.LogLevel" /> is greater than or equal to <see cref="F:Common.Logging.LogLevel.Fatal" />. If it is, only messages with a <see cref="T:Common.Logging.LogLevel" /> of <see cref="F:Common.Logging.LogLevel.Fatal" /> will be sent to <see cref="P:System.Console.Out" />. </summary></documentation>
            <implements name="IsFatalEnabled" id="P:Common.Logging.ILog.IsFatalEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <method name="WriteInternal" displayName="WriteInternal" id="M:Common.Logging.Simple.ConsoleOutLogger.WriteInternal(Common.Logging.LogLevel,System.Object,System.Exception)" access="Family" contract="Override" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Do the actual logging by constructing the log message using a <see cref="T:System.Text.StringBuilder" /> then sending the output to <see cref="P:System.Console.Out" />. </summary>
<param name="level">The <see cref="T:Common.Logging.LogLevel" /> of the message.</param>
<param name="message">The log message.</param>
<param name="e">An optional <see cref="T:System.Exception" /> associated with the message.</param></documentation>
            <parameter name="level" typeId="T:Common.Logging.LogLevel" displayName="LogLevel" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="true" />
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="e" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="FormatOutput" displayName="FormatOutput" id="M:Common.Logging.Simple.ConsoleOutLogger.FormatOutput(System.Text.StringBuilder,Common.Logging.LogLevel,System.Object,System.Exception)" access="Family" contract="Virtual" valueType="true" declaringType="Common.Logging.Simple.AbstractSimpleLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Simple.AbstractSimpleLogger.FormatOutput(System.Text.StringBuilder,Common.Logging.LogLevel,System.Object,System.Exception)">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Appends the formatted message to the specified <see cref="T:System.Text.StringBuilder" />. </summary></documentation>
            <parameter name="stringBuilder" typeId="T:System.Text.StringBuilder" displayName="StringBuilder" namespace="System.Text" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="level" typeId="T:Common.Logging.LogLevel" displayName="LogLevel" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="true" />
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="e" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="IsLevelEnabled" displayName="IsLevelEnabled" id="M:Common.Logging.Simple.ConsoleOutLogger.IsLevelEnabled(Common.Logging.LogLevel)" access="Family" contract="Virtual" valueType="true" declaringType="Common.Logging.Simple.AbstractSimpleLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Simple.AbstractSimpleLogger.IsLevelEnabled(Common.Logging.LogLevel)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Determines if the given log level is currently enabled. </summary></documentation>
            <parameter name="level" typeId="T:Common.Logging.LogLevel" displayName="LogLevel" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="true" />
          </method>
          <method name="GetWriteHandler" displayName="GetWriteHandler" id="M:Common.Logging.Simple.ConsoleOutLogger.GetWriteHandler" access="Family" contract="Virtual" valueType="false" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.GetWriteHandler">
            <returnType typeId="T:Common.Logging.Factory.AbstractLogger.WriteHandler" displayName="AbstractLogger.WriteHandler" namespace="Common.Logging.Factory" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Override this method to use a different method than <see cref="M:Common.Logging.Factory.AbstractLogger.WriteInternal(Common.Logging.LogLevel,System.Object,System.Exception)" /> for writing log events to the underlying log system. </summary></documentation>
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.Simple.ConsoleOutLogger.Trace(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.Simple.ConsoleOutLogger.Trace(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Trace" /> level including the stack trace of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="TraceFormat" displayName="TraceFormat" id="M:Common.Logging.Simple.ConsoleOutLogger.TraceFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.TraceFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="TraceFormat" id="M:Common.Logging.ILog.TraceFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="TraceFormat" displayName="TraceFormat" id="M:Common.Logging.Simple.ConsoleOutLogger.TraceFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.TraceFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="TraceFormat" id="M:Common.Logging.ILog.TraceFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="TraceFormat" displayName="TraceFormat" id="M:Common.Logging.Simple.ConsoleOutLogger.TraceFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.TraceFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="TraceFormat" id="M:Common.Logging.ILog.TraceFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="TraceFormat" displayName="TraceFormat" id="M:Common.Logging.Simple.ConsoleOutLogger.TraceFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.TraceFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="TraceFormat" id="M:Common.Logging.ILog.TraceFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.Simple.ConsoleOutLogger.Trace(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.Simple.ConsoleOutLogger.Trace(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.Simple.ConsoleOutLogger.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.Simple.ConsoleOutLogger.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.Simple.ConsoleOutLogger.Debug(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.Simple.ConsoleOutLogger.Debug(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Debug" /> level including the stack Debug of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="DebugFormat" displayName="DebugFormat" id="M:Common.Logging.Simple.ConsoleOutLogger.DebugFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.DebugFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="DebugFormat" id="M:Common.Logging.ILog.DebugFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="DebugFormat" displayName="DebugFormat" id="M:Common.Logging.Simple.ConsoleOutLogger.DebugFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.DebugFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="DebugFormat" id="M:Common.Logging.ILog.DebugFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="DebugFormat" displayName="DebugFormat" id="M:Common.Logging.Simple.ConsoleOutLogger.DebugFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.DebugFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="DebugFormat" id="M:Common.Logging.ILog.DebugFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="DebugFormat" displayName="DebugFormat" id="M:Common.Logging.Simple.ConsoleOutLogger.DebugFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.DebugFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="DebugFormat" id="M:Common.Logging.ILog.DebugFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.Simple.ConsoleOutLogger.Debug(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.Simple.ConsoleOutLogger.Debug(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.Simple.ConsoleOutLogger.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.Simple.ConsoleOutLogger.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.Simple.ConsoleOutLogger.Info(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.Simple.ConsoleOutLogger.Info(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Info" /> level including the stack Info of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="InfoFormat" displayName="InfoFormat" id="M:Common.Logging.Simple.ConsoleOutLogger.InfoFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.InfoFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="InfoFormat" id="M:Common.Logging.ILog.InfoFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="InfoFormat" displayName="InfoFormat" id="M:Common.Logging.Simple.ConsoleOutLogger.InfoFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.InfoFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="InfoFormat" id="M:Common.Logging.ILog.InfoFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="InfoFormat" displayName="InfoFormat" id="M:Common.Logging.Simple.ConsoleOutLogger.InfoFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.InfoFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="InfoFormat" id="M:Common.Logging.ILog.InfoFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="InfoFormat" displayName="InfoFormat" id="M:Common.Logging.Simple.ConsoleOutLogger.InfoFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.InfoFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="InfoFormat" id="M:Common.Logging.ILog.InfoFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.Simple.ConsoleOutLogger.Info(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.Simple.ConsoleOutLogger.Info(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.Simple.ConsoleOutLogger.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.Simple.ConsoleOutLogger.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.Simple.ConsoleOutLogger.Warn(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.Simple.ConsoleOutLogger.Warn(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Warn" /> level including the stack Warn of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="WarnFormat" displayName="WarnFormat" id="M:Common.Logging.Simple.ConsoleOutLogger.WarnFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.WarnFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="WarnFormat" id="M:Common.Logging.ILog.WarnFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="WarnFormat" displayName="WarnFormat" id="M:Common.Logging.Simple.ConsoleOutLogger.WarnFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.WarnFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="WarnFormat" id="M:Common.Logging.ILog.WarnFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="WarnFormat" displayName="WarnFormat" id="M:Common.Logging.Simple.ConsoleOutLogger.WarnFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.WarnFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="WarnFormat" id="M:Common.Logging.ILog.WarnFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="WarnFormat" displayName="WarnFormat" id="M:Common.Logging.Simple.ConsoleOutLogger.WarnFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.WarnFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="WarnFormat" id="M:Common.Logging.ILog.WarnFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.Simple.ConsoleOutLogger.Warn(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.Simple.ConsoleOutLogger.Warn(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.Simple.ConsoleOutLogger.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.Simple.ConsoleOutLogger.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.Simple.ConsoleOutLogger.Error(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.Simple.ConsoleOutLogger.Error(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Error" /> level including the stack Error of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ErrorFormat" displayName="ErrorFormat" id="M:Common.Logging.Simple.ConsoleOutLogger.ErrorFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.ErrorFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="ErrorFormat" id="M:Common.Logging.ILog.ErrorFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ErrorFormat" displayName="ErrorFormat" id="M:Common.Logging.Simple.ConsoleOutLogger.ErrorFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.ErrorFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="ErrorFormat" id="M:Common.Logging.ILog.ErrorFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ErrorFormat" displayName="ErrorFormat" id="M:Common.Logging.Simple.ConsoleOutLogger.ErrorFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.ErrorFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="ErrorFormat" id="M:Common.Logging.ILog.ErrorFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ErrorFormat" displayName="ErrorFormat" id="M:Common.Logging.Simple.ConsoleOutLogger.ErrorFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.ErrorFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="ErrorFormat" id="M:Common.Logging.ILog.ErrorFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.Simple.ConsoleOutLogger.Error(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.Simple.ConsoleOutLogger.Error(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.Simple.ConsoleOutLogger.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.Simple.ConsoleOutLogger.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.Simple.ConsoleOutLogger.Fatal(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.Simple.ConsoleOutLogger.Fatal(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level including the stack Fatal of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="FatalFormat" displayName="FatalFormat" id="M:Common.Logging.Simple.ConsoleOutLogger.FatalFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.FatalFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="FatalFormat" id="M:Common.Logging.ILog.FatalFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="FatalFormat" displayName="FatalFormat" id="M:Common.Logging.Simple.ConsoleOutLogger.FatalFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.FatalFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="FatalFormat" id="M:Common.Logging.ILog.FatalFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="FatalFormat" displayName="FatalFormat" id="M:Common.Logging.Simple.ConsoleOutLogger.FatalFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.FatalFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="FatalFormat" id="M:Common.Logging.ILog.FatalFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="FatalFormat" displayName="FatalFormat" id="M:Common.Logging.Simple.ConsoleOutLogger.FatalFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.FatalFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="FatalFormat" id="M:Common.Logging.ILog.FatalFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.Simple.ConsoleOutLogger.Fatal(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.Simple.ConsoleOutLogger.Fatal(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.Simple.ConsoleOutLogger.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.Simple.ConsoleOutLogger.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Common.Logging.Simple.ConsoleOutLogger.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Equals" displayName="Equals" id="M:Common.Logging.Simple.ConsoleOutLogger.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Common.Logging.Simple.ConsoleOutLogger.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="GetType" displayName="GetType" id="M:Common.Logging.Simple.ConsoleOutLogger.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Common.Logging.Simple.ConsoleOutLogger.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Common.Logging.Simple.ConsoleOutLogger.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
        </class>
        <class name="ConsoleOutLoggerFactoryAdapter" displayName="ConsoleOutLoggerFactoryAdapter" namespace="Common.Logging.Simple" id="T:Common.Logging.Simple.ConsoleOutLoggerFactoryAdapter" access="Public">
          <documentation><summary> Factory for creating <see cref="T:Common.Logging.ILog" /> instances that write data to <see cref="P:System.Console.Out" />. </summary>
<seealso cref="T:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter" />
<seealso cref="P:Common.Logging.LogManager.Adapter" />
<seealso cref="T:Common.Logging.ConfigurationSectionHandler" />
<author>Gilles Bayon</author>
<author>Mark Pollack</author>
<author>Erich Eichinger</author></documentation>
          <baseType name="AbstractSimpleLoggerFactoryAdapter" id="T:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter" displayName="AbstractSimpleLoggerFactoryAdapter" namespace="Common.Logging.Simple" assembly="Common.Logging">
            <baseType name="AbstractCachingLoggerFactoryAdapter" id="T:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter" displayName="AbstractCachingLoggerFactoryAdapter" namespace="Common.Logging.Factory" assembly="Common.Logging" />
          </baseType>
          <implementsClass type="Common.Logging.ILoggerFactoryAdapter" id="T:Common.Logging.ILoggerFactoryAdapter" displayName="ILoggerFactoryAdapter" namespace="Common.Logging" inherited="true" />
          <constructor name=".ctor" id="M:Common.Logging.Simple.ConsoleOutLoggerFactoryAdapter.#ctor" access="Public" contract="Normal" overload="1">
            <documentation><summary> Initializes a new instance of the <see cref="T:Common.Logging.Simple.ConsoleOutLoggerFactoryAdapter" /> class using default settings. </summary></documentation>
          </constructor>
          <constructor name=".ctor" id="M:Common.Logging.Simple.ConsoleOutLoggerFactoryAdapter.#ctor(System.Collections.Specialized.NameValueCollection)" access="Public" contract="Normal" overload="2">
            <documentation><summary> Initializes a new instance of the <see cref="T:Common.Logging.Simple.ConsoleOutLoggerFactoryAdapter" /> class. </summary>
<remarks> Looks for level, showDateTime, showLogName, dateTimeFormat items from <paramref name="properties" /> for use when the GetLogger methods are called. <see cref="T:Common.Logging.ConfigurationSectionHandler" /> for more information on how to use the standard .NET application configuraiton file (App.config/Web.config) to configure this adapter. </remarks>
<param name="properties">The name value collection, typically specified by the user in a configuration section named common/logging.</param></documentation>
            <parameter name="properties" typeId="T:System.Collections.Specialized.NameValueCollection" displayName="NameValueCollection" namespace="System.Collections.Specialized" assembly="System" nullable="false" valueType="false" />
          </constructor>
          <property name="Level" id="P:Common.Logging.Simple.ConsoleOutLoggerFactoryAdapter.Level" access="Public" contract="Normal" declaringType="Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter" declaringAssembly="Common.Logging" declaringId="P:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter.Level" get="Public" set="Public" typeId="T:Common.Logging.LogLevel" displayName="LogLevel" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="true">
            <documentation><summary> The default <see cref="T:Common.Logging.LogLevel" /> to use when creating new <see cref="T:Common.Logging.ILog" /> instances. </summary></documentation>
          </property>
          <property name="ShowLevel" id="P:Common.Logging.Simple.ConsoleOutLoggerFactoryAdapter.ShowLevel" access="Public" contract="Normal" declaringType="Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter" declaringAssembly="Common.Logging" declaringId="P:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter.ShowLevel" get="Public" set="Public" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> The default setting to use when creating new <see cref="T:Common.Logging.ILog" /> instances. </summary></documentation>
          </property>
          <property name="ShowDateTime" id="P:Common.Logging.Simple.ConsoleOutLoggerFactoryAdapter.ShowDateTime" access="Public" contract="Normal" declaringType="Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter" declaringAssembly="Common.Logging" declaringId="P:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter.ShowDateTime" get="Public" set="Public" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> The default setting to use when creating new <see cref="T:Common.Logging.ILog" /> instances. </summary></documentation>
          </property>
          <property name="ShowLogName" id="P:Common.Logging.Simple.ConsoleOutLoggerFactoryAdapter.ShowLogName" access="Public" contract="Normal" declaringType="Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter" declaringAssembly="Common.Logging" declaringId="P:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter.ShowLogName" get="Public" set="Public" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> The default setting to use when creating new <see cref="T:Common.Logging.ILog" /> instances. </summary></documentation>
          </property>
          <property name="DateTimeFormat" id="P:Common.Logging.Simple.ConsoleOutLoggerFactoryAdapter.DateTimeFormat" access="Public" contract="Normal" declaringType="Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter" declaringAssembly="Common.Logging" declaringId="P:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter.DateTimeFormat" get="Public" set="Public" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <documentation><summary> The default setting to use when creating new <see cref="T:Common.Logging.ILog" /> instances. </summary></documentation>
          </property>
          <method name="CreateLogger" displayName="CreateLogger" id="M:Common.Logging.Simple.ConsoleOutLoggerFactoryAdapter.CreateLogger(System.String,Common.Logging.LogLevel,System.Boolean,System.Boolean,System.Boolean,System.String)" access="Family" contract="Override" valueType="false" overload="1">
            <returnType typeId="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Creates a new <see cref="T:Common.Logging.Simple.ConsoleOutLogger" /> instance. </summary></documentation>
            <parameter name="name" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="level" typeId="T:Common.Logging.LogLevel" displayName="LogLevel" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="true" />
            <parameter name="showLevel" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="showDateTime" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="showLogName" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="dateTimeFormat" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="CreateLogger" displayName="CreateLogger" id="M:Common.Logging.Simple.ConsoleOutLoggerFactoryAdapter.CreateLogger(System.String)" access="Family" contract="Override" valueType="false" declaringType="Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter.CreateLogger(System.String)" overload="2">
            <returnType typeId="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Create the specified logger instance </summary></documentation>
            <parameter name="name" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="ClearLoggerCache" displayName="ClearLoggerCache" id="M:Common.Logging.Simple.ConsoleOutLoggerFactoryAdapter.ClearLoggerCache" access="Family" contract="Normal" valueType="true" declaringType="Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.ClearLoggerCache">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Purges all loggers from cache </summary></documentation>
          </method>
          <method name="GetLogger" displayName="GetLogger" id="M:Common.Logging.Simple.ConsoleOutLoggerFactoryAdapter.GetLogger(System.Type)" access="Public" contract="Final" valueType="false" declaringType="Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.GetLogger(System.Type)" overload="1">
            <returnType typeId="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Get a ILog instance by <see cref="T:System.Type" />. </summary></documentation>
            <parameter name="type" typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="GetLogger" id="M:Common.Logging.ILoggerFactoryAdapter.GetLogger(System.Type)" interface="ILoggerFactoryAdapter" interfaceId="T:Common.Logging.ILoggerFactoryAdapter" assembly="Common.Logging" declaringType="Common.Logging.ILoggerFactoryAdapter" />
          </method>
          <method name="GetLogger" displayName="GetLogger" id="M:Common.Logging.Simple.ConsoleOutLoggerFactoryAdapter.GetLogger(System.String)" access="Public" contract="Final" valueType="false" declaringType="Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.GetLogger(System.String)" overload="2">
            <returnType typeId="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Get a ILog instance by name. </summary></documentation>
            <parameter name="name" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="GetLogger" id="M:Common.Logging.ILoggerFactoryAdapter.GetLogger(System.String)" interface="ILoggerFactoryAdapter" interfaceId="T:Common.Logging.ILoggerFactoryAdapter" assembly="Common.Logging" declaringType="Common.Logging.ILoggerFactoryAdapter" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Common.Logging.Simple.ConsoleOutLoggerFactoryAdapter.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Equals" displayName="Equals" id="M:Common.Logging.Simple.ConsoleOutLoggerFactoryAdapter.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Common.Logging.Simple.ConsoleOutLoggerFactoryAdapter.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="GetType" displayName="GetType" id="M:Common.Logging.Simple.ConsoleOutLoggerFactoryAdapter.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Common.Logging.Simple.ConsoleOutLoggerFactoryAdapter.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Common.Logging.Simple.ConsoleOutLoggerFactoryAdapter.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
        </class>
        <class name="NoOpLogger" displayName="NoOpLogger" namespace="Common.Logging.Simple" id="T:Common.Logging.Simple.NoOpLogger" access="Public" sealed="true">
          <documentation><summary> Silently ignores all log messages. </summary>
<author>Gilles Bayon</author>
<author>Erich Eichinger</author></documentation>
          <attribute name="System.SerializableAttribute" />
          <implementsClass type="Common.Logging.ILog" id="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" />
          <constructor name=".ctor" id="M:Common.Logging.Simple.NoOpLogger.#ctor" access="Public" contract="Normal">
            <documentation>
              <summary>Initializes a new instance of the <see cref="T:Common.Logging.Simple.NoOpLogger" /> class.</summary>
            </documentation>
          </constructor>
          <property name="IsTraceEnabled" id="P:Common.Logging.Simple.NoOpLogger.IsTraceEnabled" access="Public" contract="Final" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Always returns <see langword="false" />. </summary></documentation>
            <implements name="IsTraceEnabled" id="P:Common.Logging.ILog.IsTraceEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsDebugEnabled" id="P:Common.Logging.Simple.NoOpLogger.IsDebugEnabled" access="Public" contract="Final" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Always returns <see langword="false" />. </summary></documentation>
            <implements name="IsDebugEnabled" id="P:Common.Logging.ILog.IsDebugEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsInfoEnabled" id="P:Common.Logging.Simple.NoOpLogger.IsInfoEnabled" access="Public" contract="Final" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Always returns <see langword="false" />. </summary></documentation>
            <implements name="IsInfoEnabled" id="P:Common.Logging.ILog.IsInfoEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsWarnEnabled" id="P:Common.Logging.Simple.NoOpLogger.IsWarnEnabled" access="Public" contract="Final" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Always returns <see langword="false" />. </summary></documentation>
            <implements name="IsWarnEnabled" id="P:Common.Logging.ILog.IsWarnEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsErrorEnabled" id="P:Common.Logging.Simple.NoOpLogger.IsErrorEnabled" access="Public" contract="Final" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Always returns <see langword="false" />. </summary></documentation>
            <implements name="IsErrorEnabled" id="P:Common.Logging.ILog.IsErrorEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsFatalEnabled" id="P:Common.Logging.Simple.NoOpLogger.IsFatalEnabled" access="Public" contract="Final" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Always returns <see langword="false" />. </summary></documentation>
            <implements name="IsFatalEnabled" id="P:Common.Logging.ILog.IsFatalEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.Simple.NoOpLogger.Trace(System.Object)" access="Public" contract="Final" valueType="true" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="message"></param></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.Simple.NoOpLogger.Trace(System.Object,System.Exception)" access="Public" contract="Final" valueType="true" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="message"></param>
<param name="e"></param></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="e" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="TraceFormat" displayName="TraceFormat" id="M:Common.Logging.Simple.NoOpLogger.TraceFormat(System.String,System.Object[])" access="Public" contract="Final" valueType="true" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="args"></param></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="TraceFormat" id="M:Common.Logging.ILog.TraceFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="TraceFormat" displayName="TraceFormat" id="M:Common.Logging.Simple.NoOpLogger.TraceFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Final" valueType="true" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="exception">The exception to log.</param>
<param name="args">the list of message format arguments</param></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="TraceFormat" id="M:Common.Logging.ILog.TraceFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="TraceFormat" displayName="TraceFormat" id="M:Common.Logging.Simple.NoOpLogger.TraceFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Final" valueType="true" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="args">the list of message format arguments</param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="TraceFormat" id="M:Common.Logging.ILog.TraceFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="TraceFormat" displayName="TraceFormat" id="M:Common.Logging.Simple.NoOpLogger.TraceFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Final" valueType="true" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="exception">The exception to log.</param>
<param name="args">the list of message format arguments</param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="TraceFormat" id="M:Common.Logging.ILog.TraceFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.Simple.NoOpLogger.Trace(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Final" valueType="true" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.Simple.NoOpLogger.Trace(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Final" valueType="true" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
<param name="exception">The exception to log, including its stack trace.</param></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.Simple.NoOpLogger.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Final" valueType="true" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.Simple.NoOpLogger.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Final" valueType="true" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
<param name="exception">The exception to log, including its stack trace.</param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.Simple.NoOpLogger.Debug(System.Object)" access="Public" contract="Final" valueType="true" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="message"></param></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.Simple.NoOpLogger.Debug(System.Object,System.Exception)" access="Public" contract="Final" valueType="true" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="message"></param>
<param name="e"></param></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="e" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="DebugFormat" displayName="DebugFormat" id="M:Common.Logging.Simple.NoOpLogger.DebugFormat(System.String,System.Object[])" access="Public" contract="Final" valueType="true" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="args"></param></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="DebugFormat" id="M:Common.Logging.ILog.DebugFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="DebugFormat" displayName="DebugFormat" id="M:Common.Logging.Simple.NoOpLogger.DebugFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Final" valueType="true" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="exception">The exception to log.</param>
<param name="args">the list of message format arguments</param></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="DebugFormat" id="M:Common.Logging.ILog.DebugFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="DebugFormat" displayName="DebugFormat" id="M:Common.Logging.Simple.NoOpLogger.DebugFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Final" valueType="true" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="args">the list of message format arguments</param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="DebugFormat" id="M:Common.Logging.ILog.DebugFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="DebugFormat" displayName="DebugFormat" id="M:Common.Logging.Simple.NoOpLogger.DebugFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Final" valueType="true" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="exception">The exception to log.</param>
<param name="args">the list of message format arguments</param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="DebugFormat" id="M:Common.Logging.ILog.DebugFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.Simple.NoOpLogger.Debug(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Final" valueType="true" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.Simple.NoOpLogger.Debug(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Final" valueType="true" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
<param name="exception">The exception to log, including its stack Debug.</param></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.Simple.NoOpLogger.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Final" valueType="true" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.Simple.NoOpLogger.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Final" valueType="true" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
<param name="exception">The exception to log, including its stack Debug.</param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.Simple.NoOpLogger.Info(System.Object)" access="Public" contract="Final" valueType="true" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="message"></param></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.Simple.NoOpLogger.Info(System.Object,System.Exception)" access="Public" contract="Final" valueType="true" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="message"></param>
<param name="e"></param></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="e" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="InfoFormat" displayName="InfoFormat" id="M:Common.Logging.Simple.NoOpLogger.InfoFormat(System.String,System.Object[])" access="Public" contract="Final" valueType="true" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="args"></param></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="InfoFormat" id="M:Common.Logging.ILog.InfoFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="InfoFormat" displayName="InfoFormat" id="M:Common.Logging.Simple.NoOpLogger.InfoFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Final" valueType="true" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="exception">The exception to log.</param>
<param name="args">the list of message format arguments</param></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="InfoFormat" id="M:Common.Logging.ILog.InfoFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="InfoFormat" displayName="InfoFormat" id="M:Common.Logging.Simple.NoOpLogger.InfoFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Final" valueType="true" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="args">the list of message format arguments</param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="InfoFormat" id="M:Common.Logging.ILog.InfoFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="InfoFormat" displayName="InfoFormat" id="M:Common.Logging.Simple.NoOpLogger.InfoFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Final" valueType="true" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="exception">The exception to log.</param>
<param name="args">the list of message format arguments</param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="InfoFormat" id="M:Common.Logging.ILog.InfoFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.Simple.NoOpLogger.Info(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Final" valueType="true" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.Simple.NoOpLogger.Info(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Final" valueType="true" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
<param name="exception">The exception to log, including its stack Info.</param></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.Simple.NoOpLogger.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Final" valueType="true" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.Simple.NoOpLogger.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Final" valueType="true" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
<param name="exception">The exception to log, including its stack Info.</param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.Simple.NoOpLogger.Warn(System.Object)" access="Public" contract="Final" valueType="true" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="message"></param></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.Simple.NoOpLogger.Warn(System.Object,System.Exception)" access="Public" contract="Final" valueType="true" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="message"></param>
<param name="e"></param></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="e" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="WarnFormat" displayName="WarnFormat" id="M:Common.Logging.Simple.NoOpLogger.WarnFormat(System.String,System.Object[])" access="Public" contract="Final" valueType="true" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="args"></param></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="WarnFormat" id="M:Common.Logging.ILog.WarnFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="WarnFormat" displayName="WarnFormat" id="M:Common.Logging.Simple.NoOpLogger.WarnFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Final" valueType="true" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="exception">The exception to log.</param>
<param name="args">the list of message format arguments</param></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="WarnFormat" id="M:Common.Logging.ILog.WarnFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="WarnFormat" displayName="WarnFormat" id="M:Common.Logging.Simple.NoOpLogger.WarnFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Final" valueType="true" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting Warnrmation.</param>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="args">the list of message format arguments</param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="WarnFormat" id="M:Common.Logging.ILog.WarnFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="WarnFormat" displayName="WarnFormat" id="M:Common.Logging.Simple.NoOpLogger.WarnFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Final" valueType="true" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting Warnrmation.</param>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="exception">The exception to log.</param>
<param name="args">the list of message format arguments</param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="WarnFormat" id="M:Common.Logging.ILog.WarnFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.Simple.NoOpLogger.Warn(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Final" valueType="true" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.Simple.NoOpLogger.Warn(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Final" valueType="true" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
<param name="exception">The exception to log, including its stack Warn.</param></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.Simple.NoOpLogger.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Final" valueType="true" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.Simple.NoOpLogger.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Final" valueType="true" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
<param name="exception">The exception to log, including its stack Warn.</param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.Simple.NoOpLogger.Error(System.Object)" access="Public" contract="Final" valueType="true" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="message"></param></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.Simple.NoOpLogger.Error(System.Object,System.Exception)" access="Public" contract="Final" valueType="true" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="message"></param>
<param name="e"></param></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="e" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ErrorFormat" displayName="ErrorFormat" id="M:Common.Logging.Simple.NoOpLogger.ErrorFormat(System.String,System.Object[])" access="Public" contract="Final" valueType="true" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="args"></param></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="ErrorFormat" id="M:Common.Logging.ILog.ErrorFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ErrorFormat" displayName="ErrorFormat" id="M:Common.Logging.Simple.NoOpLogger.ErrorFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Final" valueType="true" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="exception">The exception to log.</param>
<param name="args">the list of message format arguments</param></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="ErrorFormat" id="M:Common.Logging.ILog.ErrorFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ErrorFormat" displayName="ErrorFormat" id="M:Common.Logging.Simple.NoOpLogger.ErrorFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Final" valueType="true" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting Errorrmation.</param>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="args">the list of message format arguments</param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="ErrorFormat" id="M:Common.Logging.ILog.ErrorFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ErrorFormat" displayName="ErrorFormat" id="M:Common.Logging.Simple.NoOpLogger.ErrorFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Final" valueType="true" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting Errorrmation.</param>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="exception">The exception to log.</param>
<param name="args">the list of message format arguments</param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="ErrorFormat" id="M:Common.Logging.ILog.ErrorFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.Simple.NoOpLogger.Error(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Final" valueType="true" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.Simple.NoOpLogger.Error(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Final" valueType="true" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
<param name="exception">The exception to log, including its stack Error.</param></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.Simple.NoOpLogger.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Final" valueType="true" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.Simple.NoOpLogger.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Final" valueType="true" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
<param name="exception">The exception to log, including its stack Error.</param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.Simple.NoOpLogger.Fatal(System.Object)" access="Public" contract="Final" valueType="true" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="message"></param></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.Simple.NoOpLogger.Fatal(System.Object,System.Exception)" access="Public" contract="Final" valueType="true" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="message"></param>
<param name="e"></param></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="e" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="FatalFormat" displayName="FatalFormat" id="M:Common.Logging.Simple.NoOpLogger.FatalFormat(System.String,System.Object[])" access="Public" contract="Final" valueType="true" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="args"></param></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="FatalFormat" id="M:Common.Logging.ILog.FatalFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="FatalFormat" displayName="FatalFormat" id="M:Common.Logging.Simple.NoOpLogger.FatalFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Final" valueType="true" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="exception">The exception to log.</param>
<param name="args">the list of message format arguments</param></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="FatalFormat" id="M:Common.Logging.ILog.FatalFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="FatalFormat" displayName="FatalFormat" id="M:Common.Logging.Simple.NoOpLogger.FatalFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Final" valueType="true" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting Fatalrmation.</param>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="args">the list of message format arguments</param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="FatalFormat" id="M:Common.Logging.ILog.FatalFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="FatalFormat" displayName="FatalFormat" id="M:Common.Logging.Simple.NoOpLogger.FatalFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Final" valueType="true" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting Fatalrmation.</param>
<param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
<param name="exception">The exception to log.</param>
<param name="args">the list of message format arguments</param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="FatalFormat" id="M:Common.Logging.ILog.FatalFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.Simple.NoOpLogger.Fatal(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Final" valueType="true" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.Simple.NoOpLogger.Fatal(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Final" valueType="true" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
<param name="exception">The exception to log, including its stack Fatal.</param></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.Simple.NoOpLogger.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Final" valueType="true" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.Simple.NoOpLogger.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Final" valueType="true" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Ignores message. </summary>
<param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
<param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
<param name="exception">The exception to log, including its stack Fatal.</param></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Common.Logging.Simple.NoOpLogger.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Equals" displayName="Equals" id="M:Common.Logging.Simple.NoOpLogger.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Common.Logging.Simple.NoOpLogger.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="GetType" displayName="GetType" id="M:Common.Logging.Simple.NoOpLogger.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Common.Logging.Simple.NoOpLogger.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Common.Logging.Simple.NoOpLogger.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
        </class>
        <class name="NoOpLoggerFactoryAdapter" displayName="NoOpLoggerFactoryAdapter" namespace="Common.Logging.Simple" id="T:Common.Logging.Simple.NoOpLoggerFactoryAdapter" access="Public" sealed="true">
          <documentation><summary> Factory for creating <see cref="T:Common.Logging.ILog" /> instances that silently ignores logging requests. </summary>
<seealso cref="P:Common.Logging.LogManager.Adapter" />
<seealso cref="T:Common.Logging.ConfigurationSectionHandler" />
<author>Gilles Bayon</author></documentation>
          <implementsClass type="Common.Logging.ILoggerFactoryAdapter" id="T:Common.Logging.ILoggerFactoryAdapter" displayName="ILoggerFactoryAdapter" namespace="Common.Logging" />
          <constructor name=".ctor" id="M:Common.Logging.Simple.NoOpLoggerFactoryAdapter.#ctor" access="Public" contract="Normal" overload="1">
            <documentation><summary> Constructor </summary></documentation>
          </constructor>
          <constructor name=".ctor" id="M:Common.Logging.Simple.NoOpLoggerFactoryAdapter.#ctor(System.Collections.Specialized.NameValueCollection)" access="Public" contract="Normal" overload="2">
            <documentation><summary> Constructor </summary></documentation>
            <parameter name="properties" typeId="T:System.Collections.Specialized.NameValueCollection" displayName="NameValueCollection" namespace="System.Collections.Specialized" assembly="System" nullable="false" valueType="false" />
          </constructor>
          <method name="GetLogger" displayName="GetLogger" id="M:Common.Logging.Simple.NoOpLoggerFactoryAdapter.GetLogger(System.Type)" access="Public" contract="Final" valueType="false">
            <returnType typeId="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Get a ILog instance by type </summary>
<param name="type"></param>
<returns></returns></documentation>
            <parameter name="type" typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="GetLogger" id="M:Common.Logging.ILoggerFactoryAdapter.GetLogger(System.Type)" interface="ILoggerFactoryAdapter" interfaceId="T:Common.Logging.ILoggerFactoryAdapter" assembly="Common.Logging" declaringType="Common.Logging.ILoggerFactoryAdapter" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Common.Logging.Simple.NoOpLoggerFactoryAdapter.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Equals" displayName="Equals" id="M:Common.Logging.Simple.NoOpLoggerFactoryAdapter.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Common.Logging.Simple.NoOpLoggerFactoryAdapter.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="GetType" displayName="GetType" id="M:Common.Logging.Simple.NoOpLoggerFactoryAdapter.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Common.Logging.Simple.NoOpLoggerFactoryAdapter.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Common.Logging.Simple.NoOpLoggerFactoryAdapter.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
        </class>
        <class name="TraceLogger" displayName="TraceLogger" namespace="Common.Logging.Simple" id="T:Common.Logging.Simple.TraceLogger" access="Public">
          <documentation><summary> Logger sending everything to the trace output stream using <see cref="T:System.Diagnostics.Trace" />. </summary>
<remarks> Beware not to use <see cref="T:Common.Logging.Simple.CommonLoggingTraceListener" /> in combination with this logger as this would result in an endless loop for obvious reasons! </remarks>
<seealso cref="P:Common.Logging.LogManager.Adapter" />
<seealso cref="T:Common.Logging.ConfigurationSectionHandler" />
<author>Gilles Bayon</author>
<author>Erich Eichinger</author></documentation>
          <attribute name="System.SerializableAttribute" />
          <baseType name="AbstractSimpleLogger" id="T:Common.Logging.Simple.AbstractSimpleLogger" displayName="AbstractSimpleLogger" namespace="Common.Logging.Simple" assembly="Common.Logging">
            <baseType name="AbstractLogger" id="T:Common.Logging.Factory.AbstractLogger" displayName="AbstractLogger" namespace="Common.Logging.Factory" assembly="Common.Logging" />
          </baseType>
          <implementsClass type="Common.Logging.ILog" id="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" inherited="true" />
          <implementsClass type="System.Runtime.Serialization.IDeserializationCallback" id="T:System.Runtime.Serialization.IDeserializationCallback" displayName="IDeserializationCallback" namespace="System.Runtime.Serialization" />
          <constructor name=".ctor" id="M:Common.Logging.Simple.TraceLogger.#ctor(System.Boolean,System.String,Common.Logging.LogLevel,System.Boolean,System.Boolean,System.Boolean,System.String)" access="Public" contract="Normal">
            <documentation><summary> Creates a new TraceLogger instance. </summary>
<param name="useTraceSource">whether to use <see cref="T:System.Diagnostics.TraceSource" /> or <see cref="T:System.Diagnostics.Trace" /> for logging.</param>
<param name="logName">the name of this logger</param>
<param name="logLevel">the default log level to use</param>
<param name="showLevel">Include the current log level in the log message.</param>
<param name="showDateTime">Include the current time in the log message.</param>
<param name="showLogName">Include the instance name in the log message.</param>
<param name="dateTimeFormat">The date and time format to use in the log message.</param></documentation>
            <parameter name="useTraceSource" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="logName" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="logLevel" typeId="T:Common.Logging.LogLevel" displayName="LogLevel" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="true" />
            <parameter name="showLevel" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="showDateTime" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="showLogName" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="dateTimeFormat" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </constructor>
          <property name="Name" id="P:Common.Logging.Simple.TraceLogger.Name" access="Public" contract="Normal" declaringType="Common.Logging.Simple.AbstractSimpleLogger" declaringAssembly="Common.Logging" declaringId="P:Common.Logging.Simple.AbstractSimpleLogger.Name" get="Public" set="false" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <documentation><summary> The name of the logger. </summary></documentation>
          </property>
          <property name="ShowLevel" id="P:Common.Logging.Simple.TraceLogger.ShowLevel" access="Public" contract="Normal" declaringType="Common.Logging.Simple.AbstractSimpleLogger" declaringAssembly="Common.Logging" declaringId="P:Common.Logging.Simple.AbstractSimpleLogger.ShowLevel" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Include the current log level in the log message. </summary></documentation>
          </property>
          <property name="ShowDateTime" id="P:Common.Logging.Simple.TraceLogger.ShowDateTime" access="Public" contract="Normal" declaringType="Common.Logging.Simple.AbstractSimpleLogger" declaringAssembly="Common.Logging" declaringId="P:Common.Logging.Simple.AbstractSimpleLogger.ShowDateTime" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Include the current time in the log message. </summary></documentation>
          </property>
          <property name="ShowLogName" id="P:Common.Logging.Simple.TraceLogger.ShowLogName" access="Public" contract="Normal" declaringType="Common.Logging.Simple.AbstractSimpleLogger" declaringAssembly="Common.Logging" declaringId="P:Common.Logging.Simple.AbstractSimpleLogger.ShowLogName" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Include the instance name in the log message. </summary></documentation>
          </property>
          <property name="CurrentLogLevel" id="P:Common.Logging.Simple.TraceLogger.CurrentLogLevel" access="Public" contract="Normal" declaringType="Common.Logging.Simple.AbstractSimpleLogger" declaringAssembly="Common.Logging" declaringId="P:Common.Logging.Simple.AbstractSimpleLogger.CurrentLogLevel" get="Public" set="Public" typeId="T:Common.Logging.LogLevel" displayName="LogLevel" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="true">
            <documentation><summary> The current logging threshold. Messages recieved that are beneath this threshold will not be logged. </summary></documentation>
          </property>
          <property name="DateTimeFormat" id="P:Common.Logging.Simple.TraceLogger.DateTimeFormat" access="Public" contract="Normal" declaringType="Common.Logging.Simple.AbstractSimpleLogger" declaringAssembly="Common.Logging" declaringId="P:Common.Logging.Simple.AbstractSimpleLogger.DateTimeFormat" get="Public" set="false" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <documentation><summary> The date and time format to use in the log message. </summary></documentation>
          </property>
          <property name="HasDateTimeFormat" id="P:Common.Logging.Simple.TraceLogger.HasDateTimeFormat" access="Public" contract="Normal" declaringType="Common.Logging.Simple.AbstractSimpleLogger" declaringAssembly="Common.Logging" declaringId="P:Common.Logging.Simple.AbstractSimpleLogger.HasDateTimeFormat" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Determines Whether <see cref="P:Common.Logging.Simple.AbstractSimpleLogger.DateTimeFormat" /> is set. </summary></documentation>
          </property>
          <property name="IsTraceEnabled" id="P:Common.Logging.Simple.TraceLogger.IsTraceEnabled" access="Public" contract="Override" declaringType="Common.Logging.Simple.AbstractSimpleLogger" declaringAssembly="Common.Logging" declaringId="P:Common.Logging.Simple.AbstractSimpleLogger.IsTraceEnabled" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Returns <see langword="true" /> if the current <see cref="T:Common.Logging.LogLevel" /> is greater than or equal to <see cref="F:Common.Logging.LogLevel.Trace" />. If it is, all messages will be sent to <see cref="P:System.Console.Out" />. </summary></documentation>
            <implements name="IsTraceEnabled" id="P:Common.Logging.ILog.IsTraceEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsDebugEnabled" id="P:Common.Logging.Simple.TraceLogger.IsDebugEnabled" access="Public" contract="Override" declaringType="Common.Logging.Simple.AbstractSimpleLogger" declaringAssembly="Common.Logging" declaringId="P:Common.Logging.Simple.AbstractSimpleLogger.IsDebugEnabled" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Returns <see langword="true" /> if the current <see cref="T:Common.Logging.LogLevel" /> is greater than or equal to <see cref="F:Common.Logging.LogLevel.Debug" />. If it is, all messages will be sent to <see cref="P:System.Console.Out" />. </summary></documentation>
            <implements name="IsDebugEnabled" id="P:Common.Logging.ILog.IsDebugEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsInfoEnabled" id="P:Common.Logging.Simple.TraceLogger.IsInfoEnabled" access="Public" contract="Override" declaringType="Common.Logging.Simple.AbstractSimpleLogger" declaringAssembly="Common.Logging" declaringId="P:Common.Logging.Simple.AbstractSimpleLogger.IsInfoEnabled" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Returns <see langword="true" /> if the current <see cref="T:Common.Logging.LogLevel" /> is greater than or equal to <see cref="F:Common.Logging.LogLevel.Info" />. If it is, only messages with a <see cref="T:Common.Logging.LogLevel" /> of <see cref="F:Common.Logging.LogLevel.Info" />, <see cref="F:Common.Logging.LogLevel.Warn" />, <see cref="F:Common.Logging.LogLevel.Error" />, and <see cref="F:Common.Logging.LogLevel.Fatal" /> will be sent to <see cref="P:System.Console.Out" />. </summary></documentation>
            <implements name="IsInfoEnabled" id="P:Common.Logging.ILog.IsInfoEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsWarnEnabled" id="P:Common.Logging.Simple.TraceLogger.IsWarnEnabled" access="Public" contract="Override" declaringType="Common.Logging.Simple.AbstractSimpleLogger" declaringAssembly="Common.Logging" declaringId="P:Common.Logging.Simple.AbstractSimpleLogger.IsWarnEnabled" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Returns <see langword="true" /> if the current <see cref="T:Common.Logging.LogLevel" /> is greater than or equal to <see cref="F:Common.Logging.LogLevel.Warn" />. If it is, only messages with a <see cref="T:Common.Logging.LogLevel" /> of <see cref="F:Common.Logging.LogLevel.Warn" />, <see cref="F:Common.Logging.LogLevel.Error" />, and <see cref="F:Common.Logging.LogLevel.Fatal" /> will be sent to <see cref="P:System.Console.Out" />. </summary></documentation>
            <implements name="IsWarnEnabled" id="P:Common.Logging.ILog.IsWarnEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsErrorEnabled" id="P:Common.Logging.Simple.TraceLogger.IsErrorEnabled" access="Public" contract="Override" declaringType="Common.Logging.Simple.AbstractSimpleLogger" declaringAssembly="Common.Logging" declaringId="P:Common.Logging.Simple.AbstractSimpleLogger.IsErrorEnabled" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Returns <see langword="true" /> if the current <see cref="T:Common.Logging.LogLevel" /> is greater than or equal to <see cref="F:Common.Logging.LogLevel.Error" />. If it is, only messages with a <see cref="T:Common.Logging.LogLevel" /> of <see cref="F:Common.Logging.LogLevel.Error" /> and <see cref="F:Common.Logging.LogLevel.Fatal" /> will be sent to <see cref="P:System.Console.Out" />. </summary></documentation>
            <implements name="IsErrorEnabled" id="P:Common.Logging.ILog.IsErrorEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsFatalEnabled" id="P:Common.Logging.Simple.TraceLogger.IsFatalEnabled" access="Public" contract="Override" declaringType="Common.Logging.Simple.AbstractSimpleLogger" declaringAssembly="Common.Logging" declaringId="P:Common.Logging.Simple.AbstractSimpleLogger.IsFatalEnabled" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Returns <see langword="true" /> if the current <see cref="T:Common.Logging.LogLevel" /> is greater than or equal to <see cref="F:Common.Logging.LogLevel.Fatal" />. If it is, only messages with a <see cref="T:Common.Logging.LogLevel" /> of <see cref="F:Common.Logging.LogLevel.Fatal" /> will be sent to <see cref="P:System.Console.Out" />. </summary></documentation>
            <implements name="IsFatalEnabled" id="P:Common.Logging.ILog.IsFatalEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <method name="IsLevelEnabled" displayName="IsLevelEnabled" id="M:Common.Logging.Simple.TraceLogger.IsLevelEnabled(Common.Logging.LogLevel)" access="Family" contract="Override" valueType="true">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Determines if the given log level is currently enabled. checks <see cref="P:System.Diagnostics.TraceSource.Switch" /> if <see cref="P:Common.Logging.Simple.TraceLoggerFactoryAdapter.UseTraceSource" /> is true. </summary></documentation>
            <parameter name="level" typeId="T:Common.Logging.LogLevel" displayName="LogLevel" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="true" />
          </method>
          <method name="WriteInternal" displayName="WriteInternal" id="M:Common.Logging.Simple.TraceLogger.WriteInternal(Common.Logging.LogLevel,System.Object,System.Exception)" access="Family" contract="Override" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Do the actual logging. </summary>
<param name="level"></param>
<param name="message"></param>
<param name="e"></param></documentation>
            <parameter name="level" typeId="T:Common.Logging.LogLevel" displayName="LogLevel" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="true" />
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="e" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="OnDeserialization" displayName="OnDeserialization" id="M:Common.Logging.Simple.TraceLogger.OnDeserialization(System.Object)" access="Public" contract="Virtual" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Called after deserialization completed. </summary></documentation>
            <parameter name="sender" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="OnDeserialization" id="M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)" interface="IDeserializationCallback" interfaceId="T:System.Runtime.Serialization.IDeserializationCallback" assembly="mscorlib" declaringType="System.Runtime.Serialization.IDeserializationCallback" />
          </method>
          <method name="FormatOutput" displayName="FormatOutput" id="M:Common.Logging.Simple.TraceLogger.FormatOutput(System.Text.StringBuilder,Common.Logging.LogLevel,System.Object,System.Exception)" access="Family" contract="Virtual" valueType="true" declaringType="Common.Logging.Simple.AbstractSimpleLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Simple.AbstractSimpleLogger.FormatOutput(System.Text.StringBuilder,Common.Logging.LogLevel,System.Object,System.Exception)">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Appends the formatted message to the specified <see cref="T:System.Text.StringBuilder" />. </summary></documentation>
            <parameter name="stringBuilder" typeId="T:System.Text.StringBuilder" displayName="StringBuilder" namespace="System.Text" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="level" typeId="T:Common.Logging.LogLevel" displayName="LogLevel" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="true" />
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="e" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetWriteHandler" displayName="GetWriteHandler" id="M:Common.Logging.Simple.TraceLogger.GetWriteHandler" access="Family" contract="Virtual" valueType="false" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.GetWriteHandler">
            <returnType typeId="T:Common.Logging.Factory.AbstractLogger.WriteHandler" displayName="AbstractLogger.WriteHandler" namespace="Common.Logging.Factory" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Override this method to use a different method than <see cref="M:Common.Logging.Factory.AbstractLogger.WriteInternal(Common.Logging.LogLevel,System.Object,System.Exception)" /> for writing log events to the underlying log system. </summary></documentation>
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.Simple.TraceLogger.Trace(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.Simple.TraceLogger.Trace(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Trace" /> level including the stack trace of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="TraceFormat" displayName="TraceFormat" id="M:Common.Logging.Simple.TraceLogger.TraceFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.TraceFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="TraceFormat" id="M:Common.Logging.ILog.TraceFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="TraceFormat" displayName="TraceFormat" id="M:Common.Logging.Simple.TraceLogger.TraceFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.TraceFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="TraceFormat" id="M:Common.Logging.ILog.TraceFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="TraceFormat" displayName="TraceFormat" id="M:Common.Logging.Simple.TraceLogger.TraceFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.TraceFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="TraceFormat" id="M:Common.Logging.ILog.TraceFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="TraceFormat" displayName="TraceFormat" id="M:Common.Logging.Simple.TraceLogger.TraceFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.TraceFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="TraceFormat" id="M:Common.Logging.ILog.TraceFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.Simple.TraceLogger.Trace(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.Simple.TraceLogger.Trace(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.Simple.TraceLogger.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.Simple.TraceLogger.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.Simple.TraceLogger.Debug(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.Simple.TraceLogger.Debug(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Debug" /> level including the stack Debug of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="DebugFormat" displayName="DebugFormat" id="M:Common.Logging.Simple.TraceLogger.DebugFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.DebugFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="DebugFormat" id="M:Common.Logging.ILog.DebugFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="DebugFormat" displayName="DebugFormat" id="M:Common.Logging.Simple.TraceLogger.DebugFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.DebugFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="DebugFormat" id="M:Common.Logging.ILog.DebugFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="DebugFormat" displayName="DebugFormat" id="M:Common.Logging.Simple.TraceLogger.DebugFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.DebugFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="DebugFormat" id="M:Common.Logging.ILog.DebugFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="DebugFormat" displayName="DebugFormat" id="M:Common.Logging.Simple.TraceLogger.DebugFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.DebugFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="DebugFormat" id="M:Common.Logging.ILog.DebugFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.Simple.TraceLogger.Debug(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.Simple.TraceLogger.Debug(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.Simple.TraceLogger.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.Simple.TraceLogger.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.Simple.TraceLogger.Info(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.Simple.TraceLogger.Info(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Info" /> level including the stack Info of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="InfoFormat" displayName="InfoFormat" id="M:Common.Logging.Simple.TraceLogger.InfoFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.InfoFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="InfoFormat" id="M:Common.Logging.ILog.InfoFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="InfoFormat" displayName="InfoFormat" id="M:Common.Logging.Simple.TraceLogger.InfoFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.InfoFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="InfoFormat" id="M:Common.Logging.ILog.InfoFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="InfoFormat" displayName="InfoFormat" id="M:Common.Logging.Simple.TraceLogger.InfoFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.InfoFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="InfoFormat" id="M:Common.Logging.ILog.InfoFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="InfoFormat" displayName="InfoFormat" id="M:Common.Logging.Simple.TraceLogger.InfoFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.InfoFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="InfoFormat" id="M:Common.Logging.ILog.InfoFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.Simple.TraceLogger.Info(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.Simple.TraceLogger.Info(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.Simple.TraceLogger.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.Simple.TraceLogger.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.Simple.TraceLogger.Warn(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.Simple.TraceLogger.Warn(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Warn" /> level including the stack Warn of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="WarnFormat" displayName="WarnFormat" id="M:Common.Logging.Simple.TraceLogger.WarnFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.WarnFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="WarnFormat" id="M:Common.Logging.ILog.WarnFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="WarnFormat" displayName="WarnFormat" id="M:Common.Logging.Simple.TraceLogger.WarnFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.WarnFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="WarnFormat" id="M:Common.Logging.ILog.WarnFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="WarnFormat" displayName="WarnFormat" id="M:Common.Logging.Simple.TraceLogger.WarnFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.WarnFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="WarnFormat" id="M:Common.Logging.ILog.WarnFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="WarnFormat" displayName="WarnFormat" id="M:Common.Logging.Simple.TraceLogger.WarnFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.WarnFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="WarnFormat" id="M:Common.Logging.ILog.WarnFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.Simple.TraceLogger.Warn(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.Simple.TraceLogger.Warn(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.Simple.TraceLogger.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.Simple.TraceLogger.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.Simple.TraceLogger.Error(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.Simple.TraceLogger.Error(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Error" /> level including the stack Error of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ErrorFormat" displayName="ErrorFormat" id="M:Common.Logging.Simple.TraceLogger.ErrorFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.ErrorFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="ErrorFormat" id="M:Common.Logging.ILog.ErrorFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ErrorFormat" displayName="ErrorFormat" id="M:Common.Logging.Simple.TraceLogger.ErrorFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.ErrorFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="ErrorFormat" id="M:Common.Logging.ILog.ErrorFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ErrorFormat" displayName="ErrorFormat" id="M:Common.Logging.Simple.TraceLogger.ErrorFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.ErrorFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="ErrorFormat" id="M:Common.Logging.ILog.ErrorFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ErrorFormat" displayName="ErrorFormat" id="M:Common.Logging.Simple.TraceLogger.ErrorFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.ErrorFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="ErrorFormat" id="M:Common.Logging.ILog.ErrorFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.Simple.TraceLogger.Error(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.Simple.TraceLogger.Error(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.Simple.TraceLogger.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.Simple.TraceLogger.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.Simple.TraceLogger.Fatal(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.Simple.TraceLogger.Fatal(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level including the stack Fatal of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="FatalFormat" displayName="FatalFormat" id="M:Common.Logging.Simple.TraceLogger.FatalFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.FatalFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="FatalFormat" id="M:Common.Logging.ILog.FatalFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="FatalFormat" displayName="FatalFormat" id="M:Common.Logging.Simple.TraceLogger.FatalFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.FatalFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="FatalFormat" id="M:Common.Logging.ILog.FatalFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="FatalFormat" displayName="FatalFormat" id="M:Common.Logging.Simple.TraceLogger.FatalFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.FatalFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="FatalFormat" id="M:Common.Logging.ILog.FatalFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="FatalFormat" displayName="FatalFormat" id="M:Common.Logging.Simple.TraceLogger.FatalFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.FatalFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="FatalFormat" id="M:Common.Logging.ILog.FatalFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.Simple.TraceLogger.Fatal(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.Simple.TraceLogger.Fatal(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.Simple.TraceLogger.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.Simple.TraceLogger.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Common.Logging.Simple.TraceLogger.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Equals" displayName="Equals" id="M:Common.Logging.Simple.TraceLogger.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Common.Logging.Simple.TraceLogger.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="GetType" displayName="GetType" id="M:Common.Logging.Simple.TraceLogger.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Common.Logging.Simple.TraceLogger.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Common.Logging.Simple.TraceLogger.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
        </class>
        <class name="TraceLoggerFactoryAdapter" displayName="TraceLoggerFactoryAdapter" namespace="Common.Logging.Simple" id="T:Common.Logging.Simple.TraceLoggerFactoryAdapter" access="Public">
          <documentation><summary> Factory for creating <see cref="T:Common.Logging.ILog" /> instances that send everything to the <see cref="T:System.Diagnostics.Trace" /> output stream. </summary>
<remarks> Beware not to use <see cref="T:Common.Logging.Simple.CommonLoggingTraceListener" /> in combination with this logger factory as this would result in an endless loop for obvious reasons! </remarks>
<seealso cref="T:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter" />
<seealso cref="P:Common.Logging.LogManager.Adapter" />
<seealso cref="T:Common.Logging.ConfigurationSectionHandler" />
<author>Gilles Bayon</author>
<author>Mark Pollack</author>
<author>Erich Eichinger</author></documentation>
          <baseType name="AbstractSimpleLoggerFactoryAdapter" id="T:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter" displayName="AbstractSimpleLoggerFactoryAdapter" namespace="Common.Logging.Simple" assembly="Common.Logging">
            <baseType name="AbstractCachingLoggerFactoryAdapter" id="T:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter" displayName="AbstractCachingLoggerFactoryAdapter" namespace="Common.Logging.Factory" assembly="Common.Logging" />
          </baseType>
          <implementsClass type="Common.Logging.ILoggerFactoryAdapter" id="T:Common.Logging.ILoggerFactoryAdapter" displayName="ILoggerFactoryAdapter" namespace="Common.Logging" inherited="true" />
          <constructor name=".ctor" id="M:Common.Logging.Simple.TraceLoggerFactoryAdapter.#ctor" access="Public" contract="Normal" overload="1">
            <documentation><summary> Initializes a new instance of the <see cref="T:Common.Logging.Simple.TraceLoggerFactoryAdapter" /> class using default settings. </summary></documentation>
          </constructor>
          <constructor name=".ctor" id="M:Common.Logging.Simple.TraceLoggerFactoryAdapter.#ctor(System.Collections.Specialized.NameValueCollection)" access="Public" contract="Normal" overload="2">
            <documentation><summary> Initializes a new instance of the <see cref="T:Common.Logging.Simple.TraceLoggerFactoryAdapter" /> class. </summary>
<remarks> Looks for level, showDateTime, showLogName, dateTimeFormat items from <paramref name="properties" /> for use when the GetLogger methods are called. <see cref="T:Common.Logging.ConfigurationSectionHandler" /> for more information on how to use the standard .NET application configuraiton file (App.config/Web.config) to configure this adapter. </remarks>
<param name="properties">The name value collection, typically specified by the user in a configuration section named common/logging.</param></documentation>
            <parameter name="properties" typeId="T:System.Collections.Specialized.NameValueCollection" displayName="NameValueCollection" namespace="System.Collections.Specialized" assembly="System" nullable="false" valueType="false" />
          </constructor>
          <property name="UseTraceSource" id="P:Common.Logging.Simple.TraceLoggerFactoryAdapter.UseTraceSource" access="Public" contract="Normal" get="Public" set="Public" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Whether to use <see cref="T:System.Diagnostics.Trace" />.<c>TraceXXXX(string,object[])</c> methods for logging or <see cref="T:System.Diagnostics.TraceSource" />. </summary></documentation>
          </property>
          <property name="Level" id="P:Common.Logging.Simple.TraceLoggerFactoryAdapter.Level" access="Public" contract="Normal" declaringType="Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter" declaringAssembly="Common.Logging" declaringId="P:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter.Level" get="Public" set="Public" typeId="T:Common.Logging.LogLevel" displayName="LogLevel" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="true">
            <documentation><summary> The default <see cref="T:Common.Logging.LogLevel" /> to use when creating new <see cref="T:Common.Logging.ILog" /> instances. </summary></documentation>
          </property>
          <property name="ShowLevel" id="P:Common.Logging.Simple.TraceLoggerFactoryAdapter.ShowLevel" access="Public" contract="Normal" declaringType="Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter" declaringAssembly="Common.Logging" declaringId="P:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter.ShowLevel" get="Public" set="Public" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> The default setting to use when creating new <see cref="T:Common.Logging.ILog" /> instances. </summary></documentation>
          </property>
          <property name="ShowDateTime" id="P:Common.Logging.Simple.TraceLoggerFactoryAdapter.ShowDateTime" access="Public" contract="Normal" declaringType="Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter" declaringAssembly="Common.Logging" declaringId="P:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter.ShowDateTime" get="Public" set="Public" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> The default setting to use when creating new <see cref="T:Common.Logging.ILog" /> instances. </summary></documentation>
          </property>
          <property name="ShowLogName" id="P:Common.Logging.Simple.TraceLoggerFactoryAdapter.ShowLogName" access="Public" contract="Normal" declaringType="Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter" declaringAssembly="Common.Logging" declaringId="P:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter.ShowLogName" get="Public" set="Public" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> The default setting to use when creating new <see cref="T:Common.Logging.ILog" /> instances. </summary></documentation>
          </property>
          <property name="DateTimeFormat" id="P:Common.Logging.Simple.TraceLoggerFactoryAdapter.DateTimeFormat" access="Public" contract="Normal" declaringType="Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter" declaringAssembly="Common.Logging" declaringId="P:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter.DateTimeFormat" get="Public" set="Public" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <documentation><summary> The default setting to use when creating new <see cref="T:Common.Logging.ILog" /> instances. </summary></documentation>
          </property>
          <method name="CreateLogger" displayName="CreateLogger" id="M:Common.Logging.Simple.TraceLoggerFactoryAdapter.CreateLogger(System.String,Common.Logging.LogLevel,System.Boolean,System.Boolean,System.Boolean,System.String)" access="Family" contract="Override" valueType="false" overload="1">
            <returnType typeId="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Creates a new <see cref="T:Common.Logging.Simple.TraceLogger" /> instance. </summary></documentation>
            <parameter name="name" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="level" typeId="T:Common.Logging.LogLevel" displayName="LogLevel" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="true" />
            <parameter name="showLevel" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="showDateTime" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="showLogName" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="dateTimeFormat" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="CreateLogger" displayName="CreateLogger" id="M:Common.Logging.Simple.TraceLoggerFactoryAdapter.CreateLogger(System.String)" access="Family" contract="Override" valueType="false" declaringType="Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter.CreateLogger(System.String)" overload="2">
            <returnType typeId="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Create the specified logger instance </summary></documentation>
            <parameter name="name" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="ClearLoggerCache" displayName="ClearLoggerCache" id="M:Common.Logging.Simple.TraceLoggerFactoryAdapter.ClearLoggerCache" access="Family" contract="Normal" valueType="true" declaringType="Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.ClearLoggerCache">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Purges all loggers from cache </summary></documentation>
          </method>
          <method name="GetLogger" displayName="GetLogger" id="M:Common.Logging.Simple.TraceLoggerFactoryAdapter.GetLogger(System.Type)" access="Public" contract="Final" valueType="false" declaringType="Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.GetLogger(System.Type)" overload="1">
            <returnType typeId="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Get a ILog instance by <see cref="T:System.Type" />. </summary></documentation>
            <parameter name="type" typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="GetLogger" id="M:Common.Logging.ILoggerFactoryAdapter.GetLogger(System.Type)" interface="ILoggerFactoryAdapter" interfaceId="T:Common.Logging.ILoggerFactoryAdapter" assembly="Common.Logging" declaringType="Common.Logging.ILoggerFactoryAdapter" />
          </method>
          <method name="GetLogger" displayName="GetLogger" id="M:Common.Logging.Simple.TraceLoggerFactoryAdapter.GetLogger(System.String)" access="Public" contract="Final" valueType="false" declaringType="Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.GetLogger(System.String)" overload="2">
            <returnType typeId="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Get a ILog instance by name. </summary></documentation>
            <parameter name="name" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="GetLogger" id="M:Common.Logging.ILoggerFactoryAdapter.GetLogger(System.String)" interface="ILoggerFactoryAdapter" interfaceId="T:Common.Logging.ILoggerFactoryAdapter" assembly="Common.Logging" declaringType="Common.Logging.ILoggerFactoryAdapter" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Common.Logging.Simple.TraceLoggerFactoryAdapter.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Equals" displayName="Equals" id="M:Common.Logging.Simple.TraceLoggerFactoryAdapter.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Common.Logging.Simple.TraceLoggerFactoryAdapter.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="GetType" displayName="GetType" id="M:Common.Logging.Simple.TraceLoggerFactoryAdapter.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Common.Logging.Simple.TraceLoggerFactoryAdapter.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Common.Logging.Simple.TraceLoggerFactoryAdapter.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
        </class>
      </namespace>
    </module>
  </assembly>
  <assembly name="Common.Logging.EntLib" version="2.0.0.0">
    <documentation><summary>
  <para> This assembly contains the adapter to plug Microsoft Enterprise Logging Library 3.1. into the Common.Logging infrastructure. </para>
  <para>For an example on how to configure <list type="bullet"><item>Common.Logging to render its output to Entlib, see <see cref="T:Common.Logging.EntLib.EntLibLoggerFactoryAdapter" />.</item><item>Entlib to render its output to Common.Logging use <see cref="T:Common.Logging.EntLib.CommonLoggingEntlibTraceListener" />.</item></list></para>
</summary></documentation>
    <assemblyReference name="Microsoft.Practices.EnterpriseLibrary.Logging" />
    <assemblyReference name="mscorlib" />
    <assemblyReference name="Common.Logging" />
    <assemblyReference name="System" />
    <assemblyReference name="Microsoft.Practices.ObjectBuilder" />
    <assemblyReference name="Microsoft.Practices.EnterpriseLibrary.Common" />
    <assemblyReference name="System.Configuration" />
    <attribute name="System.Reflection.AssemblyTrademarkAttribute" target="assembly">
      <property name="Trademark" type="System.String" value="Apache License, Version 2.0" />
    </attribute>
    <attribute name="System.Reflection.AssemblyCopyrightAttribute" target="assembly">
      <property name="Copyright" type="System.String" value="Copyright 2006-2009 the Common Infrastructure Libraries Team." />
    </attribute>
    <attribute name="System.Runtime.CompilerServices.RuntimeCompatibilityAttribute" target="assembly">
      <property name="WrapNonExceptionThrows" type="System.Boolean" value="True" />
    </attribute>
    <attribute name="System.Reflection.AssemblyCompanyAttribute" target="assembly">
      <property name="Company" type="System.String" value="http://netcommon.sourceforge.net/" />
    </attribute>
    <attribute name="System.Reflection.AssemblyInformationalVersionAttribute" target="assembly">
      <property name="InformationalVersion" type="System.String" value="2.0.0.0; net-2.0.win32; release" />
    </attribute>
    <attribute name="System.Reflection.AssemblyConfigurationAttribute" target="assembly">
      <property name="Configuration" type="System.String" value="net-2.0.win32; release" />
    </attribute>
    <attribute name="System.CLSCompliantAttribute" target="assembly">
      <property name="IsCompliant" type="System.Boolean" value="True" />
    </attribute>
    <attribute name="System.Runtime.CompilerServices.CompilationRelaxationsAttribute" target="assembly">
      <property name="CompilationRelaxations" type="System.Int32" value="8" />
    </attribute>
    <attribute name="System.Runtime.InteropServices.ComVisibleAttribute" target="assembly">
      <property name="Value" type="System.Boolean" value="False" />
    </attribute>
    <attribute name="System.Reflection.AssemblyProductAttribute" target="assembly">
      <property name="Product" type="System.String" value="Common Logging Framework Enterprise Library 3.1 Adapter" />
    </attribute>
    <attribute name="System.Diagnostics.DebuggableAttribute" target="assembly">
      <property name="IsJITTrackingEnabled" type="System.Boolean" value="True" />
      <property name="IsJITOptimizerDisabled" type="System.Boolean" value="True" />
      <property name="DebuggingFlags" type="System.Diagnostics.DebuggableAttribute+DebuggingModes" value="(DebuggingModes.Default|DebuggingModes.IgnoreSymbolStoreSequencePoints|DebuggingModes.EnableEditAndContinue|DebuggingModes.DisableOptimizations)" />
    </attribute>
    <module name="Common.Logging.EntLib.dll">
      <namespace name="Common.Logging.EntLib">
        <documentation><summary>
  <para>This namespace contains the implementations to plug EntLib 3.1 into Common.Logging.</para>
  <para>For an example on how to configure <list type="bullet"><item>Common.Logging to render its output to Entlib, see <see cref="T:Common.Logging.EntLib.EntLibLoggerFactoryAdapter" />.</item><item>Entlib to render its output to Common.Logging use <see cref="T:Common.Logging.EntLib.CommonLoggingEntlibTraceListener" />.</item></list></para>
</summary></documentation>
        <class name="CommonLoggingEntlibTraceListener" displayName="CommonLoggingEntlibTraceListener" namespace="Common.Logging.EntLib" id="T:Common.Logging.EntLib.CommonLoggingEntlibTraceListener" access="Public">
          <documentation><summary> Use this <see cref="T:System.Diagnostics.TraceListener" /> implementation to route all Entlib logging events to the Common.Logging infrastructure. </summary>
<remarks> See <see cref="T:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData" /> for a list of properties to configure. </remarks>
<example> To route all <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Logger" /> events to Common.Logging, configure <see cref="T:Common.Logging.EntLib.CommonLoggingEntlibTraceListener" nolink="true" />: <code lang="XML">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;configuration&gt;
    &lt;configSections&gt;
        &lt;section name="loggingConfiguration" 
type="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings, 
Microsoft.Practices.EnterpriseLibrary.Logging, Version=4.1.0.0, Culture=neutral, 
PublicKeyToken=b03f5f7f11d50a3a" /&gt;
    &lt;/configSections&gt;
    &lt;loggingConfiguration name="Logging Application Block" tracingEnabled="true"
        defaultCategory="General" logWarningsWhenNoCategoriesMatch="true"&gt;
        &lt;listeners&gt;
            &lt;add name="Common.Logging Listener" 
                 type="Common.Logging.EntLib.CommonLoggingEntlibTraceListener, Common.Logging.EntLib"
                 listenerDataType="Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData, 
Common.Logging.EntLib"
                 loggerNameFormat="{listenerName}.{sourceName}"
                 formatter="Text Formatter"
                 /&gt;
        &lt;/listeners&gt;
        &lt;formatters&gt;
            &lt;add template="Timestamp: {timestamp}&amp;#xD;&amp;#xA;Message: {message}&amp;#xD;&amp;#xA;Category: 
{category}&amp;#xD;&amp;#xA;Priority: {priority}&amp;#xD;&amp;#xA;EventId: {eventid}&amp;#xD;&amp;#xA;Severity: 
{severity}&amp;#xD;&amp;#xA;Title:{title}&amp;#xD;&amp;#xA;Machine: {machine}&amp;#xD;&amp;#xA;Application Domain: 
{appDomain}&amp;#xD;&amp;#xA;Process Id: {processId}&amp;#xD;&amp;#xA;Process Name: {processName}&amp;#xD;&amp;#xA;Win32 
Thread Id: {win32ThreadId}&amp;#xD;&amp;#xA;Thread Name: {threadName}&amp;#xD;&amp;#xA;Extended Properties: 
{dictionary({key} - {value}&amp;#xD;&amp;#xA;)}"
                type="Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter, 
Microsoft.Practices.EnterpriseLibrary.Logging, Version=4.1.0.0, Culture=neutral, 
PublicKeyToken=b03f5f7f11d50a3a"
                name="Text Formatter" /&gt;
        &lt;/formatters&gt;
        &lt;specialSources&gt;
            &lt;allEvents switchValue="All" name="All Events"&gt;
                &lt;listeners&gt;
                    &lt;add name="Test Capturing Listener" /&gt;
                &lt;/listeners&gt;
            &lt;/allEvents&gt;
        &lt;/specialSources&gt;
    &lt;/loggingConfiguration&gt;
&lt;/configuration&gt;
</code></example>
<author>Erich Eichinger</author></documentation>
          <baseType name="FormattedTraceListenerBase" id="T:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTraceListenerBase" displayName="FormattedTraceListenerBase" namespace="Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners" assembly="Microsoft.Practices.EnterpriseLibrary.Logging">
            <baseType name="TraceListener" id="T:System.Diagnostics.TraceListener" displayName="TraceListener" namespace="System.Diagnostics" assembly="System">
              <baseType name="MarshalByRefObject" id="T:System.MarshalByRefObject" displayName="MarshalByRefObject" namespace="System" assembly="mscorlib" />
            </baseType>
          </baseType>
          <implementsClass type="System.IDisposable" id="T:System.IDisposable" displayName="IDisposable" namespace="System" inherited="true" />
          <implementsClass type="Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IInstrumentationEventProvider" id="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IInstrumentationEventProvider" displayName="IInstrumentationEventProvider" namespace="Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation" inherited="true" />
          <constructor name=".ctor" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.#ctor(Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData,Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter)" access="Public" contract="Normal">
            <documentation><summary> Initializes this instance from <see cref="T:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData" /> configuration information. </summary></documentation>
            <parameter name="data" typeId="T:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData" displayName="CommonLoggingEntlibTraceListenerData" namespace="Common.Logging.EntLib" assembly="Common.Logging.EntLib" nullable="false" valueType="false" />
            <parameter name="formatter" typeId="T:Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter" displayName="ILogFormatter" namespace="Microsoft.Practices.EnterpriseLibrary.Logging.Formatters" assembly="Microsoft.Practices.EnterpriseLibrary.Logging" nullable="false" valueType="false" />
          </constructor>
          <property name="LoggerNameFormat" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.LoggerNameFormat" access="Public" contract="Normal" get="Public" set="false" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <documentation><summary> Format to use for creating the logger name. Defaults to "{listenerName}.{sourceName}". </summary>
<remarks> Available placeholders are: <list type="bullet"><item>{listenerName}: the configured name of this listener instance.</item><item>{sourceName}: the trace source name an event originates from (see e.g. <see cref="M:System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])" />.</item></list></remarks></documentation>
          </property>
          <property name="InstrumentationProvider" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.InstrumentationProvider" access="Family" contract="Normal" declaringType="Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTraceListenerBase" declaringAssembly="Microsoft.Practices.EnterpriseLibrary.Logging" declaringId="P:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTraceListenerBase.InstrumentationProvider" get="Family" set="false" typeId="T:Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.LoggingInstrumentationProvider" displayName="LoggingInstrumentationProvider" namespace="Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation" assembly="Microsoft.Practices.EnterpriseLibrary.Logging" nullable="false" valueType="false">
            <documentation><summary></summary></documentation>
          </property>
          <property name="IsThreadSafe" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.IsThreadSafe" access="Public" contract="Override" declaringType="Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTraceListenerBase" declaringAssembly="Microsoft.Practices.EnterpriseLibrary.Logging" declaringId="P:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTraceListenerBase.IsThreadSafe" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary></summary></documentation>
          </property>
          <property name="Formatter" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.Formatter" access="Public" contract="Normal" declaringType="Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTraceListenerBase" declaringAssembly="Microsoft.Practices.EnterpriseLibrary.Logging" declaringId="P:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTraceListenerBase.Formatter" get="Public" set="Public" typeId="T:Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter" displayName="ILogFormatter" namespace="Microsoft.Practices.EnterpriseLibrary.Logging.Formatters" assembly="Microsoft.Practices.EnterpriseLibrary.Logging" nullable="false" valueType="false">
            <documentation><summary></summary></documentation>
          </property>
          <property name="Attributes" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.Attributes" access="Public" contract="Normal" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="P:System.Diagnostics.TraceListener.Attributes" get="Public" set="false" typeId="T:System.Collections.Specialized.StringDictionary" displayName="StringDictionary" namespace="System.Collections.Specialized" assembly="System" nullable="false" valueType="false">
            <documentation><summary></summary></documentation>
          </property>
          <property name="Name" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.Name" access="Public" contract="Virtual" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="P:System.Diagnostics.TraceListener.Name" get="Public" set="Public" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <documentation><summary></summary></documentation>
          </property>
          <property name="IndentLevel" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.IndentLevel" access="Public" contract="Normal" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="P:System.Diagnostics.TraceListener.IndentLevel" get="Public" set="Public" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary></summary></documentation>
          </property>
          <property name="IndentSize" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.IndentSize" access="Public" contract="Normal" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="P:System.Diagnostics.TraceListener.IndentSize" get="Public" set="Public" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary></summary></documentation>
          </property>
          <property name="Filter" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.Filter" access="Public" contract="Normal" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="P:System.Diagnostics.TraceListener.Filter" get="Public" set="Public" typeId="T:System.Diagnostics.TraceFilter" displayName="TraceFilter" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="false">
            <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
              <property name="Value" type="System.Boolean" value="False" />
            </attribute>
            <documentation><summary></summary></documentation>
          </property>
          <property name="NeedIndent" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.NeedIndent" access="Family" contract="Normal" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="P:System.Diagnostics.TraceListener.NeedIndent" get="Family" set="Family" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary></summary></documentation>
          </property>
          <property name="TraceOutputOptions" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.TraceOutputOptions" access="Public" contract="Normal" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="P:System.Diagnostics.TraceListener.TraceOutputOptions" get="Public" set="Public" typeId="T:System.Diagnostics.TraceOptions" displayName="TraceOptions" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="true">
            <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
              <property name="Value" type="System.Boolean" value="False" />
            </attribute>
            <documentation><summary></summary></documentation>
          </property>
          <method name="Write" displayName="Write" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.Write(System.String)" access="Public" contract="Override" valueType="true" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> NOT USED BY ENTLIB </summary>
<exception cref="T:System.NotImplementedException" /></documentation>
            <parameter name="message" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="WriteLine" displayName="WriteLine" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.WriteLine(System.String)" access="Public" contract="Override" valueType="true" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> NOT USED BY ENTLIB </summary>
<exception cref="T:System.NotImplementedException" /></documentation>
            <parameter name="message" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="TraceData" displayName="TraceData" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" access="Public" contract="Override" valueType="true" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Overridden to redirect to call <see cref="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.Log(System.Diagnostics.TraceEventType,System.String,System.Int32,System.String,System.Object[])" />. </summary></documentation>
            <parameter name="eventCache" typeId="T:System.Diagnostics.TraceEventCache" displayName="TraceEventCache" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="false" />
            <parameter name="source" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="eventType" typeId="T:System.Diagnostics.TraceEventType" displayName="TraceEventType" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="true" />
            <parameter name="id" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="data" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Log" displayName="Log" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.Log(System.Diagnostics.TraceEventType,System.String,System.Int32,System.String,System.Object[])" access="Family" contract="Virtual" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Logs the given message to the Common.Logging infrastructure </summary></documentation>
            <parameter name="eventType" typeId="T:System.Diagnostics.TraceEventType" displayName="TraceEventType" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="true" />
            <parameter name="source" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="id" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
          </method>
          <method name="GetInstrumentationEventProvider" displayName="GetInstrumentationEventProvider" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.GetInstrumentationEventProvider" access="Public" contract="Final" valueType="false" declaringType="Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTraceListenerBase" declaringAssembly="Microsoft.Practices.EnterpriseLibrary.Logging" declaringId="M:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTraceListenerBase.GetInstrumentationEventProvider">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
            <implements name="GetInstrumentationEventProvider" id="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IInstrumentationEventProvider.GetInstrumentationEventProvider" interface="IInstrumentationEventProvider" interfaceId="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IInstrumentationEventProvider" assembly="Microsoft.Practices.EnterpriseLibrary.Common" declaringType="Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IInstrumentationEventProvider" />
          </method>
          <method name="Dispose" displayName="Dispose" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.Dispose" access="Public" contract="Final" valueType="true" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="M:System.Diagnostics.TraceListener.Dispose" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <implements name="Dispose" id="M:System.IDisposable.Dispose" interface="IDisposable" interfaceId="T:System.IDisposable" assembly="mscorlib" declaringType="System.IDisposable" />
          </method>
          <method name="Dispose" displayName="Dispose" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.Dispose(System.Boolean)" access="Family" contract="Virtual" valueType="true" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="M:System.Diagnostics.TraceListener.Dispose(System.Boolean)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="disposing" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="Close" displayName="Close" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.Close" access="Public" contract="Virtual" valueType="true" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="M:System.Diagnostics.TraceListener.Close">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Flush" displayName="Flush" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.Flush" access="Public" contract="Virtual" valueType="true" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="M:System.Diagnostics.TraceListener.Flush">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Fail" displayName="Fail" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.Fail(System.String)" access="Public" contract="Virtual" valueType="true" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="M:System.Diagnostics.TraceListener.Fail(System.String)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="message" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Fail" displayName="Fail" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.Fail(System.String,System.String)" access="Public" contract="Virtual" valueType="true" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="M:System.Diagnostics.TraceListener.Fail(System.String,System.String)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="message" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="detailMessage" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetSupportedAttributes" displayName="GetSupportedAttributes" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.GetSupportedAttributes" access="Family" contract="Virtual" valueType="false" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="M:System.Diagnostics.TraceListener.GetSupportedAttributes">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
            </returnType>
            <documentation><summary></summary></documentation>
          </method>
          <method name="Write" displayName="Write" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.Write(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="M:System.Diagnostics.TraceListener.Write(System.Object)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="o" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Write" displayName="Write" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.Write(System.String,System.String)" access="Public" contract="Virtual" valueType="true" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="M:System.Diagnostics.TraceListener.Write(System.String,System.String)" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="message" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="category" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Write" displayName="Write" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.Write(System.Object,System.String)" access="Public" contract="Virtual" valueType="true" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="M:System.Diagnostics.TraceListener.Write(System.Object,System.String)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="o" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="category" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="WriteIndent" displayName="WriteIndent" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.WriteIndent" access="Family" contract="Virtual" valueType="true" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="M:System.Diagnostics.TraceListener.WriteIndent">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="WriteLine" displayName="WriteLine" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.WriteLine(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="M:System.Diagnostics.TraceListener.WriteLine(System.Object)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="o" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="WriteLine" displayName="WriteLine" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.WriteLine(System.String,System.String)" access="Public" contract="Virtual" valueType="true" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="M:System.Diagnostics.TraceListener.WriteLine(System.String,System.String)" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="message" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="category" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="WriteLine" displayName="WriteLine" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.WriteLine(System.Object,System.String)" access="Public" contract="Virtual" valueType="true" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="M:System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="o" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="category" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="TraceData" displayName="TraceData" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="M:System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
              <property name="Value" type="System.Boolean" value="False" />
            </attribute>
            <parameter name="eventCache" typeId="T:System.Diagnostics.TraceEventCache" displayName="TraceEventCache" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="false" />
            <parameter name="source" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="eventType" typeId="T:System.Diagnostics.TraceEventType" displayName="TraceEventType" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="true" />
            <parameter name="id" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="data" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
          </method>
          <method name="TraceEvent" displayName="TraceEvent" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)" access="Public" contract="Virtual" valueType="true" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="M:System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
              <property name="Value" type="System.Boolean" value="False" />
            </attribute>
            <parameter name="eventCache" typeId="T:System.Diagnostics.TraceEventCache" displayName="TraceEventCache" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="false" />
            <parameter name="source" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="eventType" typeId="T:System.Diagnostics.TraceEventType" displayName="TraceEventType" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="true" />
            <parameter name="id" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="TraceEvent" displayName="TraceEvent" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" access="Public" contract="Virtual" valueType="true" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="M:System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
              <property name="Value" type="System.Boolean" value="False" />
            </attribute>
            <parameter name="eventCache" typeId="T:System.Diagnostics.TraceEventCache" displayName="TraceEventCache" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="false" />
            <parameter name="source" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="eventType" typeId="T:System.Diagnostics.TraceEventType" displayName="TraceEventType" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="true" />
            <parameter name="id" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="message" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="TraceEvent" displayName="TraceEvent" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="M:System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
              <property name="Value" type="System.Boolean" value="False" />
            </attribute>
            <parameter name="eventCache" typeId="T:System.Diagnostics.TraceEventCache" displayName="TraceEventCache" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="false" />
            <parameter name="source" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="eventType" typeId="T:System.Diagnostics.TraceEventType" displayName="TraceEventType" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="true" />
            <parameter name="id" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
          </method>
          <method name="TraceTransfer" displayName="TraceTransfer" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)" access="Public" contract="Virtual" valueType="true" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="M:System.Diagnostics.TraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
              <property name="Value" type="System.Boolean" value="False" />
            </attribute>
            <parameter name="eventCache" typeId="T:System.Diagnostics.TraceEventCache" displayName="TraceEventCache" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="false" />
            <parameter name="source" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="id" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="message" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="relatedActivityId" typeId="T:System.Guid" displayName="Guid" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.MemberwiseClone(System.Boolean)" access="Family" contract="Normal" valueType="false" declaringType="System.MarshalByRefObject" declaringAssembly="mscorlib" declaringId="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)" overload="1">
            <returnType typeId="T:System.MarshalByRefObject" displayName="MarshalByRefObject" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
            <parameter name="cloneIdentity" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="GetLifetimeService" displayName="GetLifetimeService" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.GetLifetimeService" access="Public" contract="Final" valueType="false" declaringType="System.MarshalByRefObject" declaringAssembly="mscorlib" declaringId="M:System.MarshalByRefObject.GetLifetimeService">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Security.Permissions.SecurityPermissionAttribute">
              <property name="Flags" type="System.Security.Permissions.SecurityPermissionFlag" value="SecurityPermissionFlag.Infrastructure" />
              <property name="Assertion" type="System.Boolean" value="False" />
              <property name="UnmanagedCode" type="System.Boolean" value="False" />
              <property name="SkipVerification" type="System.Boolean" value="False" />
              <property name="Execution" type="System.Boolean" value="False" />
              <property name="ControlThread" type="System.Boolean" value="False" />
              <property name="ControlEvidence" type="System.Boolean" value="False" />
              <property name="ControlPolicy" type="System.Boolean" value="False" />
              <property name="SerializationFormatter" type="System.Boolean" value="False" />
              <property name="ControlDomainPolicy" type="System.Boolean" value="False" />
              <property name="ControlPrincipal" type="System.Boolean" value="False" />
              <property name="ControlAppDomain" type="System.Boolean" value="False" />
              <property name="RemotingConfiguration" type="System.Boolean" value="False" />
              <property name="Infrastructure" type="System.Boolean" value="True" />
              <property name="BindingRedirects" type="System.Boolean" value="False" />
              <property name="Action" type="System.Security.Permissions.SecurityAction" value="SecurityAction.LinkDemand" />
              <property name="Unrestricted" type="System.Boolean" value="False" />
            </attribute>
          </method>
          <method name="InitializeLifetimeService" displayName="InitializeLifetimeService" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.InitializeLifetimeService" access="Public" contract="Virtual" valueType="false" declaringType="System.MarshalByRefObject" declaringAssembly="mscorlib" declaringId="M:System.MarshalByRefObject.InitializeLifetimeService">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Security.Permissions.SecurityPermissionAttribute">
              <property name="Flags" type="System.Security.Permissions.SecurityPermissionFlag" value="SecurityPermissionFlag.Infrastructure" />
              <property name="Assertion" type="System.Boolean" value="False" />
              <property name="UnmanagedCode" type="System.Boolean" value="False" />
              <property name="SkipVerification" type="System.Boolean" value="False" />
              <property name="Execution" type="System.Boolean" value="False" />
              <property name="ControlThread" type="System.Boolean" value="False" />
              <property name="ControlEvidence" type="System.Boolean" value="False" />
              <property name="ControlPolicy" type="System.Boolean" value="False" />
              <property name="SerializationFormatter" type="System.Boolean" value="False" />
              <property name="ControlDomainPolicy" type="System.Boolean" value="False" />
              <property name="ControlPrincipal" type="System.Boolean" value="False" />
              <property name="ControlAppDomain" type="System.Boolean" value="False" />
              <property name="RemotingConfiguration" type="System.Boolean" value="False" />
              <property name="Infrastructure" type="System.Boolean" value="True" />
              <property name="BindingRedirects" type="System.Boolean" value="False" />
              <property name="Action" type="System.Security.Permissions.SecurityAction" value="SecurityAction.LinkDemand" />
              <property name="Unrestricted" type="System.Boolean" value="False" />
            </attribute>
          </method>
          <method name="CreateObjRef" displayName="CreateObjRef" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.CreateObjRef(System.Type)" access="Public" contract="Virtual" valueType="false" declaringType="System.MarshalByRefObject" declaringAssembly="mscorlib" declaringId="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
            <returnType typeId="T:System.Runtime.Remoting.ObjRef" displayName="ObjRef" namespace="System.Runtime.Remoting" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Security.Permissions.SecurityPermissionAttribute">
              <property name="Flags" type="System.Security.Permissions.SecurityPermissionFlag" value="SecurityPermissionFlag.Infrastructure" />
              <property name="Assertion" type="System.Boolean" value="False" />
              <property name="UnmanagedCode" type="System.Boolean" value="False" />
              <property name="SkipVerification" type="System.Boolean" value="False" />
              <property name="Execution" type="System.Boolean" value="False" />
              <property name="ControlThread" type="System.Boolean" value="False" />
              <property name="ControlEvidence" type="System.Boolean" value="False" />
              <property name="ControlPolicy" type="System.Boolean" value="False" />
              <property name="SerializationFormatter" type="System.Boolean" value="False" />
              <property name="ControlDomainPolicy" type="System.Boolean" value="False" />
              <property name="ControlPrincipal" type="System.Boolean" value="False" />
              <property name="ControlAppDomain" type="System.Boolean" value="False" />
              <property name="RemotingConfiguration" type="System.Boolean" value="False" />
              <property name="Infrastructure" type="System.Boolean" value="True" />
              <property name="BindingRedirects" type="System.Boolean" value="False" />
              <property name="Action" type="System.Security.Permissions.SecurityAction" value="SecurityAction.LinkDemand" />
              <property name="Unrestricted" type="System.Boolean" value="False" />
            </attribute>
            <parameter name="requestedType" typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Equals" displayName="Equals" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="GetType" displayName="GetType" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone" overload="2">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
        </class>
        <class name="CommonLoggingEntlibTraceListenerAssembler" displayName="CommonLoggingEntlibTraceListenerAssembler" namespace="Common.Logging.EntLib" id="T:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerAssembler" access="Public">
          <documentation><summary> This type supports the Enterprise Library infrastructure and is not intended to be used directly from your code. Represents the process to build a <see cref="T:Common.Logging.EntLib.CommonLoggingEntlibTraceListener" /> described by a <see cref="T:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData" /> configuration object. </summary></documentation>
          <baseType name="TraceListenerAsssembler" id="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerAsssembler" displayName="TraceListenerAsssembler" namespace="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration" assembly="Microsoft.Practices.EnterpriseLibrary.Logging" />
          <implementsClass type="Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.IAssembler`2" id="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.IAssembler`2" displayName="IAssembler(TObject,TConfiguration)" namespace="Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder" inherited="true">
            <genericargument name="TObject" displayName="TObject" />
            <genericargument name="TConfiguration" displayName="TConfiguration" />
          </implementsClass>
          <constructor name=".ctor" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerAssembler.#ctor" access="Public" contract="Normal">
            <documentation>
              <summary>Initializes a new instance of the <see cref="T:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerAssembler" /> class.</summary>
            </documentation>
          </constructor>
          <method name="Assemble" displayName="Assemble" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerAssembler.Assemble(Microsoft.Practices.ObjectBuilder.IBuilderContext,Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache)" access="Public" contract="Override" valueType="false">
            <returnType typeId="T:System.Diagnostics.TraceListener" displayName="TraceListener" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="false" />
            <documentation><summary> This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code. Builds a <see cref="T:Common.Logging.EntLib.CommonLoggingEntlibTraceListener" /> described by a <see cref="T:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData" /> configuration object. </summary></documentation>
            <parameter name="context" typeId="T:Microsoft.Practices.ObjectBuilder.IBuilderContext" displayName="IBuilderContext" namespace="Microsoft.Practices.ObjectBuilder" assembly="Microsoft.Practices.ObjectBuilder" nullable="false" valueType="false" />
            <parameter name="objectConfiguration" typeId="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData" displayName="TraceListenerData" namespace="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration" assembly="Microsoft.Practices.EnterpriseLibrary.Logging" nullable="false" valueType="false" />
            <parameter name="configurationSource" typeId="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource" displayName="IConfigurationSource" namespace="Microsoft.Practices.EnterpriseLibrary.Common.Configuration" assembly="Microsoft.Practices.EnterpriseLibrary.Common" nullable="false" valueType="false" />
            <parameter name="reflectionCache" typeId="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache" displayName="ConfigurationReflectionCache" namespace="Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder" assembly="Microsoft.Practices.EnterpriseLibrary.Common" nullable="false" valueType="false" />
            <implements name="Assemble" id="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.IAssembler`2.Assemble(Microsoft.Practices.ObjectBuilder.IBuilderContext,Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache)" interface="IAssembler(TraceListener,TraceListenerData)" interfaceId="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.IAssembler`2" assembly="Microsoft.Practices.EnterpriseLibrary.Common" declaringType="Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.IAssembler`2[[System.Diagnostics.TraceListener, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData, Microsoft.Practices.EnterpriseLibrary.Logging, Version=3.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]]" />
          </method>
          <method name="GetFormatter" displayName="GetFormatter" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerAssembler.GetFormatter(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache)" access="Family" contract="Normal" valueType="false" declaringType="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerAsssembler" declaringAssembly="Microsoft.Practices.EnterpriseLibrary.Logging" declaringId="M:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerAsssembler.GetFormatter(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache)">
            <returnType typeId="T:Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter" displayName="ILogFormatter" namespace="Microsoft.Practices.EnterpriseLibrary.Logging.Formatters" assembly="Microsoft.Practices.EnterpriseLibrary.Logging" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
            <parameter name="context" typeId="T:Microsoft.Practices.ObjectBuilder.IBuilderContext" displayName="IBuilderContext" namespace="Microsoft.Practices.ObjectBuilder" assembly="Microsoft.Practices.ObjectBuilder" nullable="false" valueType="false" />
            <parameter name="formatterName" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="configurationSource" typeId="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource" displayName="IConfigurationSource" namespace="Microsoft.Practices.EnterpriseLibrary.Common.Configuration" assembly="Microsoft.Practices.EnterpriseLibrary.Common" nullable="false" valueType="false" />
            <parameter name="reflectionCache" typeId="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache" displayName="ConfigurationReflectionCache" namespace="Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder" assembly="Microsoft.Practices.EnterpriseLibrary.Common" nullable="false" valueType="false" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerAssembler.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Equals" displayName="Equals" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerAssembler.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerAssembler.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="GetType" displayName="GetType" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerAssembler.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerAssembler.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerAssembler.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
        </class>
        <class name="CommonLoggingEntlibTraceListenerData" displayName="CommonLoggingEntlibTraceListenerData" namespace="Common.Logging.EntLib" id="T:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData" access="Public">
          <documentation><summary> Represents the configuration settings that describe a <see cref="T:Common.Logging.EntLib.CommonLoggingEntlibTraceListener" />. </summary></documentation>
          <attribute name="Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.AssemblerAttribute">
            <property name="AssemblerType" type="System.Type" value="Common.Logging.EntLib.CommonLoggingEntlibTraceListenerAssembler" />
          </attribute>
          <attribute name="System.Reflection.DefaultMemberAttribute">
            <property name="MemberName" type="System.String" value="Item" />
          </attribute>
          <baseType name="TraceListenerData" id="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData" displayName="TraceListenerData" namespace="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration" assembly="Microsoft.Practices.EnterpriseLibrary.Logging">
            <baseType name="NameTypeConfigurationElement" id="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement" displayName="NameTypeConfigurationElement" namespace="Microsoft.Practices.EnterpriseLibrary.Common.Configuration" assembly="Microsoft.Practices.EnterpriseLibrary.Common">
              <baseType name="NamedConfigurationElement" id="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement" displayName="NamedConfigurationElement" namespace="Microsoft.Practices.EnterpriseLibrary.Common.Configuration" assembly="Microsoft.Practices.EnterpriseLibrary.Common">
                <baseType name="ConfigurationElement" id="T:System.Configuration.ConfigurationElement" displayName="ConfigurationElement" namespace="System.Configuration" assembly="System.Configuration" />
              </baseType>
            </baseType>
          </baseType>
          <implementsClass type="Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IObjectWithName" id="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IObjectWithName" displayName="IObjectWithName" namespace="Microsoft.Practices.EnterpriseLibrary.Common.Configuration" inherited="true" />
          <implementsClass type="Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IObjectWithNameAndType" id="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IObjectWithNameAndType" displayName="IObjectWithNameAndType" namespace="Microsoft.Practices.EnterpriseLibrary.Common.Configuration" inherited="true" />
          <constructor name=".ctor" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.#ctor" access="Public" contract="Normal">
            <documentation>
              <summary>Initializes a new instance of the <see cref="T:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData" /> class.</summary>
            </documentation>
          </constructor>
          <property name="LoggerNameFormat" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.LoggerNameFormat" access="Public" contract="Normal" get="Public" set="Public" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <attribute name="System.Configuration.ConfigurationPropertyAttribute">
              <property name="Name" type="System.String" value="loggerNameFormat" />
              <property name="DefaultValue" type="System.Object" value="System.Object" />
              <property name="Options" type="System.Configuration.ConfigurationPropertyOptions" value="ConfigurationPropertyOptions.None" />
              <property name="IsDefaultCollection" type="System.Boolean" value="False" />
              <property name="IsRequired" type="System.Boolean" value="False" />
              <property name="IsKey" type="System.Boolean" value="False" />
            </attribute>
            <documentation><summary> The logger name format to use for creating logger names from <see cref="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement.Name" /> and </summary></documentation>
          </property>
          <property name="Formatter" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.Formatter" access="Public" contract="Normal" get="Public" set="Public" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <attribute name="System.Configuration.ConfigurationPropertyAttribute">
              <property name="IsRequired" type="System.Boolean" value="False" />
              <property name="Name" type="System.String" value="formatter" />
              <property name="DefaultValue" type="System.Object" value="System.Object" />
              <property name="Options" type="System.Configuration.ConfigurationPropertyOptions" value="ConfigurationPropertyOptions.None" />
              <property name="IsDefaultCollection" type="System.Boolean" value="False" />
              <property name="IsKey" type="System.Boolean" value="False" />
            </attribute>
            <documentation><summary> Gets or Sets the formatter name </summary></documentation>
          </property>
          <property name="ListenerDataType" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.ListenerDataType" access="Public" contract="Normal" declaringType="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData" declaringAssembly="Microsoft.Practices.EnterpriseLibrary.Logging" declaringId="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData.ListenerDataType" get="Public" set="Public" typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <documentation><summary></summary></documentation>
          </property>
          <property name="ListenerDataTypeName" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.ListenerDataTypeName" access="Public" contract="Normal" declaringType="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData" declaringAssembly="Microsoft.Practices.EnterpriseLibrary.Logging" declaringId="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData.ListenerDataTypeName" get="Public" set="Public" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <attribute name="System.Configuration.ConfigurationPropertyAttribute">
              <property name="IsRequired" type="System.Boolean" value="True" />
              <property name="Name" type="System.String" value="listenerDataType" />
              <property name="DefaultValue" type="System.Object" value="System.Object" />
              <property name="Options" type="System.Configuration.ConfigurationPropertyOptions" value="ConfigurationPropertyOptions.IsRequired" />
              <property name="IsDefaultCollection" type="System.Boolean" value="False" />
              <property name="IsKey" type="System.Boolean" value="False" />
            </attribute>
            <documentation><summary></summary></documentation>
          </property>
          <property name="TraceOutputOptions" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.TraceOutputOptions" access="Public" contract="Normal" declaringType="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData" declaringAssembly="Microsoft.Practices.EnterpriseLibrary.Logging" declaringId="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData.TraceOutputOptions" get="Public" set="Public" typeId="T:System.Diagnostics.TraceOptions" displayName="TraceOptions" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="true">
            <attribute name="System.Configuration.ConfigurationPropertyAttribute">
              <property name="IsRequired" type="System.Boolean" value="False" />
              <property name="Name" type="System.String" value="traceOutputOptions" />
              <property name="DefaultValue" type="System.Object" value="System.Object" />
              <property name="Options" type="System.Configuration.ConfigurationPropertyOptions" value="ConfigurationPropertyOptions.None" />
              <property name="IsDefaultCollection" type="System.Boolean" value="False" />
              <property name="IsKey" type="System.Boolean" value="False" />
            </attribute>
            <documentation><summary></summary></documentation>
          </property>
          <property name="Type" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.Type" access="Public" contract="Final" declaringType="Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement" declaringAssembly="Microsoft.Practices.EnterpriseLibrary.Common" declaringId="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement.Type" get="Public" set="Public" typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <documentation><summary></summary></documentation>
            <implements name="Type" id="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IObjectWithNameAndType.Type" interface="IObjectWithNameAndType" assembly="Microsoft.Practices.EnterpriseLibrary.Common" interfaceId="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IObjectWithNameAndType" declaringType="Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IObjectWithNameAndType" />
          </property>
          <property name="TypeName" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.TypeName" access="Public" contract="Normal" declaringType="Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement" declaringAssembly="Microsoft.Practices.EnterpriseLibrary.Common" declaringId="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement.TypeName" get="Public" set="Public" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <attribute name="System.Configuration.ConfigurationPropertyAttribute">
              <property name="IsRequired" type="System.Boolean" value="True" />
              <property name="Name" type="System.String" value="type" />
              <property name="DefaultValue" type="System.Object" value="System.Object" />
              <property name="Options" type="System.Configuration.ConfigurationPropertyOptions" value="ConfigurationPropertyOptions.IsRequired" />
              <property name="IsDefaultCollection" type="System.Boolean" value="False" />
              <property name="IsKey" type="System.Boolean" value="False" />
            </attribute>
            <documentation><summary></summary></documentation>
          </property>
          <property name="Name" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.Name" access="Public" contract="Final" declaringType="Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement" declaringAssembly="Microsoft.Practices.EnterpriseLibrary.Common" declaringId="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement.Name" get="Public" set="Public" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <attribute name="System.Configuration.StringValidatorAttribute">
              <property name="ValidatorInstance" type="System.Configuration.ConfigurationValidatorBase" value="System.Configuration.StringValidator" />
              <property name="MinLength" type="System.Int32" value="1" />
              <property name="MaxLength" type="System.Int32" value="2147483647" />
              <property name="InvalidCharacters" type="System.String" value="null" />
              <property name="ValidatorType" type="System.Type" value="null" />
            </attribute>
            <attribute name="System.Configuration.ConfigurationPropertyAttribute">
              <property name="IsRequired" type="System.Boolean" value="True" />
              <property name="Name" type="System.String" value="name" />
              <property name="DefaultValue" type="System.Object" value="Name" />
              <property name="Options" type="System.Configuration.ConfigurationPropertyOptions" value="(ConfigurationPropertyOptions.IsRequired|ConfigurationPropertyOptions.IsKey)" />
              <property name="IsDefaultCollection" type="System.Boolean" value="False" />
              <property name="IsKey" type="System.Boolean" value="True" />
            </attribute>
            <documentation><summary></summary></documentation>
            <implements name="Name" id="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IObjectWithName.Name" interface="IObjectWithName" assembly="Microsoft.Practices.EnterpriseLibrary.Common" interfaceId="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IObjectWithName" declaringType="Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IObjectWithName" />
          </property>
          <property name="LockAttributes" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.LockAttributes" access="Public" contract="Normal" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="P:System.Configuration.ConfigurationElement.LockAttributes" get="Public" set="false" typeId="T:System.Configuration.ConfigurationLockCollection" displayName="ConfigurationLockCollection" namespace="System.Configuration" assembly="System.Configuration" nullable="false" valueType="false">
            <documentation><summary></summary></documentation>
          </property>
          <property name="LockAllAttributesExcept" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.LockAllAttributesExcept" access="Public" contract="Normal" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="P:System.Configuration.ConfigurationElement.LockAllAttributesExcept" get="Public" set="false" typeId="T:System.Configuration.ConfigurationLockCollection" displayName="ConfigurationLockCollection" namespace="System.Configuration" assembly="System.Configuration" nullable="false" valueType="false">
            <documentation><summary></summary></documentation>
          </property>
          <property name="LockElements" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.LockElements" access="Public" contract="Normal" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="P:System.Configuration.ConfigurationElement.LockElements" get="Public" set="false" typeId="T:System.Configuration.ConfigurationLockCollection" displayName="ConfigurationLockCollection" namespace="System.Configuration" assembly="System.Configuration" nullable="false" valueType="false">
            <documentation><summary></summary></documentation>
          </property>
          <property name="LockAllElementsExcept" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.LockAllElementsExcept" access="Public" contract="Normal" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="P:System.Configuration.ConfigurationElement.LockAllElementsExcept" get="Public" set="false" typeId="T:System.Configuration.ConfigurationLockCollection" displayName="ConfigurationLockCollection" namespace="System.Configuration" assembly="System.Configuration" nullable="false" valueType="false">
            <documentation><summary></summary></documentation>
          </property>
          <property name="LockItem" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.LockItem" access="Public" contract="Normal" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="P:System.Configuration.ConfigurationElement.LockItem" get="Public" set="Public" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary></summary></documentation>
          </property>
          <property name="Item" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.Item(System.Configuration.ConfigurationProperty)" access="Family" contract="Normal" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="P:System.Configuration.ConfigurationElement.Item(System.Configuration.ConfigurationProperty)" overload="1" get="Family" set="Family" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <parameter name="prop" typeId="T:System.Configuration.ConfigurationProperty" displayName="ConfigurationProperty" namespace="System.Configuration" assembly="System.Configuration" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </property>
          <property name="Item" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.Item(System.String)" access="Family" contract="Normal" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="P:System.Configuration.ConfigurationElement.Item(System.String)" overload="2" get="Family" set="Family" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <parameter name="propertyName" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </property>
          <property name="ElementInformation" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.ElementInformation" access="Public" contract="Normal" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="P:System.Configuration.ConfigurationElement.ElementInformation" get="Public" set="false" typeId="T:System.Configuration.ElementInformation" displayName="ElementInformation" namespace="System.Configuration" assembly="System.Configuration" nullable="false" valueType="false">
            <documentation><summary></summary></documentation>
          </property>
          <property name="EvaluationContext" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.EvaluationContext" access="Family" contract="Normal" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="P:System.Configuration.ConfigurationElement.EvaluationContext" get="Family" set="false" typeId="T:System.Configuration.ContextInformation" displayName="ContextInformation" namespace="System.Configuration" assembly="System.Configuration" nullable="false" valueType="false">
            <documentation><summary></summary></documentation>
          </property>
          <property name="ElementProperty" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.ElementProperty" access="Family" contract="Virtual" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="P:System.Configuration.ConfigurationElement.ElementProperty" get="Family" set="false" typeId="T:System.Configuration.ConfigurationElementProperty" displayName="ConfigurationElementProperty" namespace="System.Configuration" assembly="System.Configuration" nullable="false" valueType="false">
            <documentation><summary></summary></documentation>
          </property>
          <method name="DeserializeElement" displayName="DeserializeElement" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.DeserializeElement(System.Xml.XmlReader)" access="Public" contract="Normal" valueType="true" declaringType="Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement" declaringAssembly="Microsoft.Practices.EnterpriseLibrary.Common" declaringId="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement.DeserializeElement(System.Xml.XmlReader)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="reader" typeId="T:System.Xml.XmlReader" displayName="XmlReader" namespace="System.Xml" assembly="System.Xml" nullable="false" valueType="false" />
          </method>
          <method name="Init" displayName="Init" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.Init" access="Family" contract="Virtual" valueType="true" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="M:System.Configuration.ConfigurationElement.Init">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="IsModified" displayName="IsModified" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.IsModified" access="Family" contract="Virtual" valueType="true" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="M:System.Configuration.ConfigurationElement.IsModified">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="ResetModified" displayName="ResetModified" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.ResetModified" access="Family" contract="Virtual" valueType="true" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="M:System.Configuration.ConfigurationElement.ResetModified">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="IsReadOnly" displayName="IsReadOnly" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.IsReadOnly" access="Public" contract="Virtual" valueType="true" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="M:System.Configuration.ConfigurationElement.IsReadOnly">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="SetReadOnly" displayName="SetReadOnly" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.SetReadOnly" access="Family" contract="Virtual" valueType="true" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="M:System.Configuration.ConfigurationElement.SetReadOnly">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="ListErrors" displayName="ListErrors" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.ListErrors(System.Collections.IList)" access="Family" contract="Virtual" valueType="true" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="M:System.Configuration.ConfigurationElement.ListErrors(System.Collections.IList)">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="errorList" typeId="T:System.Collections.IList" displayName="IList" namespace="System.Collections" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="InitializeDefault" displayName="InitializeDefault" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.InitializeDefault" access="Family" contract="Virtual" valueType="true" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="M:System.Configuration.ConfigurationElement.InitializeDefault">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Reset" displayName="Reset" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.Reset(System.Configuration.ConfigurationElement)" access="Family" contract="Virtual" valueType="true" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="M:System.Configuration.ConfigurationElement.Reset(System.Configuration.ConfigurationElement)">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="parentElement" typeId="T:System.Configuration.ConfigurationElement" displayName="ConfigurationElement" namespace="System.Configuration" assembly="System.Configuration" nullable="false" valueType="false" />
          </method>
          <method name="Equals" displayName="Equals" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.Equals(System.Object)" access="Public" contract="Override" valueType="true" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="M:System.Configuration.ConfigurationElement.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="compareTo" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.GetHashCode" access="Public" contract="Override" valueType="true" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="M:System.Configuration.ConfigurationElement.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="SetPropertyValue" displayName="SetPropertyValue" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.SetPropertyValue(System.Configuration.ConfigurationProperty,System.Object,System.Boolean)" access="Family" contract="Normal" valueType="true" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="M:System.Configuration.ConfigurationElement.SetPropertyValue(System.Configuration.ConfigurationProperty,System.Object,System.Boolean)">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="prop" typeId="T:System.Configuration.ConfigurationProperty" displayName="ConfigurationProperty" namespace="System.Configuration" assembly="System.Configuration" nullable="false" valueType="false" />
            <parameter name="value" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="ignoreLocks" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="Unmerge" displayName="Unmerge" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)" access="Family" contract="Virtual" valueType="true" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="M:System.Configuration.ConfigurationElement.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="sourceElement" typeId="T:System.Configuration.ConfigurationElement" displayName="ConfigurationElement" namespace="System.Configuration" assembly="System.Configuration" nullable="false" valueType="false" />
            <parameter name="parentElement" typeId="T:System.Configuration.ConfigurationElement" displayName="ConfigurationElement" namespace="System.Configuration" assembly="System.Configuration" nullable="false" valueType="false" />
            <parameter name="saveMode" typeId="T:System.Configuration.ConfigurationSaveMode" displayName="ConfigurationSaveMode" namespace="System.Configuration" assembly="System.Configuration" nullable="false" valueType="true" />
          </method>
          <method name="SerializeToXmlElement" displayName="SerializeToXmlElement" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.SerializeToXmlElement(System.Xml.XmlWriter,System.String)" access="Family" contract="Virtual" valueType="true" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="M:System.Configuration.ConfigurationElement.SerializeToXmlElement(System.Xml.XmlWriter,System.String)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="writer" typeId="T:System.Xml.XmlWriter" displayName="XmlWriter" namespace="System.Xml" assembly="System.Xml" nullable="false" valueType="false" />
            <parameter name="elementName" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="SerializeElement" displayName="SerializeElement" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.SerializeElement(System.Xml.XmlWriter,System.Boolean)" access="Family" contract="Virtual" valueType="true" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="M:System.Configuration.ConfigurationElement.SerializeElement(System.Xml.XmlWriter,System.Boolean)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="writer" typeId="T:System.Xml.XmlWriter" displayName="XmlWriter" namespace="System.Xml" assembly="System.Xml" nullable="false" valueType="false" />
            <parameter name="serializeCollectionKey" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="DeserializeElement" displayName="DeserializeElement" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.DeserializeElement(System.Xml.XmlReader,System.Boolean)" access="Family" contract="Virtual" valueType="true" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="M:System.Configuration.ConfigurationElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="reader" typeId="T:System.Xml.XmlReader" displayName="XmlReader" namespace="System.Xml" assembly="System.Xml" nullable="false" valueType="false" />
            <parameter name="serializeCollectionKey" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="OnRequiredPropertyNotFound" displayName="OnRequiredPropertyNotFound" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.OnRequiredPropertyNotFound(System.String)" access="Family" contract="Virtual" valueType="false" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="M:System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound(System.String)">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
            <parameter name="name" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="PostDeserialize" displayName="PostDeserialize" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.PostDeserialize" access="Family" contract="Virtual" valueType="true" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="M:System.Configuration.ConfigurationElement.PostDeserialize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="PreSerialize" displayName="PreSerialize" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.PreSerialize(System.Xml.XmlWriter)" access="Family" contract="Virtual" valueType="true" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="M:System.Configuration.ConfigurationElement.PreSerialize(System.Xml.XmlWriter)">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="writer" typeId="T:System.Xml.XmlWriter" displayName="XmlWriter" namespace="System.Xml" assembly="System.Xml" nullable="false" valueType="false" />
          </method>
          <method name="OnDeserializeUnrecognizedAttribute" displayName="OnDeserializeUnrecognizedAttribute" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.OnDeserializeUnrecognizedAttribute(System.String,System.String)" access="Family" contract="Virtual" valueType="true" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="M:System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute(System.String,System.String)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="name" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="value" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="OnDeserializeUnrecognizedElement" displayName="OnDeserializeUnrecognizedElement" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)" access="Family" contract="Virtual" valueType="true" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="M:System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="elementName" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="reader" typeId="T:System.Xml.XmlReader" displayName="XmlReader" namespace="System.Xml" assembly="System.Xml" nullable="false" valueType="false" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="GetType" displayName="GetType" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
        </class>
        <class name="EntLibLogger" displayName="EntLibLogger" namespace="Common.Logging.EntLib" id="T:Common.Logging.EntLib.EntLibLogger" access="Public">
          <documentation><summary> Concrete implementation of <see cref="T:Common.Logging.ILog" /> interface specific to Enterprise Logging 3.1. </summary>
<remarks> Instances are created by the <see cref="T:Common.Logging.EntLib.EntLibLoggerFactoryAdapter" />. <see cref="P:Common.Logging.EntLib.EntLibLoggerFactoryAdapter.DefaultPriority" /> is used for logging a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry" /> to <see cref="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.Write(Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)" />. The category name used is the name passed into <see cref="M:Common.Logging.LogManager.GetLogger(System.String)" />. For configuring logging, see <see cref="T:Common.Logging.EntLib.EntLibLoggerFactoryAdapter" nolink="true" />. </remarks>
<seealso cref="T:Common.Logging.ILog" />
<seealso cref="T:Common.Logging.EntLib.EntLibLoggerFactoryAdapter" />
<author>Mark Pollack</author>
<author>Erich Eichinger</author></documentation>
          <baseType name="AbstractLogger" id="T:Common.Logging.Factory.AbstractLogger" displayName="AbstractLogger" namespace="Common.Logging.Factory" assembly="Common.Logging" />
          <implementsClass type="Common.Logging.ILog" id="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" inherited="true" />
          <constructor name=".ctor" id="M:Common.Logging.EntLib.EntLibLogger.#ctor(System.String,Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter,Common.Logging.EntLib.EntLibLoggerSettings)" access="Public" contract="Normal">
            <documentation><summary> Initializes a new instance of the <see cref="T:Common.Logging.EntLib.EntLibLogger" /> class. </summary>
<param name="category">The category.</param>
<param name="logWriter">the <see cref="P:Common.Logging.EntLib.EntLibLogger.LogWriter" /> to write log events to.</param>
<param name="settings">the logger settings</param></documentation>
            <parameter name="category" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="logWriter" typeId="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter" displayName="LogWriter" namespace="Microsoft.Practices.EnterpriseLibrary.Logging" assembly="Microsoft.Practices.EnterpriseLibrary.Logging" nullable="false" valueType="false" />
            <parameter name="settings" typeId="T:Common.Logging.EntLib.EntLibLoggerSettings" displayName="EntLibLoggerSettings" namespace="Common.Logging.EntLib" assembly="Common.Logging.EntLib" nullable="false" valueType="false" />
          </constructor>
          <property name="Category" id="P:Common.Logging.EntLib.EntLibLogger.Category" access="Public" contract="Normal" get="Public" set="false" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <documentation><summary> The category of this logger </summary></documentation>
          </property>
          <property name="Settings" id="P:Common.Logging.EntLib.EntLibLogger.Settings" access="Public" contract="Normal" get="Public" set="false" typeId="T:Common.Logging.EntLib.EntLibLoggerSettings" displayName="EntLibLoggerSettings" namespace="Common.Logging.EntLib" assembly="Common.Logging.EntLib" nullable="false" valueType="false">
            <documentation><summary> The settings used by this logger </summary></documentation>
          </property>
          <property name="LogWriter" id="P:Common.Logging.EntLib.EntLibLogger.LogWriter" access="Public" contract="Normal" get="Public" set="false" typeId="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter" displayName="LogWriter" namespace="Microsoft.Practices.EnterpriseLibrary.Logging" assembly="Microsoft.Practices.EnterpriseLibrary.Logging" nullable="false" valueType="false">
            <documentation><summary> The <see cref="P:Common.Logging.EntLib.EntLibLogger.LogWriter" nolink="true" /> used by this logger. </summary></documentation>
          </property>
          <property name="IsTraceEnabled" id="P:Common.Logging.EntLib.EntLibLogger.IsTraceEnabled" access="Public" contract="Override" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Gets a value indicating whether this instance is trace enabled. </summary></documentation>
            <implements name="IsTraceEnabled" id="P:Common.Logging.ILog.IsTraceEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsDebugEnabled" id="P:Common.Logging.EntLib.EntLibLogger.IsDebugEnabled" access="Public" contract="Override" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Gets a value indicating whether this instance is debug enabled. </summary></documentation>
            <implements name="IsDebugEnabled" id="P:Common.Logging.ILog.IsDebugEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsInfoEnabled" id="P:Common.Logging.EntLib.EntLibLogger.IsInfoEnabled" access="Public" contract="Override" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Gets a value indicating whether this instance is info enabled. </summary></documentation>
            <implements name="IsInfoEnabled" id="P:Common.Logging.ILog.IsInfoEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsWarnEnabled" id="P:Common.Logging.EntLib.EntLibLogger.IsWarnEnabled" access="Public" contract="Override" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Gets a value indicating whether this instance is warn enabled. </summary></documentation>
            <implements name="IsWarnEnabled" id="P:Common.Logging.ILog.IsWarnEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsErrorEnabled" id="P:Common.Logging.EntLib.EntLibLogger.IsErrorEnabled" access="Public" contract="Override" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Gets a value indicating whether this instance is error enabled. </summary></documentation>
            <implements name="IsErrorEnabled" id="P:Common.Logging.ILog.IsErrorEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsFatalEnabled" id="P:Common.Logging.EntLib.EntLibLogger.IsFatalEnabled" access="Public" contract="Override" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Gets a value indicating whether this instance is fatal enabled. </summary></documentation>
            <implements name="IsFatalEnabled" id="P:Common.Logging.ILog.IsFatalEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <method name="WriteInternal" displayName="WriteInternal" id="M:Common.Logging.EntLib.EntLibLogger.WriteInternal(Common.Logging.LogLevel,System.Object,System.Exception)" access="Family" contract="Override" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Actually sends the message to the EnterpriseLogging log system. </summary>
<param name="logLevel">the level of this log event.</param>
<param name="message">the message to log</param>
<param name="exception">the exception to log (may be null)</param></documentation>
            <parameter name="logLevel" typeId="T:Common.Logging.LogLevel" displayName="LogLevel" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="true" />
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="ShouldLog" displayName="ShouldLog" id="M:Common.Logging.EntLib.EntLibLogger.ShouldLog(Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)" access="Family" contract="Virtual" valueType="true">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> May be overridden for custom filter logic </summary>
<param name="log"></param>
<returns></returns></documentation>
            <parameter name="log" typeId="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry" displayName="LogEntry" namespace="Microsoft.Practices.EnterpriseLibrary.Logging" assembly="Microsoft.Practices.EnterpriseLibrary.Logging" nullable="false" valueType="false" />
          </method>
          <method name="WriteLog" displayName="WriteLog" id="M:Common.Logging.EntLib.EntLibLogger.WriteLog(Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)" access="Family" contract="Virtual" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Write the fully populated event to the log. </summary></documentation>
            <parameter name="log" typeId="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry" displayName="LogEntry" namespace="Microsoft.Practices.EnterpriseLibrary.Logging" assembly="Microsoft.Practices.EnterpriseLibrary.Logging" nullable="false" valueType="false" />
          </method>
          <method name="GetTraceEventType" displayName="GetTraceEventType" id="M:Common.Logging.EntLib.EntLibLogger.GetTraceEventType(Common.Logging.LogLevel)" access="Family" contract="Virtual" valueType="true">
            <returnType typeId="T:System.Diagnostics.TraceEventType" displayName="TraceEventType" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="true" />
            <documentation><summary> Translates a <see cref="T:Common.Logging.LogLevel" /> to a <see cref="T:System.Diagnostics.TraceEventType" />. </summary></documentation>
            <parameter name="logLevel" typeId="T:Common.Logging.LogLevel" displayName="LogLevel" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="true" />
          </method>
          <method name="CreateLogEntry" displayName="CreateLogEntry" id="M:Common.Logging.EntLib.EntLibLogger.CreateLogEntry(System.Diagnostics.TraceEventType)" access="Family" contract="Virtual" valueType="false">
            <returnType typeId="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry" displayName="LogEntry" namespace="Microsoft.Practices.EnterpriseLibrary.Logging" assembly="Microsoft.Practices.EnterpriseLibrary.Logging" nullable="false" valueType="false" />
            <documentation><summary> Creates a minimal log entry instance that will be passed into <see cref="M:Microsoft.Practices.EnterpriseLibrary.Logging.Logger.ShouldLog(Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)" /> to asap decide, whether this event should be logged. </summary>
<param name="traceEventType">trace event severity.</param>
<returns></returns></documentation>
            <parameter name="traceEventType" typeId="T:System.Diagnostics.TraceEventType" displayName="TraceEventType" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="true" />
          </method>
          <method name="PopulateLogEntry" displayName="PopulateLogEntry" id="M:Common.Logging.EntLib.EntLibLogger.PopulateLogEntry(Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry,System.Object,System.Exception)" access="Family" contract="Virtual" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Configures the log entry. </summary>
<param name="log">The log.</param>
<param name="message">The message.</param>
<param name="ex">The ex.</param></documentation>
            <parameter name="log" typeId="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry" displayName="LogEntry" namespace="Microsoft.Practices.EnterpriseLibrary.Logging" assembly="Microsoft.Practices.EnterpriseLibrary.Logging" nullable="false" valueType="false" />
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="ex" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="AddExceptionInfo" displayName="AddExceptionInfo" id="M:Common.Logging.EntLib.EntLibLogger.AddExceptionInfo(Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry,System.Exception)" access="Family" contract="Virtual" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Adds the exception info. </summary>
<param name="log">The log entry.</param>
<param name="exception">The exception.</param>
<returns></returns></documentation>
            <parameter name="log" typeId="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry" displayName="LogEntry" namespace="Microsoft.Practices.EnterpriseLibrary.Logging" assembly="Microsoft.Practices.EnterpriseLibrary.Logging" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetWriteHandler" displayName="GetWriteHandler" id="M:Common.Logging.EntLib.EntLibLogger.GetWriteHandler" access="Family" contract="Virtual" valueType="false" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.GetWriteHandler">
            <returnType typeId="T:Common.Logging.Factory.AbstractLogger.WriteHandler" displayName="AbstractLogger.WriteHandler" namespace="Common.Logging.Factory" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Override this method to use a different method than <see cref="M:Common.Logging.Factory.AbstractLogger.WriteInternal(Common.Logging.LogLevel,System.Object,System.Exception)" /> for writing log events to the underlying log system. </summary></documentation>
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.EntLib.EntLibLogger.Trace(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.EntLib.EntLibLogger.Trace(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Trace" /> level including the stack trace of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="TraceFormat" displayName="TraceFormat" id="M:Common.Logging.EntLib.EntLibLogger.TraceFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.TraceFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="TraceFormat" id="M:Common.Logging.ILog.TraceFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="TraceFormat" displayName="TraceFormat" id="M:Common.Logging.EntLib.EntLibLogger.TraceFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.TraceFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="TraceFormat" id="M:Common.Logging.ILog.TraceFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="TraceFormat" displayName="TraceFormat" id="M:Common.Logging.EntLib.EntLibLogger.TraceFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.TraceFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="TraceFormat" id="M:Common.Logging.ILog.TraceFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="TraceFormat" displayName="TraceFormat" id="M:Common.Logging.EntLib.EntLibLogger.TraceFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.TraceFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="TraceFormat" id="M:Common.Logging.ILog.TraceFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.EntLib.EntLibLogger.Trace(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.EntLib.EntLibLogger.Trace(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.EntLib.EntLibLogger.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.EntLib.EntLibLogger.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.EntLib.EntLibLogger.Debug(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.EntLib.EntLibLogger.Debug(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Debug" /> level including the stack Debug of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="DebugFormat" displayName="DebugFormat" id="M:Common.Logging.EntLib.EntLibLogger.DebugFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.DebugFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="DebugFormat" id="M:Common.Logging.ILog.DebugFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="DebugFormat" displayName="DebugFormat" id="M:Common.Logging.EntLib.EntLibLogger.DebugFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.DebugFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="DebugFormat" id="M:Common.Logging.ILog.DebugFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="DebugFormat" displayName="DebugFormat" id="M:Common.Logging.EntLib.EntLibLogger.DebugFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.DebugFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="DebugFormat" id="M:Common.Logging.ILog.DebugFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="DebugFormat" displayName="DebugFormat" id="M:Common.Logging.EntLib.EntLibLogger.DebugFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.DebugFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="DebugFormat" id="M:Common.Logging.ILog.DebugFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.EntLib.EntLibLogger.Debug(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.EntLib.EntLibLogger.Debug(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.EntLib.EntLibLogger.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.EntLib.EntLibLogger.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.EntLib.EntLibLogger.Info(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.EntLib.EntLibLogger.Info(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Info" /> level including the stack Info of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="InfoFormat" displayName="InfoFormat" id="M:Common.Logging.EntLib.EntLibLogger.InfoFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.InfoFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="InfoFormat" id="M:Common.Logging.ILog.InfoFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="InfoFormat" displayName="InfoFormat" id="M:Common.Logging.EntLib.EntLibLogger.InfoFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.InfoFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="InfoFormat" id="M:Common.Logging.ILog.InfoFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="InfoFormat" displayName="InfoFormat" id="M:Common.Logging.EntLib.EntLibLogger.InfoFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.InfoFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="InfoFormat" id="M:Common.Logging.ILog.InfoFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="InfoFormat" displayName="InfoFormat" id="M:Common.Logging.EntLib.EntLibLogger.InfoFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.InfoFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="InfoFormat" id="M:Common.Logging.ILog.InfoFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.EntLib.EntLibLogger.Info(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.EntLib.EntLibLogger.Info(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.EntLib.EntLibLogger.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.EntLib.EntLibLogger.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.EntLib.EntLibLogger.Warn(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.EntLib.EntLibLogger.Warn(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Warn" /> level including the stack Warn of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="WarnFormat" displayName="WarnFormat" id="M:Common.Logging.EntLib.EntLibLogger.WarnFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.WarnFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="WarnFormat" id="M:Common.Logging.ILog.WarnFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="WarnFormat" displayName="WarnFormat" id="M:Common.Logging.EntLib.EntLibLogger.WarnFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.WarnFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="WarnFormat" id="M:Common.Logging.ILog.WarnFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="WarnFormat" displayName="WarnFormat" id="M:Common.Logging.EntLib.EntLibLogger.WarnFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.WarnFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="WarnFormat" id="M:Common.Logging.ILog.WarnFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="WarnFormat" displayName="WarnFormat" id="M:Common.Logging.EntLib.EntLibLogger.WarnFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.WarnFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="WarnFormat" id="M:Common.Logging.ILog.WarnFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.EntLib.EntLibLogger.Warn(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.EntLib.EntLibLogger.Warn(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.EntLib.EntLibLogger.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.EntLib.EntLibLogger.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.EntLib.EntLibLogger.Error(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.EntLib.EntLibLogger.Error(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Error" /> level including the stack Error of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ErrorFormat" displayName="ErrorFormat" id="M:Common.Logging.EntLib.EntLibLogger.ErrorFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.ErrorFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="ErrorFormat" id="M:Common.Logging.ILog.ErrorFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ErrorFormat" displayName="ErrorFormat" id="M:Common.Logging.EntLib.EntLibLogger.ErrorFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.ErrorFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="ErrorFormat" id="M:Common.Logging.ILog.ErrorFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ErrorFormat" displayName="ErrorFormat" id="M:Common.Logging.EntLib.EntLibLogger.ErrorFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.ErrorFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="ErrorFormat" id="M:Common.Logging.ILog.ErrorFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ErrorFormat" displayName="ErrorFormat" id="M:Common.Logging.EntLib.EntLibLogger.ErrorFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.ErrorFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="ErrorFormat" id="M:Common.Logging.ILog.ErrorFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.EntLib.EntLibLogger.Error(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.EntLib.EntLibLogger.Error(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.EntLib.EntLibLogger.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.EntLib.EntLibLogger.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.EntLib.EntLibLogger.Fatal(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.EntLib.EntLibLogger.Fatal(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level including the stack Fatal of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="FatalFormat" displayName="FatalFormat" id="M:Common.Logging.EntLib.EntLibLogger.FatalFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.FatalFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="FatalFormat" id="M:Common.Logging.ILog.FatalFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="FatalFormat" displayName="FatalFormat" id="M:Common.Logging.EntLib.EntLibLogger.FatalFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.FatalFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="FatalFormat" id="M:Common.Logging.ILog.FatalFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="FatalFormat" displayName="FatalFormat" id="M:Common.Logging.EntLib.EntLibLogger.FatalFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.FatalFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="FatalFormat" id="M:Common.Logging.ILog.FatalFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="FatalFormat" displayName="FatalFormat" id="M:Common.Logging.EntLib.EntLibLogger.FatalFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.FatalFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="FatalFormat" id="M:Common.Logging.ILog.FatalFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.EntLib.EntLibLogger.Fatal(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.EntLib.EntLibLogger.Fatal(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.EntLib.EntLibLogger.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.EntLib.EntLibLogger.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Common.Logging.EntLib.EntLibLogger.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Equals" displayName="Equals" id="M:Common.Logging.EntLib.EntLibLogger.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Common.Logging.EntLib.EntLibLogger.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="GetType" displayName="GetType" id="M:Common.Logging.EntLib.EntLibLogger.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Common.Logging.EntLib.EntLibLogger.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Common.Logging.EntLib.EntLibLogger.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
        </class>
        <class name="EntLibLoggerFactoryAdapter" displayName="EntLibLoggerFactoryAdapter" namespace="Common.Logging.EntLib" id="T:Common.Logging.EntLib.EntLibLoggerFactoryAdapter" access="Public">
          <documentation><summary> Adapts the EnterpriseLibrary 3.1 logging system to Common.Logging. </summary>
<remarks> The following configuration property values may be configured: <list type="bullet"><item>DefaultPriority (see <see cref="P:Common.Logging.EntLib.EntLibLoggerFactoryAdapter.DefaultPriority" />)</item><item>ExceptionFormat (see <see cref="P:Common.Logging.EntLib.EntLibLoggerFactoryAdapter.ExceptionFormat" />)</item></list></remarks>
<example> The following snippet shows how to configure EntLib logging for Common.Logging: <code>&lt;configuration&gt;
  &lt;configSections&gt;
      &lt;section name="logging" type="Common.Logging.ConfigurationSectionHandler, Common.Logging" /&gt;
      &lt;section name="loggingConfiguration" type="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings, Microsoft.Practices.EnterpriseLibrary.Logging, Version=3.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;
  &lt;/configSections&gt;
  &lt;common&gt;
    &lt;logging&gt;
      &lt;factoryAdapter type="Common.Logging.EntLib.EntLibLoggerFactoryAdapter, Common.Logging.EntLib"&gt;
        &lt;arg key="DefaultPriority" value="-1" /&gt;
      &lt;/factoryAdapter&gt;
    &lt;/logging&gt;
  &lt;/common&gt;
  &lt;loggingConfiguration name="Logging Application Block"
&lt;-- configure enterprise logging application block here --&gt;
...
  &lt;/loggingConfiguration&gt;
&lt;/configuration&gt;
</code></example>
<author>Mark Pollack</author>
<author>Erich Eichinger</author></documentation>
          <baseType name="AbstractCachingLoggerFactoryAdapter" id="T:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter" displayName="AbstractCachingLoggerFactoryAdapter" namespace="Common.Logging.Factory" assembly="Common.Logging" />
          <implementsClass type="Common.Logging.ILoggerFactoryAdapter" id="T:Common.Logging.ILoggerFactoryAdapter" displayName="ILoggerFactoryAdapter" namespace="Common.Logging" inherited="true" />
          <constructor name=".ctor" id="M:Common.Logging.EntLib.EntLibLoggerFactoryAdapter.#ctor" access="Public" contract="Normal" overload="1">
            <documentation><summary> Initializes a new instance of the <see cref="T:Common.Logging.EntLib.EntLibLoggerFactoryAdapter" /> class. </summary></documentation>
          </constructor>
          <constructor name=".ctor" id="M:Common.Logging.EntLib.EntLibLoggerFactoryAdapter.#ctor(System.Int32,System.String,Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter)" access="Public" contract="Normal" overload="2">
            <documentation><summary> Initializes a new instance of the <see cref="T:Common.Logging.EntLib.EntLibLoggerFactoryAdapter" /> class with the specified configuration parameters. </summary></documentation>
            <parameter name="defaultPriority" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="exceptionFormat" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="logWriter" typeId="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter" displayName="LogWriter" namespace="Microsoft.Practices.EnterpriseLibrary.Logging" assembly="Microsoft.Practices.EnterpriseLibrary.Logging" nullable="false" valueType="false" />
          </constructor>
          <constructor name=".ctor" id="M:Common.Logging.EntLib.EntLibLoggerFactoryAdapter.#ctor(System.Collections.Specialized.NameValueCollection)" access="Public" contract="Normal" overload="3">
            <documentation><summary> Initializes a new instance of the <see cref="T:Common.Logging.EntLib.EntLibLoggerFactoryAdapter" /> class. </summary>
<remarks>passed in values are not used, configuration is external to EntLib logging API</remarks>
<param name="properties">The properties.</param></documentation>
            <parameter name="properties" typeId="T:System.Collections.Specialized.NameValueCollection" displayName="NameValueCollection" namespace="System.Collections.Specialized" assembly="System" nullable="false" valueType="false" />
          </constructor>
          <property name="DefaultPriority" id="P:Common.Logging.EntLib.EntLibLoggerFactoryAdapter.DefaultPriority" access="Public" contract="Normal" get="Public" set="false" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> The default priority used to log events. </summary>
<remarks>defaults to <see cref="F:Common.Logging.EntLib.EntLibLoggerSettings.DEFAULTPRIORITY" /></remarks></documentation>
          </property>
          <property name="ExceptionFormat" id="P:Common.Logging.EntLib.EntLibLoggerFactoryAdapter.ExceptionFormat" access="Public" contract="Normal" get="Public" set="false" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <documentation><summary> The format string used for formatting exceptions </summary>
<remarks> defaults to <see cref="F:Common.Logging.EntLib.EntLibLoggerSettings.DEFAULTEXCEPTIONFORMAT" /></remarks></documentation>
          </property>
          <property name="LogWriter" id="P:Common.Logging.EntLib.EntLibLoggerFactoryAdapter.LogWriter" access="Public" contract="Normal" get="Public" set="false" typeId="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter" displayName="LogWriter" namespace="Microsoft.Practices.EnterpriseLibrary.Logging" assembly="Microsoft.Practices.EnterpriseLibrary.Logging" nullable="false" valueType="false">
            <documentation><summary> the <see cref="F:Common.Logging.EntLib.EntLibLoggerFactoryAdapter._logWriter" /> to write log events to. </summary>
<remarks> defaults to <see cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.Logger.Writer" />. </remarks></documentation>
          </property>
          <method name="CreateLogger" displayName="CreateLogger" id="M:Common.Logging.EntLib.EntLibLoggerFactoryAdapter.CreateLogger(System.String)" access="Family" contract="Override" valueType="false" overload="1">
            <returnType typeId="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Creates a new <see cref="T:Common.Logging.EntLib.EntLibLogger" /> instance. </summary></documentation>
            <parameter name="name" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="CreateLogger" displayName="CreateLogger" id="M:Common.Logging.EntLib.EntLibLoggerFactoryAdapter.CreateLogger(System.String,Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter,Common.Logging.EntLib.EntLibLoggerSettings)" access="Family" contract="Virtual" valueType="false" overload="2">
            <returnType typeId="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Creates a new <see cref="T:Common.Logging.EntLib.EntLibLogger" /> instance. </summary></documentation>
            <parameter name="name" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="logWriter" typeId="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter" displayName="LogWriter" namespace="Microsoft.Practices.EnterpriseLibrary.Logging" assembly="Microsoft.Practices.EnterpriseLibrary.Logging" nullable="false" valueType="false" />
            <parameter name="settings" typeId="T:Common.Logging.EntLib.EntLibLoggerSettings" displayName="EntLibLoggerSettings" namespace="Common.Logging.EntLib" assembly="Common.Logging.EntLib" nullable="false" valueType="false" />
          </method>
          <method name="ClearLoggerCache" displayName="ClearLoggerCache" id="M:Common.Logging.EntLib.EntLibLoggerFactoryAdapter.ClearLoggerCache" access="Family" contract="Normal" valueType="true" declaringType="Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.ClearLoggerCache">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Purges all loggers from cache </summary></documentation>
          </method>
          <method name="GetLogger" displayName="GetLogger" id="M:Common.Logging.EntLib.EntLibLoggerFactoryAdapter.GetLogger(System.Type)" access="Public" contract="Final" valueType="false" declaringType="Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.GetLogger(System.Type)" overload="1">
            <returnType typeId="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Get a ILog instance by <see cref="T:System.Type" />. </summary></documentation>
            <parameter name="type" typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="GetLogger" id="M:Common.Logging.ILoggerFactoryAdapter.GetLogger(System.Type)" interface="ILoggerFactoryAdapter" interfaceId="T:Common.Logging.ILoggerFactoryAdapter" assembly="Common.Logging" declaringType="Common.Logging.ILoggerFactoryAdapter" />
          </method>
          <method name="GetLogger" displayName="GetLogger" id="M:Common.Logging.EntLib.EntLibLoggerFactoryAdapter.GetLogger(System.String)" access="Public" contract="Final" valueType="false" declaringType="Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.GetLogger(System.String)" overload="2">
            <returnType typeId="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Get a ILog instance by name. </summary></documentation>
            <parameter name="name" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="GetLogger" id="M:Common.Logging.ILoggerFactoryAdapter.GetLogger(System.String)" interface="ILoggerFactoryAdapter" interfaceId="T:Common.Logging.ILoggerFactoryAdapter" assembly="Common.Logging" declaringType="Common.Logging.ILoggerFactoryAdapter" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Common.Logging.EntLib.EntLibLoggerFactoryAdapter.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Equals" displayName="Equals" id="M:Common.Logging.EntLib.EntLibLoggerFactoryAdapter.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Common.Logging.EntLib.EntLibLoggerFactoryAdapter.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="GetType" displayName="GetType" id="M:Common.Logging.EntLib.EntLibLoggerFactoryAdapter.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Common.Logging.EntLib.EntLibLoggerFactoryAdapter.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Common.Logging.EntLib.EntLibLoggerFactoryAdapter.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
        </class>
        <class name="EntLibLoggerSettings" displayName="EntLibLoggerSettings" namespace="Common.Logging.EntLib" id="T:Common.Logging.EntLib.EntLibLoggerSettings" access="Public">
          <documentation><summary> Holds configuration settings for <see cref="T:Common.Logging.EntLib.EntLibLogger" />s. </summary>
<author>Erich Eichinger</author></documentation>
          <constructor name=".ctor" id="M:Common.Logging.EntLib.EntLibLoggerSettings.#ctor(System.Int32,System.String)" access="Public" contract="Normal">
            <documentation><summary> Initializes a new instance. </summary></documentation>
            <parameter name="defaultPriority" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="exceptionFormat" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </constructor>
          <field name="priority" id="F:Common.Logging.EntLib.EntLibLoggerSettings.priority" access="Public" contract="Normal" initOnly="true" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> the default priority to be used. </summary></documentation>
          </field>
          <field name="exceptionFormat" id="F:Common.Logging.EntLib.EntLibLoggerSettings.exceptionFormat" access="Public" contract="Normal" initOnly="true" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <documentation><summary> the exception format to be used. </summary></documentation>
          </field>
          <field name="DEFAULTPRIORITY" id="F:Common.Logging.EntLib.EntLibLoggerSettings.DEFAULTPRIORITY" access="Public" contract="Static" initOnly="true" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> the default priority used for logging. </summary></documentation>
          </field>
          <field name="DEFAULTEXCEPTIONFORMAT" id="F:Common.Logging.EntLib.EntLibLoggerSettings.DEFAULTEXCEPTIONFORMAT" access="Public" contract="Static" initOnly="true" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <documentation><summary> the default <see cref="F:Common.Logging.EntLib.EntLibLoggerSettings.exceptionFormat" /> used for formatting error message </summary>
<remarks> "Exception[ message = $(exception.message), source = $(exception.source), targetsite = $(exception.targetsite), stacktrace = $(exception.stacktrace) ]" </remarks></documentation>
          </field>
          <method name="ToString" displayName="ToString" id="M:Common.Logging.EntLib.EntLibLoggerSettings.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Equals" displayName="Equals" id="M:Common.Logging.EntLib.EntLibLoggerSettings.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Common.Logging.EntLib.EntLibLoggerSettings.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="GetType" displayName="GetType" id="M:Common.Logging.EntLib.EntLibLoggerSettings.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Common.Logging.EntLib.EntLibLoggerSettings.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Common.Logging.EntLib.EntLibLoggerSettings.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
        </class>
        <class name="SeverityFilter" displayName="SeverityFilter" namespace="Common.Logging.EntLib" id="T:Common.Logging.EntLib.SeverityFilter" access="Public">
          <documentation><summary> Filters <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry" />s by severity (see <see cref="T:System.Diagnostics.TraceEventType" />). </summary>
<author>Erich Eichinger</author></documentation>
          <attribute name="Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationElementTypeAttribute">
            <property name="ConfigurationType" type="System.Type" value="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomLogFilterData" />
          </attribute>
          <baseType name="LogFilter" id="T:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogFilter" displayName="LogFilter" namespace="Microsoft.Practices.EnterpriseLibrary.Logging.Filters" assembly="Microsoft.Practices.EnterpriseLibrary.Logging" />
          <implementsClass type="Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter" id="T:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter" displayName="ILogFilter" namespace="Microsoft.Practices.EnterpriseLibrary.Logging.Filters" inherited="true" />
          <constructor name=".ctor" id="M:Common.Logging.EntLib.SeverityFilter.#ctor(System.String,System.Int32)" access="Public" contract="Normal" overload="1">
            <documentation><summary> Creates a new filter instance </summary></documentation>
            <parameter name="name" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="severityMask" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </constructor>
          <constructor name=".ctor" id="M:Common.Logging.EntLib.SeverityFilter.#ctor(System.String,System.Diagnostics.TraceEventType)" access="Public" contract="Normal" overload="2">
            <documentation><summary> Creates a new filter instance </summary></documentation>
            <parameter name="name" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="severityMask" typeId="T:System.Diagnostics.TraceEventType" displayName="TraceEventType" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="true" />
          </constructor>
          <constructor name=".ctor" id="M:Common.Logging.EntLib.SeverityFilter.#ctor(System.Collections.Specialized.NameValueCollection)" access="Public" contract="Normal" overload="3">
            <documentation><summary> Creates a new filter instance </summary></documentation>
            <parameter name="attributes" typeId="T:System.Collections.Specialized.NameValueCollection" displayName="NameValueCollection" namespace="System.Collections.Specialized" assembly="System" nullable="false" valueType="false" />
          </constructor>
          <property name="SeverityMask" id="P:Common.Logging.EntLib.SeverityFilter.SeverityMask" access="Public" contract="Normal" get="Public" set="Public" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Bitmask to identify severity levels that should be logged. </summary></documentation>
          </property>
          <property name="Name" id="P:Common.Logging.EntLib.SeverityFilter.Name" access="Public" contract="Final" declaringType="Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogFilter" declaringAssembly="Microsoft.Practices.EnterpriseLibrary.Logging" declaringId="P:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogFilter.Name" get="Public" set="false" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <documentation><summary></summary></documentation>
            <implements name="Name" id="P:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter.Name" interface="ILogFilter" assembly="Microsoft.Practices.EnterpriseLibrary.Logging" interfaceId="T:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter" declaringType="Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter" />
          </property>
          <method name="Filter" displayName="Filter" id="M:Common.Logging.EntLib.SeverityFilter.Filter(Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)" access="Public" contract="Override" valueType="true">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Check, if <paramref name="log" /> severity matches <see cref="F:Common.Logging.EntLib.SeverityFilter.severityMask" />. </summary>
<param name="log"></param>
<returns></returns></documentation>
            <parameter name="log" typeId="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry" displayName="LogEntry" namespace="Microsoft.Practices.EnterpriseLibrary.Logging" assembly="Microsoft.Practices.EnterpriseLibrary.Logging" nullable="false" valueType="false" />
            <implements name="Filter" id="M:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter.Filter(Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)" interface="ILogFilter" interfaceId="T:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter" assembly="Microsoft.Practices.EnterpriseLibrary.Logging" declaringType="Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter" />
          </method>
          <method name="ShouldLog" displayName="ShouldLog" id="M:Common.Logging.EntLib.SeverityFilter.ShouldLog(System.Diagnostics.TraceEventType)" access="Public" contract="Normal" valueType="true">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Checks, whether the specified severity is allowed to log. </summary></documentation>
            <parameter name="severity" typeId="T:System.Diagnostics.TraceEventType" displayName="TraceEventType" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="true" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Common.Logging.EntLib.SeverityFilter.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Equals" displayName="Equals" id="M:Common.Logging.EntLib.SeverityFilter.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Common.Logging.EntLib.SeverityFilter.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="GetType" displayName="GetType" id="M:Common.Logging.EntLib.SeverityFilter.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Common.Logging.EntLib.SeverityFilter.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Common.Logging.EntLib.SeverityFilter.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
        </class>
      </namespace>
    </module>
  </assembly>
  <assembly name="Common.Logging.EntLib41" version="2.0.0.0">
    <documentation><summary>
  <para> This assembly contains the adapter to plug Microsoft Enterprise Logging Library 4.1. into the Common.Logging infrastructure. </para>
  <para>For an example on how to configure <list type="bullet"><item>Common.Logging to render its output to Entlib, see <see cref="T:Common.Logging.EntLib.EntLibLoggerFactoryAdapter" />.</item><item>Entlib to render its output to Common.Logging use <see cref="T:Common.Logging.EntLib.CommonLoggingEntlibTraceListener" />.</item></list></para>
</summary></documentation>
    <assemblyReference name="Microsoft.Practices.EnterpriseLibrary.Logging" />
    <assemblyReference name="mscorlib" />
    <assemblyReference name="Common.Logging" />
    <assemblyReference name="System" />
    <assemblyReference name="Microsoft.Practices.ObjectBuilder2" />
    <assemblyReference name="Microsoft.Practices.EnterpriseLibrary.Common" />
    <assemblyReference name="System.Configuration" />
    <attribute name="System.Reflection.AssemblyTrademarkAttribute" target="assembly">
      <property name="Trademark" type="System.String" value="Apache License, Version 2.0" />
    </attribute>
    <attribute name="System.Reflection.AssemblyCopyrightAttribute" target="assembly">
      <property name="Copyright" type="System.String" value="Copyright 2006-2009 the Common Infrastructure Libraries Team." />
    </attribute>
    <attribute name="System.Runtime.CompilerServices.RuntimeCompatibilityAttribute" target="assembly">
      <property name="WrapNonExceptionThrows" type="System.Boolean" value="True" />
    </attribute>
    <attribute name="System.Reflection.AssemblyCompanyAttribute" target="assembly">
      <property name="Company" type="System.String" value="http://netcommon.sourceforge.net/" />
    </attribute>
    <attribute name="System.Reflection.AssemblyInformationalVersionAttribute" target="assembly">
      <property name="InformationalVersion" type="System.String" value="2.0.0.0; net-2.0.win32; release" />
    </attribute>
    <attribute name="System.Reflection.AssemblyConfigurationAttribute" target="assembly">
      <property name="Configuration" type="System.String" value="net-2.0.win32; release" />
    </attribute>
    <attribute name="System.CLSCompliantAttribute" target="assembly">
      <property name="IsCompliant" type="System.Boolean" value="True" />
    </attribute>
    <attribute name="System.Runtime.CompilerServices.CompilationRelaxationsAttribute" target="assembly">
      <property name="CompilationRelaxations" type="System.Int32" value="8" />
    </attribute>
    <attribute name="System.Runtime.InteropServices.ComVisibleAttribute" target="assembly">
      <property name="Value" type="System.Boolean" value="False" />
    </attribute>
    <attribute name="System.Reflection.AssemblyProductAttribute" target="assembly">
      <property name="Product" type="System.String" value="Common Logging Framework Enterprise Library 4.1 Adapter" />
    </attribute>
    <attribute name="System.Diagnostics.DebuggableAttribute" target="assembly">
      <property name="IsJITTrackingEnabled" type="System.Boolean" value="True" />
      <property name="IsJITOptimizerDisabled" type="System.Boolean" value="True" />
      <property name="DebuggingFlags" type="System.Diagnostics.DebuggableAttribute+DebuggingModes" value="(DebuggingModes.Default|DebuggingModes.IgnoreSymbolStoreSequencePoints|DebuggingModes.EnableEditAndContinue|DebuggingModes.DisableOptimizations)" />
    </attribute>
    <module name="Common.Logging.EntLib41.dll">
      <namespace name="Common.Logging.EntLib">
        <documentation><summary>
  <para> This namespace contains the implementations to plug Microsoft Enterprise Logging Library 4.1. into the Common.Logging infrastructure. </para>
  <para>For an example on how to configure <list type="bullet"><item>Common.Logging to render its output to Entlib, see <see cref="T:Common.Logging.EntLib.EntLibLoggerFactoryAdapter" />.</item><item>Entlib to render its output to Common.Logging use <see cref="T:Common.Logging.EntLib.CommonLoggingEntlibTraceListener" />.</item></list></para>
</summary></documentation>
        <class name="CommonLoggingEntlibTraceListener" displayName="CommonLoggingEntlibTraceListener" namespace="Common.Logging.EntLib" id="T:Common.Logging.EntLib.CommonLoggingEntlibTraceListener" access="Public">
          <documentation><summary> Use this <see cref="T:System.Diagnostics.TraceListener" /> implementation to route all Entlib logging events to the Common.Logging infrastructure. </summary>
<remarks> See <see cref="T:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData" /> for a list of properties to configure. </remarks>
<example> To route all <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Logger" /> events to Common.Logging, configure <see cref="T:Common.Logging.EntLib.CommonLoggingEntlibTraceListener" nolink="true" />: <code lang="XML">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;configuration&gt;
    &lt;configSections&gt;
        &lt;section name="loggingConfiguration" 
type="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings, 
Microsoft.Practices.EnterpriseLibrary.Logging, Version=4.1.0.0, Culture=neutral, 
PublicKeyToken=b03f5f7f11d50a3a" /&gt;
    &lt;/configSections&gt;
    &lt;loggingConfiguration name="Logging Application Block" tracingEnabled="true"
        defaultCategory="General" logWarningsWhenNoCategoriesMatch="true"&gt;
        &lt;listeners&gt;
            &lt;add name="Common.Logging Listener" 
                 type="Common.Logging.EntLib.CommonLoggingEntlibTraceListener, Common.Logging.EntLib"
                 listenerDataType="Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData, 
Common.Logging.EntLib"
                 loggerNameFormat="{listenerName}.{sourceName}"
                 formatter="Text Formatter"
                 /&gt;
        &lt;/listeners&gt;
        &lt;formatters&gt;
            &lt;add template="Timestamp: {timestamp}&amp;#xD;&amp;#xA;Message: {message}&amp;#xD;&amp;#xA;Category: 
{category}&amp;#xD;&amp;#xA;Priority: {priority}&amp;#xD;&amp;#xA;EventId: {eventid}&amp;#xD;&amp;#xA;Severity: 
{severity}&amp;#xD;&amp;#xA;Title:{title}&amp;#xD;&amp;#xA;Machine: {machine}&amp;#xD;&amp;#xA;Application Domain: 
{appDomain}&amp;#xD;&amp;#xA;Process Id: {processId}&amp;#xD;&amp;#xA;Process Name: {processName}&amp;#xD;&amp;#xA;Win32 
Thread Id: {win32ThreadId}&amp;#xD;&amp;#xA;Thread Name: {threadName}&amp;#xD;&amp;#xA;Extended Properties: 
{dictionary({key} - {value}&amp;#xD;&amp;#xA;)}"
                type="Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter, 
Microsoft.Practices.EnterpriseLibrary.Logging, Version=4.1.0.0, Culture=neutral, 
PublicKeyToken=b03f5f7f11d50a3a"
                name="Text Formatter" /&gt;
        &lt;/formatters&gt;
        &lt;specialSources&gt;
            &lt;allEvents switchValue="All" name="All Events"&gt;
                &lt;listeners&gt;
                    &lt;add name="Test Capturing Listener" /&gt;
                &lt;/listeners&gt;
            &lt;/allEvents&gt;
        &lt;/specialSources&gt;
    &lt;/loggingConfiguration&gt;
&lt;/configuration&gt;
</code></example>
<author>Erich Eichinger</author></documentation>
          <baseType name="FormattedTraceListenerBase" id="T:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTraceListenerBase" displayName="FormattedTraceListenerBase" namespace="Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners" assembly="Microsoft.Practices.EnterpriseLibrary.Logging">
            <baseType name="TraceListener" id="T:System.Diagnostics.TraceListener" displayName="TraceListener" namespace="System.Diagnostics" assembly="System">
              <baseType name="MarshalByRefObject" id="T:System.MarshalByRefObject" displayName="MarshalByRefObject" namespace="System" assembly="mscorlib" />
            </baseType>
          </baseType>
          <implementsClass type="System.IDisposable" id="T:System.IDisposable" displayName="IDisposable" namespace="System" inherited="true" />
          <implementsClass type="Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IInstrumentationEventProvider" id="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IInstrumentationEventProvider" displayName="IInstrumentationEventProvider" namespace="Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation" inherited="true" />
          <constructor name=".ctor" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.#ctor(Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData,Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter)" access="Public" contract="Normal">
            <documentation><summary> Initializes this instance from <see cref="T:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData" /> configuration information. </summary></documentation>
            <parameter name="data" typeId="T:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData" displayName="CommonLoggingEntlibTraceListenerData" namespace="Common.Logging.EntLib" assembly="Common.Logging.EntLib41" nullable="false" valueType="false" />
            <parameter name="formatter" typeId="T:Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter" displayName="ILogFormatter" namespace="Microsoft.Practices.EnterpriseLibrary.Logging.Formatters" assembly="Microsoft.Practices.EnterpriseLibrary.Logging" nullable="false" valueType="false" />
          </constructor>
          <property name="LoggerNameFormat" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.LoggerNameFormat" access="Public" contract="Normal" get="Public" set="false" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <documentation><summary> Format to use for creating the logger name. Defaults to "{listenerName}.{sourceName}". </summary>
<remarks> Available placeholders are: <list type="bullet"><item>{listenerName}: the configured name of this listener instance.</item><item>{sourceName}: the trace source name an event originates from (see e.g. <see cref="M:System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])" />.</item></list></remarks></documentation>
          </property>
          <property name="InstrumentationProvider" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.InstrumentationProvider" access="Family" contract="Normal" declaringType="Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTraceListenerBase" declaringAssembly="Microsoft.Practices.EnterpriseLibrary.Logging" declaringId="P:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTraceListenerBase.InstrumentationProvider" get="Family" set="false" typeId="T:Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.LoggingInstrumentationProvider" displayName="LoggingInstrumentationProvider" namespace="Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation" assembly="Microsoft.Practices.EnterpriseLibrary.Logging" nullable="false" valueType="false">
            <documentation><summary></summary></documentation>
          </property>
          <property name="IsThreadSafe" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.IsThreadSafe" access="Public" contract="Override" declaringType="Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTraceListenerBase" declaringAssembly="Microsoft.Practices.EnterpriseLibrary.Logging" declaringId="P:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTraceListenerBase.IsThreadSafe" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary></summary></documentation>
          </property>
          <property name="Formatter" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.Formatter" access="Public" contract="Normal" declaringType="Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTraceListenerBase" declaringAssembly="Microsoft.Practices.EnterpriseLibrary.Logging" declaringId="P:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTraceListenerBase.Formatter" get="Public" set="Public" typeId="T:Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter" displayName="ILogFormatter" namespace="Microsoft.Practices.EnterpriseLibrary.Logging.Formatters" assembly="Microsoft.Practices.EnterpriseLibrary.Logging" nullable="false" valueType="false">
            <documentation><summary></summary></documentation>
          </property>
          <property name="Attributes" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.Attributes" access="Public" contract="Normal" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="P:System.Diagnostics.TraceListener.Attributes" get="Public" set="false" typeId="T:System.Collections.Specialized.StringDictionary" displayName="StringDictionary" namespace="System.Collections.Specialized" assembly="System" nullable="false" valueType="false">
            <documentation><summary></summary></documentation>
          </property>
          <property name="Name" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.Name" access="Public" contract="Virtual" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="P:System.Diagnostics.TraceListener.Name" get="Public" set="Public" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <documentation><summary></summary></documentation>
          </property>
          <property name="IndentLevel" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.IndentLevel" access="Public" contract="Normal" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="P:System.Diagnostics.TraceListener.IndentLevel" get="Public" set="Public" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary></summary></documentation>
          </property>
          <property name="IndentSize" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.IndentSize" access="Public" contract="Normal" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="P:System.Diagnostics.TraceListener.IndentSize" get="Public" set="Public" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary></summary></documentation>
          </property>
          <property name="Filter" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.Filter" access="Public" contract="Normal" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="P:System.Diagnostics.TraceListener.Filter" get="Public" set="Public" typeId="T:System.Diagnostics.TraceFilter" displayName="TraceFilter" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="false">
            <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
              <property name="Value" type="System.Boolean" value="False" />
            </attribute>
            <documentation><summary></summary></documentation>
          </property>
          <property name="NeedIndent" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.NeedIndent" access="Family" contract="Normal" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="P:System.Diagnostics.TraceListener.NeedIndent" get="Family" set="Family" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary></summary></documentation>
          </property>
          <property name="TraceOutputOptions" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.TraceOutputOptions" access="Public" contract="Normal" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="P:System.Diagnostics.TraceListener.TraceOutputOptions" get="Public" set="Public" typeId="T:System.Diagnostics.TraceOptions" displayName="TraceOptions" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="true">
            <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
              <property name="Value" type="System.Boolean" value="False" />
            </attribute>
            <documentation><summary></summary></documentation>
          </property>
          <method name="Write" displayName="Write" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.Write(System.String)" access="Public" contract="Override" valueType="true" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> NOT USED BY ENTLIB </summary>
<exception cref="T:System.NotImplementedException" /></documentation>
            <parameter name="message" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="WriteLine" displayName="WriteLine" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.WriteLine(System.String)" access="Public" contract="Override" valueType="true" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> NOT USED BY ENTLIB </summary>
<exception cref="T:System.NotImplementedException" /></documentation>
            <parameter name="message" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="TraceData" displayName="TraceData" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" access="Public" contract="Override" valueType="true" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Overridden to redirect to call <see cref="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.Log(System.Diagnostics.TraceEventType,System.String,System.Int32,System.String,System.Object[])" />. </summary></documentation>
            <parameter name="eventCache" typeId="T:System.Diagnostics.TraceEventCache" displayName="TraceEventCache" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="false" />
            <parameter name="source" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="eventType" typeId="T:System.Diagnostics.TraceEventType" displayName="TraceEventType" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="true" />
            <parameter name="id" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="data" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Log" displayName="Log" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.Log(System.Diagnostics.TraceEventType,System.String,System.Int32,System.String,System.Object[])" access="Family" contract="Virtual" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Logs the given message to the Common.Logging infrastructure </summary></documentation>
            <parameter name="eventType" typeId="T:System.Diagnostics.TraceEventType" displayName="TraceEventType" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="true" />
            <parameter name="source" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="id" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
          </method>
          <method name="GetInstrumentationEventProvider" displayName="GetInstrumentationEventProvider" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.GetInstrumentationEventProvider" access="Public" contract="Final" valueType="false" declaringType="Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTraceListenerBase" declaringAssembly="Microsoft.Practices.EnterpriseLibrary.Logging" declaringId="M:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTraceListenerBase.GetInstrumentationEventProvider">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
            <implements name="GetInstrumentationEventProvider" id="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IInstrumentationEventProvider.GetInstrumentationEventProvider" interface="IInstrumentationEventProvider" interfaceId="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IInstrumentationEventProvider" assembly="Microsoft.Practices.EnterpriseLibrary.Common" declaringType="Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IInstrumentationEventProvider" />
          </method>
          <method name="Dispose" displayName="Dispose" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.Dispose" access="Public" contract="Final" valueType="true" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="M:System.Diagnostics.TraceListener.Dispose" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <implements name="Dispose" id="M:System.IDisposable.Dispose" interface="IDisposable" interfaceId="T:System.IDisposable" assembly="mscorlib" declaringType="System.IDisposable" />
          </method>
          <method name="Dispose" displayName="Dispose" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.Dispose(System.Boolean)" access="Family" contract="Virtual" valueType="true" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="M:System.Diagnostics.TraceListener.Dispose(System.Boolean)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="disposing" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="Close" displayName="Close" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.Close" access="Public" contract="Virtual" valueType="true" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="M:System.Diagnostics.TraceListener.Close">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Flush" displayName="Flush" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.Flush" access="Public" contract="Virtual" valueType="true" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="M:System.Diagnostics.TraceListener.Flush">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Fail" displayName="Fail" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.Fail(System.String)" access="Public" contract="Virtual" valueType="true" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="M:System.Diagnostics.TraceListener.Fail(System.String)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="message" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Fail" displayName="Fail" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.Fail(System.String,System.String)" access="Public" contract="Virtual" valueType="true" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="M:System.Diagnostics.TraceListener.Fail(System.String,System.String)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="message" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="detailMessage" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetSupportedAttributes" displayName="GetSupportedAttributes" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.GetSupportedAttributes" access="Family" contract="Virtual" valueType="false" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="M:System.Diagnostics.TraceListener.GetSupportedAttributes">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
            </returnType>
            <documentation><summary></summary></documentation>
          </method>
          <method name="Write" displayName="Write" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.Write(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="M:System.Diagnostics.TraceListener.Write(System.Object)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="o" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Write" displayName="Write" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.Write(System.String,System.String)" access="Public" contract="Virtual" valueType="true" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="M:System.Diagnostics.TraceListener.Write(System.String,System.String)" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="message" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="category" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Write" displayName="Write" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.Write(System.Object,System.String)" access="Public" contract="Virtual" valueType="true" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="M:System.Diagnostics.TraceListener.Write(System.Object,System.String)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="o" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="category" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="WriteIndent" displayName="WriteIndent" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.WriteIndent" access="Family" contract="Virtual" valueType="true" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="M:System.Diagnostics.TraceListener.WriteIndent">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="WriteLine" displayName="WriteLine" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.WriteLine(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="M:System.Diagnostics.TraceListener.WriteLine(System.Object)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="o" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="WriteLine" displayName="WriteLine" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.WriteLine(System.String,System.String)" access="Public" contract="Virtual" valueType="true" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="M:System.Diagnostics.TraceListener.WriteLine(System.String,System.String)" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="message" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="category" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="WriteLine" displayName="WriteLine" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.WriteLine(System.Object,System.String)" access="Public" contract="Virtual" valueType="true" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="M:System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="o" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="category" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="TraceData" displayName="TraceData" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="M:System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
              <property name="Value" type="System.Boolean" value="False" />
            </attribute>
            <parameter name="eventCache" typeId="T:System.Diagnostics.TraceEventCache" displayName="TraceEventCache" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="false" />
            <parameter name="source" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="eventType" typeId="T:System.Diagnostics.TraceEventType" displayName="TraceEventType" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="true" />
            <parameter name="id" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="data" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
          </method>
          <method name="TraceEvent" displayName="TraceEvent" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)" access="Public" contract="Virtual" valueType="true" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="M:System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
              <property name="Value" type="System.Boolean" value="False" />
            </attribute>
            <parameter name="eventCache" typeId="T:System.Diagnostics.TraceEventCache" displayName="TraceEventCache" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="false" />
            <parameter name="source" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="eventType" typeId="T:System.Diagnostics.TraceEventType" displayName="TraceEventType" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="true" />
            <parameter name="id" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="TraceEvent" displayName="TraceEvent" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" access="Public" contract="Virtual" valueType="true" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="M:System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
              <property name="Value" type="System.Boolean" value="False" />
            </attribute>
            <parameter name="eventCache" typeId="T:System.Diagnostics.TraceEventCache" displayName="TraceEventCache" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="false" />
            <parameter name="source" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="eventType" typeId="T:System.Diagnostics.TraceEventType" displayName="TraceEventType" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="true" />
            <parameter name="id" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="message" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="TraceEvent" displayName="TraceEvent" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="M:System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
              <property name="Value" type="System.Boolean" value="False" />
            </attribute>
            <parameter name="eventCache" typeId="T:System.Diagnostics.TraceEventCache" displayName="TraceEventCache" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="false" />
            <parameter name="source" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="eventType" typeId="T:System.Diagnostics.TraceEventType" displayName="TraceEventType" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="true" />
            <parameter name="id" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
          </method>
          <method name="TraceTransfer" displayName="TraceTransfer" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)" access="Public" contract="Virtual" valueType="true" declaringType="System.Diagnostics.TraceListener" declaringAssembly="System" declaringId="M:System.Diagnostics.TraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
              <property name="Value" type="System.Boolean" value="False" />
            </attribute>
            <parameter name="eventCache" typeId="T:System.Diagnostics.TraceEventCache" displayName="TraceEventCache" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="false" />
            <parameter name="source" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="id" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="message" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="relatedActivityId" typeId="T:System.Guid" displayName="Guid" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.MemberwiseClone(System.Boolean)" access="Family" contract="Normal" valueType="false" declaringType="System.MarshalByRefObject" declaringAssembly="mscorlib" declaringId="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)" overload="1">
            <returnType typeId="T:System.MarshalByRefObject" displayName="MarshalByRefObject" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
            <parameter name="cloneIdentity" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="GetLifetimeService" displayName="GetLifetimeService" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.GetLifetimeService" access="Public" contract="Final" valueType="false" declaringType="System.MarshalByRefObject" declaringAssembly="mscorlib" declaringId="M:System.MarshalByRefObject.GetLifetimeService">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Security.Permissions.SecurityPermissionAttribute">
              <property name="Flags" type="System.Security.Permissions.SecurityPermissionFlag" value="SecurityPermissionFlag.Infrastructure" />
              <property name="Assertion" type="System.Boolean" value="False" />
              <property name="UnmanagedCode" type="System.Boolean" value="False" />
              <property name="SkipVerification" type="System.Boolean" value="False" />
              <property name="Execution" type="System.Boolean" value="False" />
              <property name="ControlThread" type="System.Boolean" value="False" />
              <property name="ControlEvidence" type="System.Boolean" value="False" />
              <property name="ControlPolicy" type="System.Boolean" value="False" />
              <property name="SerializationFormatter" type="System.Boolean" value="False" />
              <property name="ControlDomainPolicy" type="System.Boolean" value="False" />
              <property name="ControlPrincipal" type="System.Boolean" value="False" />
              <property name="ControlAppDomain" type="System.Boolean" value="False" />
              <property name="RemotingConfiguration" type="System.Boolean" value="False" />
              <property name="Infrastructure" type="System.Boolean" value="True" />
              <property name="BindingRedirects" type="System.Boolean" value="False" />
              <property name="Action" type="System.Security.Permissions.SecurityAction" value="SecurityAction.LinkDemand" />
              <property name="Unrestricted" type="System.Boolean" value="False" />
            </attribute>
          </method>
          <method name="InitializeLifetimeService" displayName="InitializeLifetimeService" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.InitializeLifetimeService" access="Public" contract="Virtual" valueType="false" declaringType="System.MarshalByRefObject" declaringAssembly="mscorlib" declaringId="M:System.MarshalByRefObject.InitializeLifetimeService">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Security.Permissions.SecurityPermissionAttribute">
              <property name="Flags" type="System.Security.Permissions.SecurityPermissionFlag" value="SecurityPermissionFlag.Infrastructure" />
              <property name="Assertion" type="System.Boolean" value="False" />
              <property name="UnmanagedCode" type="System.Boolean" value="False" />
              <property name="SkipVerification" type="System.Boolean" value="False" />
              <property name="Execution" type="System.Boolean" value="False" />
              <property name="ControlThread" type="System.Boolean" value="False" />
              <property name="ControlEvidence" type="System.Boolean" value="False" />
              <property name="ControlPolicy" type="System.Boolean" value="False" />
              <property name="SerializationFormatter" type="System.Boolean" value="False" />
              <property name="ControlDomainPolicy" type="System.Boolean" value="False" />
              <property name="ControlPrincipal" type="System.Boolean" value="False" />
              <property name="ControlAppDomain" type="System.Boolean" value="False" />
              <property name="RemotingConfiguration" type="System.Boolean" value="False" />
              <property name="Infrastructure" type="System.Boolean" value="True" />
              <property name="BindingRedirects" type="System.Boolean" value="False" />
              <property name="Action" type="System.Security.Permissions.SecurityAction" value="SecurityAction.LinkDemand" />
              <property name="Unrestricted" type="System.Boolean" value="False" />
            </attribute>
          </method>
          <method name="CreateObjRef" displayName="CreateObjRef" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.CreateObjRef(System.Type)" access="Public" contract="Virtual" valueType="false" declaringType="System.MarshalByRefObject" declaringAssembly="mscorlib" declaringId="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
            <returnType typeId="T:System.Runtime.Remoting.ObjRef" displayName="ObjRef" namespace="System.Runtime.Remoting" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Security.Permissions.SecurityPermissionAttribute">
              <property name="Flags" type="System.Security.Permissions.SecurityPermissionFlag" value="SecurityPermissionFlag.Infrastructure" />
              <property name="Assertion" type="System.Boolean" value="False" />
              <property name="UnmanagedCode" type="System.Boolean" value="False" />
              <property name="SkipVerification" type="System.Boolean" value="False" />
              <property name="Execution" type="System.Boolean" value="False" />
              <property name="ControlThread" type="System.Boolean" value="False" />
              <property name="ControlEvidence" type="System.Boolean" value="False" />
              <property name="ControlPolicy" type="System.Boolean" value="False" />
              <property name="SerializationFormatter" type="System.Boolean" value="False" />
              <property name="ControlDomainPolicy" type="System.Boolean" value="False" />
              <property name="ControlPrincipal" type="System.Boolean" value="False" />
              <property name="ControlAppDomain" type="System.Boolean" value="False" />
              <property name="RemotingConfiguration" type="System.Boolean" value="False" />
              <property name="Infrastructure" type="System.Boolean" value="True" />
              <property name="BindingRedirects" type="System.Boolean" value="False" />
              <property name="Action" type="System.Security.Permissions.SecurityAction" value="SecurityAction.LinkDemand" />
              <property name="Unrestricted" type="System.Boolean" value="False" />
            </attribute>
            <parameter name="requestedType" typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Equals" displayName="Equals" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="GetType" displayName="GetType" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListener.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone" overload="2">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
        </class>
        <class name="CommonLoggingEntlibTraceListenerAssembler" displayName="CommonLoggingEntlibTraceListenerAssembler" namespace="Common.Logging.EntLib" id="T:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerAssembler" access="Public">
          <documentation><summary> This type supports the Enterprise Library infrastructure and is not intended to be used directly from your code. Represents the process to build a <see cref="T:Common.Logging.EntLib.CommonLoggingEntlibTraceListener" /> described by a <see cref="T:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData" /> configuration object. </summary></documentation>
          <baseType name="TraceListenerAsssembler" id="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerAsssembler" displayName="TraceListenerAsssembler" namespace="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration" assembly="Microsoft.Practices.EnterpriseLibrary.Logging" />
          <implementsClass type="Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.IAssembler`2" id="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.IAssembler`2" displayName="IAssembler(TObject,TConfiguration)" namespace="Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder" inherited="true">
            <genericargument name="TObject" displayName="TObject" />
            <genericargument name="TConfiguration" displayName="TConfiguration" />
          </implementsClass>
          <constructor name=".ctor" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerAssembler.#ctor" access="Public" contract="Normal">
            <documentation>
              <summary>Initializes a new instance of the <see cref="T:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerAssembler" /> class.</summary>
            </documentation>
          </constructor>
          <method name="Assemble" displayName="Assemble" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerAssembler.Assemble(Microsoft.Practices.ObjectBuilder2.IBuilderContext,Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache)" access="Public" contract="Override" valueType="false">
            <returnType typeId="T:System.Diagnostics.TraceListener" displayName="TraceListener" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="false" />
            <documentation><summary> This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code. Builds a <see cref="T:Common.Logging.EntLib.CommonLoggingEntlibTraceListener" /> described by a <see cref="T:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData" /> configuration object. </summary></documentation>
            <parameter name="context" typeId="T:Microsoft.Practices.ObjectBuilder2.IBuilderContext" displayName="IBuilderContext" namespace="Microsoft.Practices.ObjectBuilder2" assembly="Microsoft.Practices.ObjectBuilder2" nullable="false" valueType="false" />
            <parameter name="objectConfiguration" typeId="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData" displayName="TraceListenerData" namespace="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration" assembly="Microsoft.Practices.EnterpriseLibrary.Logging" nullable="false" valueType="false" />
            <parameter name="configurationSource" typeId="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource" displayName="IConfigurationSource" namespace="Microsoft.Practices.EnterpriseLibrary.Common.Configuration" assembly="Microsoft.Practices.EnterpriseLibrary.Common" nullable="false" valueType="false" />
            <parameter name="reflectionCache" typeId="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache" displayName="ConfigurationReflectionCache" namespace="Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder" assembly="Microsoft.Practices.EnterpriseLibrary.Common" nullable="false" valueType="false" />
            <implements name="Assemble" id="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.IAssembler`2.Assemble(Microsoft.Practices.ObjectBuilder2.IBuilderContext,Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache)" interface="IAssembler(TraceListener,TraceListenerData)" interfaceId="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.IAssembler`2" assembly="Microsoft.Practices.EnterpriseLibrary.Common" declaringType="Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.IAssembler`2[[System.Diagnostics.TraceListener, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData, Microsoft.Practices.EnterpriseLibrary.Logging, Version=4.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]]" />
          </method>
          <method name="GetFormatter" displayName="GetFormatter" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerAssembler.GetFormatter(Microsoft.Practices.ObjectBuilder2.IBuilderContext,System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache)" access="Family" contract="Normal" valueType="false" declaringType="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerAsssembler" declaringAssembly="Microsoft.Practices.EnterpriseLibrary.Logging" declaringId="M:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerAsssembler.GetFormatter(Microsoft.Practices.ObjectBuilder2.IBuilderContext,System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache)">
            <returnType typeId="T:Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter" displayName="ILogFormatter" namespace="Microsoft.Practices.EnterpriseLibrary.Logging.Formatters" assembly="Microsoft.Practices.EnterpriseLibrary.Logging" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
            <parameter name="context" typeId="T:Microsoft.Practices.ObjectBuilder2.IBuilderContext" displayName="IBuilderContext" namespace="Microsoft.Practices.ObjectBuilder2" assembly="Microsoft.Practices.ObjectBuilder2" nullable="false" valueType="false" />
            <parameter name="formatterName" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="configurationSource" typeId="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource" displayName="IConfigurationSource" namespace="Microsoft.Practices.EnterpriseLibrary.Common.Configuration" assembly="Microsoft.Practices.EnterpriseLibrary.Common" nullable="false" valueType="false" />
            <parameter name="reflectionCache" typeId="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.ConfigurationReflectionCache" displayName="ConfigurationReflectionCache" namespace="Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder" assembly="Microsoft.Practices.EnterpriseLibrary.Common" nullable="false" valueType="false" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerAssembler.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Equals" displayName="Equals" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerAssembler.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerAssembler.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="GetType" displayName="GetType" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerAssembler.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerAssembler.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerAssembler.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
        </class>
        <class name="CommonLoggingEntlibTraceListenerData" displayName="CommonLoggingEntlibTraceListenerData" namespace="Common.Logging.EntLib" id="T:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData" access="Public">
          <documentation><summary> Represents the configuration settings that describe a <see cref="T:Common.Logging.EntLib.CommonLoggingEntlibTraceListener" />. </summary></documentation>
          <attribute name="Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ObjectBuilder.AssemblerAttribute">
            <property name="AssemblerType" type="System.Type" value="Common.Logging.EntLib.CommonLoggingEntlibTraceListenerAssembler" />
          </attribute>
          <attribute name="System.Reflection.DefaultMemberAttribute">
            <property name="MemberName" type="System.String" value="Item" />
          </attribute>
          <baseType name="TraceListenerData" id="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData" displayName="TraceListenerData" namespace="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration" assembly="Microsoft.Practices.EnterpriseLibrary.Logging">
            <baseType name="NameTypeConfigurationElement" id="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement" displayName="NameTypeConfigurationElement" namespace="Microsoft.Practices.EnterpriseLibrary.Common.Configuration" assembly="Microsoft.Practices.EnterpriseLibrary.Common">
              <baseType name="NamedConfigurationElement" id="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement" displayName="NamedConfigurationElement" namespace="Microsoft.Practices.EnterpriseLibrary.Common.Configuration" assembly="Microsoft.Practices.EnterpriseLibrary.Common">
                <baseType name="ConfigurationElement" id="T:System.Configuration.ConfigurationElement" displayName="ConfigurationElement" namespace="System.Configuration" assembly="System.Configuration" />
              </baseType>
            </baseType>
          </baseType>
          <implementsClass type="Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IObjectWithName" id="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IObjectWithName" displayName="IObjectWithName" namespace="Microsoft.Practices.EnterpriseLibrary.Common.Configuration" inherited="true" />
          <implementsClass type="Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IObjectWithNameAndType" id="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IObjectWithNameAndType" displayName="IObjectWithNameAndType" namespace="Microsoft.Practices.EnterpriseLibrary.Common.Configuration" inherited="true" />
          <constructor name=".ctor" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.#ctor" access="Public" contract="Normal">
            <documentation>
              <summary>Initializes a new instance of the <see cref="T:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData" /> class.</summary>
            </documentation>
          </constructor>
          <property name="LoggerNameFormat" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.LoggerNameFormat" access="Public" contract="Normal" get="Public" set="Public" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <attribute name="System.Configuration.ConfigurationPropertyAttribute">
              <property name="IsRequired" type="System.Boolean" value="False" />
              <property name="Name" type="System.String" value="loggerNameFormat" />
              <property name="DefaultValue" type="System.Object" value="System.Object" />
              <property name="Options" type="System.Configuration.ConfigurationPropertyOptions" value="ConfigurationPropertyOptions.None" />
              <property name="IsDefaultCollection" type="System.Boolean" value="False" />
              <property name="IsKey" type="System.Boolean" value="False" />
            </attribute>
            <documentation><summary> The logger name format to use for creating logger names from <see cref="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement.Name" /> and </summary></documentation>
          </property>
          <property name="Formatter" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.Formatter" access="Public" contract="Normal" get="Public" set="Public" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <attribute name="System.Configuration.ConfigurationPropertyAttribute">
              <property name="IsRequired" type="System.Boolean" value="False" />
              <property name="Name" type="System.String" value="formatter" />
              <property name="DefaultValue" type="System.Object" value="System.Object" />
              <property name="Options" type="System.Configuration.ConfigurationPropertyOptions" value="ConfigurationPropertyOptions.None" />
              <property name="IsDefaultCollection" type="System.Boolean" value="False" />
              <property name="IsKey" type="System.Boolean" value="False" />
            </attribute>
            <documentation><summary> Gets or Sets the formatter name </summary></documentation>
          </property>
          <property name="ListenerDataType" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.ListenerDataType" access="Public" contract="Normal" declaringType="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData" declaringAssembly="Microsoft.Practices.EnterpriseLibrary.Logging" declaringId="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData.ListenerDataType" get="Public" set="Public" typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <documentation><summary></summary></documentation>
          </property>
          <property name="ListenerDataTypeName" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.ListenerDataTypeName" access="Public" contract="Normal" declaringType="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData" declaringAssembly="Microsoft.Practices.EnterpriseLibrary.Logging" declaringId="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData.ListenerDataTypeName" get="Public" set="Public" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <attribute name="System.Configuration.ConfigurationPropertyAttribute">
              <property name="IsRequired" type="System.Boolean" value="True" />
              <property name="Name" type="System.String" value="listenerDataType" />
              <property name="DefaultValue" type="System.Object" value="System.Object" />
              <property name="Options" type="System.Configuration.ConfigurationPropertyOptions" value="ConfigurationPropertyOptions.IsRequired" />
              <property name="IsDefaultCollection" type="System.Boolean" value="False" />
              <property name="IsKey" type="System.Boolean" value="False" />
            </attribute>
            <documentation><summary></summary></documentation>
          </property>
          <property name="TraceOutputOptions" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.TraceOutputOptions" access="Public" contract="Normal" declaringType="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData" declaringAssembly="Microsoft.Practices.EnterpriseLibrary.Logging" declaringId="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData.TraceOutputOptions" get="Public" set="Public" typeId="T:System.Diagnostics.TraceOptions" displayName="TraceOptions" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="true">
            <attribute name="System.Configuration.ConfigurationPropertyAttribute">
              <property name="IsRequired" type="System.Boolean" value="False" />
              <property name="Name" type="System.String" value="traceOutputOptions" />
              <property name="DefaultValue" type="System.Object" value="System.Object" />
              <property name="Options" type="System.Configuration.ConfigurationPropertyOptions" value="ConfigurationPropertyOptions.None" />
              <property name="IsDefaultCollection" type="System.Boolean" value="False" />
              <property name="IsKey" type="System.Boolean" value="False" />
            </attribute>
            <documentation><summary></summary></documentation>
          </property>
          <property name="Filter" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.Filter" access="Public" contract="Normal" declaringType="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData" declaringAssembly="Microsoft.Practices.EnterpriseLibrary.Logging" declaringId="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData.Filter" get="Public" set="Public" typeId="T:System.Diagnostics.SourceLevels" displayName="SourceLevels" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="true">
            <attribute name="System.Configuration.ConfigurationPropertyAttribute">
              <property name="IsRequired" type="System.Boolean" value="False" />
              <property name="Name" type="System.String" value="filter" />
              <property name="DefaultValue" type="System.Object" value="SourceLevels.All" />
              <property name="Options" type="System.Configuration.ConfigurationPropertyOptions" value="ConfigurationPropertyOptions.None" />
              <property name="IsDefaultCollection" type="System.Boolean" value="False" />
              <property name="IsKey" type="System.Boolean" value="False" />
            </attribute>
            <documentation><summary></summary></documentation>
          </property>
          <property name="Type" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.Type" access="Public" contract="Final" declaringType="Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement" declaringAssembly="Microsoft.Practices.EnterpriseLibrary.Common" declaringId="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement.Type" get="Public" set="Public" typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <documentation><summary></summary></documentation>
            <implements name="Type" id="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IObjectWithNameAndType.Type" interface="IObjectWithNameAndType" assembly="Microsoft.Practices.EnterpriseLibrary.Common" interfaceId="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IObjectWithNameAndType" declaringType="Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IObjectWithNameAndType" />
          </property>
          <property name="TypeName" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.TypeName" access="Public" contract="Normal" declaringType="Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement" declaringAssembly="Microsoft.Practices.EnterpriseLibrary.Common" declaringId="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement.TypeName" get="Public" set="Public" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <attribute name="System.Configuration.ConfigurationPropertyAttribute">
              <property name="IsRequired" type="System.Boolean" value="True" />
              <property name="Name" type="System.String" value="type" />
              <property name="DefaultValue" type="System.Object" value="System.Object" />
              <property name="Options" type="System.Configuration.ConfigurationPropertyOptions" value="ConfigurationPropertyOptions.IsRequired" />
              <property name="IsDefaultCollection" type="System.Boolean" value="False" />
              <property name="IsKey" type="System.Boolean" value="False" />
            </attribute>
            <documentation><summary></summary></documentation>
          </property>
          <property name="Name" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.Name" access="Public" contract="Final" declaringType="Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement" declaringAssembly="Microsoft.Practices.EnterpriseLibrary.Common" declaringId="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement.Name" get="Public" set="Public" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <attribute name="System.Configuration.ConfigurationPropertyAttribute">
              <property name="IsRequired" type="System.Boolean" value="True" />
              <property name="Name" type="System.String" value="name" />
              <property name="DefaultValue" type="System.Object" value="Name" />
              <property name="Options" type="System.Configuration.ConfigurationPropertyOptions" value="(ConfigurationPropertyOptions.IsRequired|ConfigurationPropertyOptions.IsKey)" />
              <property name="IsDefaultCollection" type="System.Boolean" value="False" />
              <property name="IsKey" type="System.Boolean" value="True" />
            </attribute>
            <attribute name="System.Configuration.StringValidatorAttribute">
              <property name="ValidatorInstance" type="System.Configuration.ConfigurationValidatorBase" value="System.Configuration.StringValidator" />
              <property name="MinLength" type="System.Int32" value="1" />
              <property name="MaxLength" type="System.Int32" value="2147483647" />
              <property name="InvalidCharacters" type="System.String" value="null" />
              <property name="ValidatorType" type="System.Type" value="null" />
            </attribute>
            <documentation><summary></summary></documentation>
            <implements name="Name" id="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IObjectWithName.Name" interface="IObjectWithName" assembly="Microsoft.Practices.EnterpriseLibrary.Common" interfaceId="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IObjectWithName" declaringType="Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IObjectWithName" />
          </property>
          <property name="LockAttributes" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.LockAttributes" access="Public" contract="Normal" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="P:System.Configuration.ConfigurationElement.LockAttributes" get="Public" set="false" typeId="T:System.Configuration.ConfigurationLockCollection" displayName="ConfigurationLockCollection" namespace="System.Configuration" assembly="System.Configuration" nullable="false" valueType="false">
            <documentation><summary></summary></documentation>
          </property>
          <property name="LockAllAttributesExcept" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.LockAllAttributesExcept" access="Public" contract="Normal" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="P:System.Configuration.ConfigurationElement.LockAllAttributesExcept" get="Public" set="false" typeId="T:System.Configuration.ConfigurationLockCollection" displayName="ConfigurationLockCollection" namespace="System.Configuration" assembly="System.Configuration" nullable="false" valueType="false">
            <documentation><summary></summary></documentation>
          </property>
          <property name="LockElements" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.LockElements" access="Public" contract="Normal" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="P:System.Configuration.ConfigurationElement.LockElements" get="Public" set="false" typeId="T:System.Configuration.ConfigurationLockCollection" displayName="ConfigurationLockCollection" namespace="System.Configuration" assembly="System.Configuration" nullable="false" valueType="false">
            <documentation><summary></summary></documentation>
          </property>
          <property name="LockAllElementsExcept" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.LockAllElementsExcept" access="Public" contract="Normal" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="P:System.Configuration.ConfigurationElement.LockAllElementsExcept" get="Public" set="false" typeId="T:System.Configuration.ConfigurationLockCollection" displayName="ConfigurationLockCollection" namespace="System.Configuration" assembly="System.Configuration" nullable="false" valueType="false">
            <documentation><summary></summary></documentation>
          </property>
          <property name="LockItem" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.LockItem" access="Public" contract="Normal" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="P:System.Configuration.ConfigurationElement.LockItem" get="Public" set="Public" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary></summary></documentation>
          </property>
          <property name="Item" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.Item(System.Configuration.ConfigurationProperty)" access="Family" contract="Normal" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="P:System.Configuration.ConfigurationElement.Item(System.Configuration.ConfigurationProperty)" overload="1" get="Family" set="Family" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <parameter name="prop" typeId="T:System.Configuration.ConfigurationProperty" displayName="ConfigurationProperty" namespace="System.Configuration" assembly="System.Configuration" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </property>
          <property name="Item" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.Item(System.String)" access="Family" contract="Normal" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="P:System.Configuration.ConfigurationElement.Item(System.String)" overload="2" get="Family" set="Family" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <parameter name="propertyName" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </property>
          <property name="ElementInformation" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.ElementInformation" access="Public" contract="Normal" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="P:System.Configuration.ConfigurationElement.ElementInformation" get="Public" set="false" typeId="T:System.Configuration.ElementInformation" displayName="ElementInformation" namespace="System.Configuration" assembly="System.Configuration" nullable="false" valueType="false">
            <documentation><summary></summary></documentation>
          </property>
          <property name="EvaluationContext" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.EvaluationContext" access="Family" contract="Normal" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="P:System.Configuration.ConfigurationElement.EvaluationContext" get="Family" set="false" typeId="T:System.Configuration.ContextInformation" displayName="ContextInformation" namespace="System.Configuration" assembly="System.Configuration" nullable="false" valueType="false">
            <documentation><summary></summary></documentation>
          </property>
          <property name="ElementProperty" id="P:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.ElementProperty" access="Family" contract="Virtual" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="P:System.Configuration.ConfigurationElement.ElementProperty" get="Family" set="false" typeId="T:System.Configuration.ConfigurationElementProperty" displayName="ConfigurationElementProperty" namespace="System.Configuration" assembly="System.Configuration" nullable="false" valueType="false">
            <documentation><summary></summary></documentation>
          </property>
          <method name="DeserializeElement" displayName="DeserializeElement" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.DeserializeElement(System.Xml.XmlReader)" access="Public" contract="Normal" valueType="true" declaringType="Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement" declaringAssembly="Microsoft.Practices.EnterpriseLibrary.Common" declaringId="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement.DeserializeElement(System.Xml.XmlReader)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="reader" typeId="T:System.Xml.XmlReader" displayName="XmlReader" namespace="System.Xml" assembly="System.Xml" nullable="false" valueType="false" />
          </method>
          <method name="Init" displayName="Init" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.Init" access="Family" contract="Virtual" valueType="true" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="M:System.Configuration.ConfigurationElement.Init">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="IsModified" displayName="IsModified" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.IsModified" access="Family" contract="Virtual" valueType="true" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="M:System.Configuration.ConfigurationElement.IsModified">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="ResetModified" displayName="ResetModified" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.ResetModified" access="Family" contract="Virtual" valueType="true" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="M:System.Configuration.ConfigurationElement.ResetModified">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="IsReadOnly" displayName="IsReadOnly" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.IsReadOnly" access="Public" contract="Virtual" valueType="true" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="M:System.Configuration.ConfigurationElement.IsReadOnly">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="SetReadOnly" displayName="SetReadOnly" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.SetReadOnly" access="Family" contract="Virtual" valueType="true" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="M:System.Configuration.ConfigurationElement.SetReadOnly">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="ListErrors" displayName="ListErrors" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.ListErrors(System.Collections.IList)" access="Family" contract="Virtual" valueType="true" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="M:System.Configuration.ConfigurationElement.ListErrors(System.Collections.IList)">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="errorList" typeId="T:System.Collections.IList" displayName="IList" namespace="System.Collections" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="InitializeDefault" displayName="InitializeDefault" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.InitializeDefault" access="Family" contract="Virtual" valueType="true" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="M:System.Configuration.ConfigurationElement.InitializeDefault">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Reset" displayName="Reset" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.Reset(System.Configuration.ConfigurationElement)" access="Family" contract="Virtual" valueType="true" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="M:System.Configuration.ConfigurationElement.Reset(System.Configuration.ConfigurationElement)">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="parentElement" typeId="T:System.Configuration.ConfigurationElement" displayName="ConfigurationElement" namespace="System.Configuration" assembly="System.Configuration" nullable="false" valueType="false" />
          </method>
          <method name="Equals" displayName="Equals" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.Equals(System.Object)" access="Public" contract="Override" valueType="true" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="M:System.Configuration.ConfigurationElement.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="compareTo" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.GetHashCode" access="Public" contract="Override" valueType="true" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="M:System.Configuration.ConfigurationElement.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="SetPropertyValue" displayName="SetPropertyValue" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.SetPropertyValue(System.Configuration.ConfigurationProperty,System.Object,System.Boolean)" access="Family" contract="Normal" valueType="true" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="M:System.Configuration.ConfigurationElement.SetPropertyValue(System.Configuration.ConfigurationProperty,System.Object,System.Boolean)">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="prop" typeId="T:System.Configuration.ConfigurationProperty" displayName="ConfigurationProperty" namespace="System.Configuration" assembly="System.Configuration" nullable="false" valueType="false" />
            <parameter name="value" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="ignoreLocks" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="Unmerge" displayName="Unmerge" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)" access="Family" contract="Virtual" valueType="true" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="M:System.Configuration.ConfigurationElement.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="sourceElement" typeId="T:System.Configuration.ConfigurationElement" displayName="ConfigurationElement" namespace="System.Configuration" assembly="System.Configuration" nullable="false" valueType="false" />
            <parameter name="parentElement" typeId="T:System.Configuration.ConfigurationElement" displayName="ConfigurationElement" namespace="System.Configuration" assembly="System.Configuration" nullable="false" valueType="false" />
            <parameter name="saveMode" typeId="T:System.Configuration.ConfigurationSaveMode" displayName="ConfigurationSaveMode" namespace="System.Configuration" assembly="System.Configuration" nullable="false" valueType="true" />
          </method>
          <method name="SerializeToXmlElement" displayName="SerializeToXmlElement" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.SerializeToXmlElement(System.Xml.XmlWriter,System.String)" access="Family" contract="Virtual" valueType="true" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="M:System.Configuration.ConfigurationElement.SerializeToXmlElement(System.Xml.XmlWriter,System.String)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="writer" typeId="T:System.Xml.XmlWriter" displayName="XmlWriter" namespace="System.Xml" assembly="System.Xml" nullable="false" valueType="false" />
            <parameter name="elementName" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="SerializeElement" displayName="SerializeElement" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.SerializeElement(System.Xml.XmlWriter,System.Boolean)" access="Family" contract="Virtual" valueType="true" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="M:System.Configuration.ConfigurationElement.SerializeElement(System.Xml.XmlWriter,System.Boolean)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="writer" typeId="T:System.Xml.XmlWriter" displayName="XmlWriter" namespace="System.Xml" assembly="System.Xml" nullable="false" valueType="false" />
            <parameter name="serializeCollectionKey" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="DeserializeElement" displayName="DeserializeElement" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.DeserializeElement(System.Xml.XmlReader,System.Boolean)" access="Family" contract="Virtual" valueType="true" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="M:System.Configuration.ConfigurationElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="reader" typeId="T:System.Xml.XmlReader" displayName="XmlReader" namespace="System.Xml" assembly="System.Xml" nullable="false" valueType="false" />
            <parameter name="serializeCollectionKey" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="OnRequiredPropertyNotFound" displayName="OnRequiredPropertyNotFound" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.OnRequiredPropertyNotFound(System.String)" access="Family" contract="Virtual" valueType="false" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="M:System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound(System.String)">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
            <parameter name="name" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="PostDeserialize" displayName="PostDeserialize" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.PostDeserialize" access="Family" contract="Virtual" valueType="true" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="M:System.Configuration.ConfigurationElement.PostDeserialize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="PreSerialize" displayName="PreSerialize" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.PreSerialize(System.Xml.XmlWriter)" access="Family" contract="Virtual" valueType="true" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="M:System.Configuration.ConfigurationElement.PreSerialize(System.Xml.XmlWriter)">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="writer" typeId="T:System.Xml.XmlWriter" displayName="XmlWriter" namespace="System.Xml" assembly="System.Xml" nullable="false" valueType="false" />
          </method>
          <method name="OnDeserializeUnrecognizedAttribute" displayName="OnDeserializeUnrecognizedAttribute" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.OnDeserializeUnrecognizedAttribute(System.String,System.String)" access="Family" contract="Virtual" valueType="true" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="M:System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute(System.String,System.String)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="name" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="value" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="OnDeserializeUnrecognizedElement" displayName="OnDeserializeUnrecognizedElement" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)" access="Family" contract="Virtual" valueType="true" declaringType="System.Configuration.ConfigurationElement" declaringAssembly="System.Configuration" declaringId="M:System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="elementName" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="reader" typeId="T:System.Xml.XmlReader" displayName="XmlReader" namespace="System.Xml" assembly="System.Xml" nullable="false" valueType="false" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="GetType" displayName="GetType" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Common.Logging.EntLib.CommonLoggingEntlibTraceListenerData.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
        </class>
        <class name="EntLibLogger" displayName="EntLibLogger" namespace="Common.Logging.EntLib" id="T:Common.Logging.EntLib.EntLibLogger" access="Public">
          <documentation><summary> Concrete implementation of <see cref="T:Common.Logging.ILog" /> interface specific to Enterprise Logging 4.1. </summary>
<remarks> Instances are created by the <see cref="T:Common.Logging.EntLib.EntLibLoggerFactoryAdapter" />. <see cref="P:Common.Logging.EntLib.EntLibLoggerFactoryAdapter.DefaultPriority" /> is used for logging a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry" /> to <see cref="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.Write(Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)" />. The category name used is the name passed into <see cref="M:Common.Logging.LogManager.GetLogger(System.String)" />. For configuring logging, see <see cref="T:Common.Logging.EntLib.EntLibLoggerFactoryAdapter" nolink="true" />. </remarks>
<seealso cref="T:Common.Logging.ILog" />
<seealso cref="T:Common.Logging.EntLib.EntLibLoggerFactoryAdapter" />
<author>Mark Pollack</author>
<author>Erich Eichinger</author></documentation>
          <baseType name="AbstractLogger" id="T:Common.Logging.Factory.AbstractLogger" displayName="AbstractLogger" namespace="Common.Logging.Factory" assembly="Common.Logging" />
          <implementsClass type="Common.Logging.ILog" id="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" inherited="true" />
          <constructor name=".ctor" id="M:Common.Logging.EntLib.EntLibLogger.#ctor(System.String,Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter,Common.Logging.EntLib.EntLibLoggerSettings)" access="Public" contract="Normal">
            <documentation><summary> Initializes a new instance of the <see cref="T:Common.Logging.EntLib.EntLibLogger" /> class. </summary>
<param name="category">The category.</param>
<param name="logWriter">the <see cref="P:Common.Logging.EntLib.EntLibLogger.LogWriter" /> to write log events to.</param>
<param name="settings">the logger settings</param></documentation>
            <parameter name="category" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="logWriter" typeId="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter" displayName="LogWriter" namespace="Microsoft.Practices.EnterpriseLibrary.Logging" assembly="Microsoft.Practices.EnterpriseLibrary.Logging" nullable="false" valueType="false" />
            <parameter name="settings" typeId="T:Common.Logging.EntLib.EntLibLoggerSettings" displayName="EntLibLoggerSettings" namespace="Common.Logging.EntLib" assembly="Common.Logging.EntLib41" nullable="false" valueType="false" />
          </constructor>
          <property name="Category" id="P:Common.Logging.EntLib.EntLibLogger.Category" access="Public" contract="Normal" get="Public" set="false" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <documentation><summary> The category of this logger </summary></documentation>
          </property>
          <property name="Settings" id="P:Common.Logging.EntLib.EntLibLogger.Settings" access="Public" contract="Normal" get="Public" set="false" typeId="T:Common.Logging.EntLib.EntLibLoggerSettings" displayName="EntLibLoggerSettings" namespace="Common.Logging.EntLib" assembly="Common.Logging.EntLib41" nullable="false" valueType="false">
            <documentation><summary> The settings used by this logger </summary></documentation>
          </property>
          <property name="LogWriter" id="P:Common.Logging.EntLib.EntLibLogger.LogWriter" access="Public" contract="Normal" get="Public" set="false" typeId="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter" displayName="LogWriter" namespace="Microsoft.Practices.EnterpriseLibrary.Logging" assembly="Microsoft.Practices.EnterpriseLibrary.Logging" nullable="false" valueType="false">
            <documentation><summary> The <see cref="P:Common.Logging.EntLib.EntLibLogger.LogWriter" nolink="true" /> used by this logger. </summary></documentation>
          </property>
          <property name="IsTraceEnabled" id="P:Common.Logging.EntLib.EntLibLogger.IsTraceEnabled" access="Public" contract="Override" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Gets a value indicating whether this instance is trace enabled. </summary></documentation>
            <implements name="IsTraceEnabled" id="P:Common.Logging.ILog.IsTraceEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsDebugEnabled" id="P:Common.Logging.EntLib.EntLibLogger.IsDebugEnabled" access="Public" contract="Override" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Gets a value indicating whether this instance is debug enabled. </summary></documentation>
            <implements name="IsDebugEnabled" id="P:Common.Logging.ILog.IsDebugEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsInfoEnabled" id="P:Common.Logging.EntLib.EntLibLogger.IsInfoEnabled" access="Public" contract="Override" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Gets a value indicating whether this instance is info enabled. </summary></documentation>
            <implements name="IsInfoEnabled" id="P:Common.Logging.ILog.IsInfoEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsWarnEnabled" id="P:Common.Logging.EntLib.EntLibLogger.IsWarnEnabled" access="Public" contract="Override" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Gets a value indicating whether this instance is warn enabled. </summary></documentation>
            <implements name="IsWarnEnabled" id="P:Common.Logging.ILog.IsWarnEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsErrorEnabled" id="P:Common.Logging.EntLib.EntLibLogger.IsErrorEnabled" access="Public" contract="Override" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Gets a value indicating whether this instance is error enabled. </summary></documentation>
            <implements name="IsErrorEnabled" id="P:Common.Logging.ILog.IsErrorEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsFatalEnabled" id="P:Common.Logging.EntLib.EntLibLogger.IsFatalEnabled" access="Public" contract="Override" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Gets a value indicating whether this instance is fatal enabled. </summary></documentation>
            <implements name="IsFatalEnabled" id="P:Common.Logging.ILog.IsFatalEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <method name="WriteInternal" displayName="WriteInternal" id="M:Common.Logging.EntLib.EntLibLogger.WriteInternal(Common.Logging.LogLevel,System.Object,System.Exception)" access="Family" contract="Override" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Actually sends the message to the EnterpriseLogging log system. </summary>
<param name="logLevel">the level of this log event.</param>
<param name="message">the message to log</param>
<param name="exception">the exception to log (may be null)</param></documentation>
            <parameter name="logLevel" typeId="T:Common.Logging.LogLevel" displayName="LogLevel" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="true" />
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="ShouldLog" displayName="ShouldLog" id="M:Common.Logging.EntLib.EntLibLogger.ShouldLog(Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)" access="Family" contract="Virtual" valueType="true">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> May be overridden for custom filter logic </summary>
<param name="log"></param>
<returns></returns></documentation>
            <parameter name="log" typeId="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry" displayName="LogEntry" namespace="Microsoft.Practices.EnterpriseLibrary.Logging" assembly="Microsoft.Practices.EnterpriseLibrary.Logging" nullable="false" valueType="false" />
          </method>
          <method name="WriteLog" displayName="WriteLog" id="M:Common.Logging.EntLib.EntLibLogger.WriteLog(Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)" access="Family" contract="Virtual" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Write the fully populated event to the log. </summary></documentation>
            <parameter name="log" typeId="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry" displayName="LogEntry" namespace="Microsoft.Practices.EnterpriseLibrary.Logging" assembly="Microsoft.Practices.EnterpriseLibrary.Logging" nullable="false" valueType="false" />
          </method>
          <method name="GetTraceEventType" displayName="GetTraceEventType" id="M:Common.Logging.EntLib.EntLibLogger.GetTraceEventType(Common.Logging.LogLevel)" access="Family" contract="Virtual" valueType="true">
            <returnType typeId="T:System.Diagnostics.TraceEventType" displayName="TraceEventType" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="true" />
            <documentation><summary> Translates a <see cref="T:Common.Logging.LogLevel" /> to a <see cref="T:System.Diagnostics.TraceEventType" />. </summary></documentation>
            <parameter name="logLevel" typeId="T:Common.Logging.LogLevel" displayName="LogLevel" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="true" />
          </method>
          <method name="CreateLogEntry" displayName="CreateLogEntry" id="M:Common.Logging.EntLib.EntLibLogger.CreateLogEntry(System.Diagnostics.TraceEventType)" access="Family" contract="Virtual" valueType="false">
            <returnType typeId="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry" displayName="LogEntry" namespace="Microsoft.Practices.EnterpriseLibrary.Logging" assembly="Microsoft.Practices.EnterpriseLibrary.Logging" nullable="false" valueType="false" />
            <documentation><summary> Creates a minimal log entry instance that will be passed into <see cref="M:Microsoft.Practices.EnterpriseLibrary.Logging.Logger.ShouldLog(Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)" /> to asap decide, whether this event should be logged. </summary>
<param name="traceEventType">trace event severity.</param>
<returns></returns></documentation>
            <parameter name="traceEventType" typeId="T:System.Diagnostics.TraceEventType" displayName="TraceEventType" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="true" />
          </method>
          <method name="PopulateLogEntry" displayName="PopulateLogEntry" id="M:Common.Logging.EntLib.EntLibLogger.PopulateLogEntry(Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry,System.Object,System.Exception)" access="Family" contract="Virtual" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Configures the log entry. </summary>
<param name="log">The log.</param>
<param name="message">The message.</param>
<param name="ex">The ex.</param></documentation>
            <parameter name="log" typeId="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry" displayName="LogEntry" namespace="Microsoft.Practices.EnterpriseLibrary.Logging" assembly="Microsoft.Practices.EnterpriseLibrary.Logging" nullable="false" valueType="false" />
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="ex" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="AddExceptionInfo" displayName="AddExceptionInfo" id="M:Common.Logging.EntLib.EntLibLogger.AddExceptionInfo(Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry,System.Exception)" access="Family" contract="Virtual" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Adds the exception info. </summary>
<param name="log">The log entry.</param>
<param name="exception">The exception.</param>
<returns></returns></documentation>
            <parameter name="log" typeId="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry" displayName="LogEntry" namespace="Microsoft.Practices.EnterpriseLibrary.Logging" assembly="Microsoft.Practices.EnterpriseLibrary.Logging" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetWriteHandler" displayName="GetWriteHandler" id="M:Common.Logging.EntLib.EntLibLogger.GetWriteHandler" access="Family" contract="Virtual" valueType="false" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.GetWriteHandler">
            <returnType typeId="T:Common.Logging.Factory.AbstractLogger.WriteHandler" displayName="AbstractLogger.WriteHandler" namespace="Common.Logging.Factory" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Override this method to use a different method than <see cref="M:Common.Logging.Factory.AbstractLogger.WriteInternal(Common.Logging.LogLevel,System.Object,System.Exception)" /> for writing log events to the underlying log system. </summary></documentation>
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.EntLib.EntLibLogger.Trace(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.EntLib.EntLibLogger.Trace(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Trace" /> level including the stack trace of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="TraceFormat" displayName="TraceFormat" id="M:Common.Logging.EntLib.EntLibLogger.TraceFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.TraceFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="TraceFormat" id="M:Common.Logging.ILog.TraceFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="TraceFormat" displayName="TraceFormat" id="M:Common.Logging.EntLib.EntLibLogger.TraceFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.TraceFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="TraceFormat" id="M:Common.Logging.ILog.TraceFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="TraceFormat" displayName="TraceFormat" id="M:Common.Logging.EntLib.EntLibLogger.TraceFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.TraceFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="TraceFormat" id="M:Common.Logging.ILog.TraceFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="TraceFormat" displayName="TraceFormat" id="M:Common.Logging.EntLib.EntLibLogger.TraceFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.TraceFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="TraceFormat" id="M:Common.Logging.ILog.TraceFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.EntLib.EntLibLogger.Trace(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.EntLib.EntLibLogger.Trace(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.EntLib.EntLibLogger.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.EntLib.EntLibLogger.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.EntLib.EntLibLogger.Debug(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.EntLib.EntLibLogger.Debug(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Debug" /> level including the stack Debug of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="DebugFormat" displayName="DebugFormat" id="M:Common.Logging.EntLib.EntLibLogger.DebugFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.DebugFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="DebugFormat" id="M:Common.Logging.ILog.DebugFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="DebugFormat" displayName="DebugFormat" id="M:Common.Logging.EntLib.EntLibLogger.DebugFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.DebugFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="DebugFormat" id="M:Common.Logging.ILog.DebugFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="DebugFormat" displayName="DebugFormat" id="M:Common.Logging.EntLib.EntLibLogger.DebugFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.DebugFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="DebugFormat" id="M:Common.Logging.ILog.DebugFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="DebugFormat" displayName="DebugFormat" id="M:Common.Logging.EntLib.EntLibLogger.DebugFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.DebugFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="DebugFormat" id="M:Common.Logging.ILog.DebugFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.EntLib.EntLibLogger.Debug(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.EntLib.EntLibLogger.Debug(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.EntLib.EntLibLogger.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.EntLib.EntLibLogger.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.EntLib.EntLibLogger.Info(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.EntLib.EntLibLogger.Info(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Info" /> level including the stack Info of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="InfoFormat" displayName="InfoFormat" id="M:Common.Logging.EntLib.EntLibLogger.InfoFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.InfoFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="InfoFormat" id="M:Common.Logging.ILog.InfoFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="InfoFormat" displayName="InfoFormat" id="M:Common.Logging.EntLib.EntLibLogger.InfoFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.InfoFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="InfoFormat" id="M:Common.Logging.ILog.InfoFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="InfoFormat" displayName="InfoFormat" id="M:Common.Logging.EntLib.EntLibLogger.InfoFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.InfoFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="InfoFormat" id="M:Common.Logging.ILog.InfoFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="InfoFormat" displayName="InfoFormat" id="M:Common.Logging.EntLib.EntLibLogger.InfoFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.InfoFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="InfoFormat" id="M:Common.Logging.ILog.InfoFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.EntLib.EntLibLogger.Info(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.EntLib.EntLibLogger.Info(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.EntLib.EntLibLogger.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.EntLib.EntLibLogger.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.EntLib.EntLibLogger.Warn(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.EntLib.EntLibLogger.Warn(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Warn" /> level including the stack Warn of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="WarnFormat" displayName="WarnFormat" id="M:Common.Logging.EntLib.EntLibLogger.WarnFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.WarnFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="WarnFormat" id="M:Common.Logging.ILog.WarnFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="WarnFormat" displayName="WarnFormat" id="M:Common.Logging.EntLib.EntLibLogger.WarnFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.WarnFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="WarnFormat" id="M:Common.Logging.ILog.WarnFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="WarnFormat" displayName="WarnFormat" id="M:Common.Logging.EntLib.EntLibLogger.WarnFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.WarnFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="WarnFormat" id="M:Common.Logging.ILog.WarnFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="WarnFormat" displayName="WarnFormat" id="M:Common.Logging.EntLib.EntLibLogger.WarnFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.WarnFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="WarnFormat" id="M:Common.Logging.ILog.WarnFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.EntLib.EntLibLogger.Warn(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.EntLib.EntLibLogger.Warn(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.EntLib.EntLibLogger.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.EntLib.EntLibLogger.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.EntLib.EntLibLogger.Error(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.EntLib.EntLibLogger.Error(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Error" /> level including the stack Error of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ErrorFormat" displayName="ErrorFormat" id="M:Common.Logging.EntLib.EntLibLogger.ErrorFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.ErrorFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="ErrorFormat" id="M:Common.Logging.ILog.ErrorFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ErrorFormat" displayName="ErrorFormat" id="M:Common.Logging.EntLib.EntLibLogger.ErrorFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.ErrorFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="ErrorFormat" id="M:Common.Logging.ILog.ErrorFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ErrorFormat" displayName="ErrorFormat" id="M:Common.Logging.EntLib.EntLibLogger.ErrorFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.ErrorFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="ErrorFormat" id="M:Common.Logging.ILog.ErrorFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ErrorFormat" displayName="ErrorFormat" id="M:Common.Logging.EntLib.EntLibLogger.ErrorFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.ErrorFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="ErrorFormat" id="M:Common.Logging.ILog.ErrorFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.EntLib.EntLibLogger.Error(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.EntLib.EntLibLogger.Error(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.EntLib.EntLibLogger.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.EntLib.EntLibLogger.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.EntLib.EntLibLogger.Fatal(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.EntLib.EntLibLogger.Fatal(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level including the stack Fatal of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="FatalFormat" displayName="FatalFormat" id="M:Common.Logging.EntLib.EntLibLogger.FatalFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.FatalFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="FatalFormat" id="M:Common.Logging.ILog.FatalFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="FatalFormat" displayName="FatalFormat" id="M:Common.Logging.EntLib.EntLibLogger.FatalFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.FatalFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="FatalFormat" id="M:Common.Logging.ILog.FatalFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="FatalFormat" displayName="FatalFormat" id="M:Common.Logging.EntLib.EntLibLogger.FatalFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.FatalFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="FatalFormat" id="M:Common.Logging.ILog.FatalFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="FatalFormat" displayName="FatalFormat" id="M:Common.Logging.EntLib.EntLibLogger.FatalFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.FatalFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="FatalFormat" id="M:Common.Logging.ILog.FatalFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.EntLib.EntLibLogger.Fatal(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.EntLib.EntLibLogger.Fatal(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.EntLib.EntLibLogger.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.EntLib.EntLibLogger.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Common.Logging.EntLib.EntLibLogger.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Equals" displayName="Equals" id="M:Common.Logging.EntLib.EntLibLogger.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Common.Logging.EntLib.EntLibLogger.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="GetType" displayName="GetType" id="M:Common.Logging.EntLib.EntLibLogger.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Common.Logging.EntLib.EntLibLogger.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Common.Logging.EntLib.EntLibLogger.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
        </class>
        <class name="EntLibLoggerFactoryAdapter" displayName="EntLibLoggerFactoryAdapter" namespace="Common.Logging.EntLib" id="T:Common.Logging.EntLib.EntLibLoggerFactoryAdapter" access="Public">
          <documentation><summary> Adapts the EnterpriseLibrary 4.1 logging system to Common.Logging. </summary>
<remarks> The following configuration property values may be configured: <list type="bullet"><item>DefaultPriority (see <see cref="P:Common.Logging.EntLib.EntLibLoggerFactoryAdapter.DefaultPriority" />)</item><item>ExceptionFormat (see <see cref="P:Common.Logging.EntLib.EntLibLoggerFactoryAdapter.ExceptionFormat" />)</item></list></remarks>
<example> The following snippet shows how to configure EntLib logging for Common.Logging: <code>&lt;configuration&gt;
  &lt;configSections&gt;
      &lt;section name="logging" type="Common.Logging.ConfigurationSectionHandler, Common.Logging" /&gt;
      &lt;section name="loggingConfiguration" type="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings, Microsoft.Practices.EnterpriseLibrary.Logging, Version=4.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" /&gt;
  &lt;/configSections&gt;
  &lt;common&gt;
    &lt;logging&gt;
      &lt;factoryAdapter type="Common.Logging.EntLib.EntLibLoggerFactoryAdapter, Common.Logging.EntLib41"&gt;
        &lt;arg key="DefaultPriority" value="-1" /&gt;
      &lt;/factoryAdapter&gt;
    &lt;/logging&gt;
  &lt;/common&gt;
  &lt;loggingConfiguration name="Logging Application Block"
&lt;-- configure enterprise logging application block here --&gt;
...
  &lt;/loggingConfiguration&gt;
&lt;/configuration&gt;
</code></example>
<author>Mark Pollack</author>
<author>Erich Eichinger</author></documentation>
          <baseType name="AbstractCachingLoggerFactoryAdapter" id="T:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter" displayName="AbstractCachingLoggerFactoryAdapter" namespace="Common.Logging.Factory" assembly="Common.Logging" />
          <implementsClass type="Common.Logging.ILoggerFactoryAdapter" id="T:Common.Logging.ILoggerFactoryAdapter" displayName="ILoggerFactoryAdapter" namespace="Common.Logging" inherited="true" />
          <constructor name=".ctor" id="M:Common.Logging.EntLib.EntLibLoggerFactoryAdapter.#ctor" access="Public" contract="Normal" overload="1">
            <documentation><summary> Initializes a new instance of the <see cref="T:Common.Logging.EntLib.EntLibLoggerFactoryAdapter" /> class. </summary></documentation>
          </constructor>
          <constructor name=".ctor" id="M:Common.Logging.EntLib.EntLibLoggerFactoryAdapter.#ctor(System.Int32,System.String,Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter)" access="Public" contract="Normal" overload="2">
            <documentation><summary> Initializes a new instance of the <see cref="T:Common.Logging.EntLib.EntLibLoggerFactoryAdapter" /> class with the specified configuration parameters. </summary></documentation>
            <parameter name="defaultPriority" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="exceptionFormat" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="logWriter" typeId="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter" displayName="LogWriter" namespace="Microsoft.Practices.EnterpriseLibrary.Logging" assembly="Microsoft.Practices.EnterpriseLibrary.Logging" nullable="false" valueType="false" />
          </constructor>
          <constructor name=".ctor" id="M:Common.Logging.EntLib.EntLibLoggerFactoryAdapter.#ctor(System.Collections.Specialized.NameValueCollection)" access="Public" contract="Normal" overload="3">
            <documentation><summary> Initializes a new instance of the <see cref="T:Common.Logging.EntLib.EntLibLoggerFactoryAdapter" /> class. </summary>
<remarks>passed in values are not used, configuration is external to EntLib logging API</remarks>
<param name="properties">The properties.</param></documentation>
            <parameter name="properties" typeId="T:System.Collections.Specialized.NameValueCollection" displayName="NameValueCollection" namespace="System.Collections.Specialized" assembly="System" nullable="false" valueType="false" />
          </constructor>
          <property name="DefaultPriority" id="P:Common.Logging.EntLib.EntLibLoggerFactoryAdapter.DefaultPriority" access="Public" contract="Normal" get="Public" set="false" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> The default priority used to log events. </summary>
<remarks>defaults to <see cref="F:Common.Logging.EntLib.EntLibLoggerSettings.DEFAULTPRIORITY" /></remarks></documentation>
          </property>
          <property name="ExceptionFormat" id="P:Common.Logging.EntLib.EntLibLoggerFactoryAdapter.ExceptionFormat" access="Public" contract="Normal" get="Public" set="false" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <documentation><summary> The format string used for formatting exceptions </summary>
<remarks> defaults to <see cref="F:Common.Logging.EntLib.EntLibLoggerSettings.DEFAULTEXCEPTIONFORMAT" /></remarks></documentation>
          </property>
          <property name="LogWriter" id="P:Common.Logging.EntLib.EntLibLoggerFactoryAdapter.LogWriter" access="Public" contract="Normal" get="Public" set="false" typeId="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter" displayName="LogWriter" namespace="Microsoft.Practices.EnterpriseLibrary.Logging" assembly="Microsoft.Practices.EnterpriseLibrary.Logging" nullable="false" valueType="false">
            <documentation><summary> the <see cref="F:Common.Logging.EntLib.EntLibLoggerFactoryAdapter._logWriter" /> to write log events to. </summary>
<remarks> defaults to <see cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.Logger.Writer" />. </remarks></documentation>
          </property>
          <method name="CreateLogger" displayName="CreateLogger" id="M:Common.Logging.EntLib.EntLibLoggerFactoryAdapter.CreateLogger(System.String)" access="Family" contract="Override" valueType="false" overload="1">
            <returnType typeId="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Creates a new <see cref="T:Common.Logging.EntLib.EntLibLogger" /> instance. </summary></documentation>
            <parameter name="name" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="CreateLogger" displayName="CreateLogger" id="M:Common.Logging.EntLib.EntLibLoggerFactoryAdapter.CreateLogger(System.String,Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter,Common.Logging.EntLib.EntLibLoggerSettings)" access="Family" contract="Virtual" valueType="false" overload="2">
            <returnType typeId="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Creates a new <see cref="T:Common.Logging.EntLib.EntLibLogger" /> instance. </summary></documentation>
            <parameter name="name" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="logWriter" typeId="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter" displayName="LogWriter" namespace="Microsoft.Practices.EnterpriseLibrary.Logging" assembly="Microsoft.Practices.EnterpriseLibrary.Logging" nullable="false" valueType="false" />
            <parameter name="settings" typeId="T:Common.Logging.EntLib.EntLibLoggerSettings" displayName="EntLibLoggerSettings" namespace="Common.Logging.EntLib" assembly="Common.Logging.EntLib41" nullable="false" valueType="false" />
          </method>
          <method name="ClearLoggerCache" displayName="ClearLoggerCache" id="M:Common.Logging.EntLib.EntLibLoggerFactoryAdapter.ClearLoggerCache" access="Family" contract="Normal" valueType="true" declaringType="Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.ClearLoggerCache">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Purges all loggers from cache </summary></documentation>
          </method>
          <method name="GetLogger" displayName="GetLogger" id="M:Common.Logging.EntLib.EntLibLoggerFactoryAdapter.GetLogger(System.Type)" access="Public" contract="Final" valueType="false" declaringType="Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.GetLogger(System.Type)" overload="1">
            <returnType typeId="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Get a ILog instance by <see cref="T:System.Type" />. </summary></documentation>
            <parameter name="type" typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="GetLogger" id="M:Common.Logging.ILoggerFactoryAdapter.GetLogger(System.Type)" interface="ILoggerFactoryAdapter" interfaceId="T:Common.Logging.ILoggerFactoryAdapter" assembly="Common.Logging" declaringType="Common.Logging.ILoggerFactoryAdapter" />
          </method>
          <method name="GetLogger" displayName="GetLogger" id="M:Common.Logging.EntLib.EntLibLoggerFactoryAdapter.GetLogger(System.String)" access="Public" contract="Final" valueType="false" declaringType="Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.GetLogger(System.String)" overload="2">
            <returnType typeId="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Get a ILog instance by name. </summary></documentation>
            <parameter name="name" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="GetLogger" id="M:Common.Logging.ILoggerFactoryAdapter.GetLogger(System.String)" interface="ILoggerFactoryAdapter" interfaceId="T:Common.Logging.ILoggerFactoryAdapter" assembly="Common.Logging" declaringType="Common.Logging.ILoggerFactoryAdapter" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Common.Logging.EntLib.EntLibLoggerFactoryAdapter.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Equals" displayName="Equals" id="M:Common.Logging.EntLib.EntLibLoggerFactoryAdapter.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Common.Logging.EntLib.EntLibLoggerFactoryAdapter.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="GetType" displayName="GetType" id="M:Common.Logging.EntLib.EntLibLoggerFactoryAdapter.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Common.Logging.EntLib.EntLibLoggerFactoryAdapter.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Common.Logging.EntLib.EntLibLoggerFactoryAdapter.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
        </class>
        <class name="EntLibLoggerSettings" displayName="EntLibLoggerSettings" namespace="Common.Logging.EntLib" id="T:Common.Logging.EntLib.EntLibLoggerSettings" access="Public">
          <documentation><summary> Holds configuration settings for <see cref="T:Common.Logging.EntLib.EntLibLogger" />s. </summary>
<author>Erich Eichinger</author></documentation>
          <constructor name=".ctor" id="M:Common.Logging.EntLib.EntLibLoggerSettings.#ctor(System.Int32,System.String)" access="Public" contract="Normal">
            <documentation><summary> Initializes a new instance. </summary></documentation>
            <parameter name="defaultPriority" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="exceptionFormat" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </constructor>
          <field name="priority" id="F:Common.Logging.EntLib.EntLibLoggerSettings.priority" access="Public" contract="Normal" initOnly="true" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> the default priority to be used. </summary></documentation>
          </field>
          <field name="exceptionFormat" id="F:Common.Logging.EntLib.EntLibLoggerSettings.exceptionFormat" access="Public" contract="Normal" initOnly="true" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <documentation><summary> the exception format to be used. </summary></documentation>
          </field>
          <field name="DEFAULTPRIORITY" id="F:Common.Logging.EntLib.EntLibLoggerSettings.DEFAULTPRIORITY" access="Public" contract="Static" initOnly="true" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> the default priority used for logging. </summary></documentation>
          </field>
          <field name="DEFAULTEXCEPTIONFORMAT" id="F:Common.Logging.EntLib.EntLibLoggerSettings.DEFAULTEXCEPTIONFORMAT" access="Public" contract="Static" initOnly="true" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <documentation><summary> the default <see cref="F:Common.Logging.EntLib.EntLibLoggerSettings.exceptionFormat" /> used for formatting error message </summary>
<remarks> "Exception[ message = $(exception.message), source = $(exception.source), targetsite = $(exception.targetsite), stacktrace = $(exception.stacktrace) ]" </remarks></documentation>
          </field>
          <method name="ToString" displayName="ToString" id="M:Common.Logging.EntLib.EntLibLoggerSettings.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Equals" displayName="Equals" id="M:Common.Logging.EntLib.EntLibLoggerSettings.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Common.Logging.EntLib.EntLibLoggerSettings.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="GetType" displayName="GetType" id="M:Common.Logging.EntLib.EntLibLoggerSettings.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Common.Logging.EntLib.EntLibLoggerSettings.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Common.Logging.EntLib.EntLibLoggerSettings.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
        </class>
        <class name="SeverityFilter" displayName="SeverityFilter" namespace="Common.Logging.EntLib" id="T:Common.Logging.EntLib.SeverityFilter" access="Public">
          <documentation><summary> Filters <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry" />s by severity (see <see cref="T:System.Diagnostics.TraceEventType" />). </summary>
<author>Erich Eichinger</author></documentation>
          <attribute name="Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationElementTypeAttribute">
            <property name="ConfigurationType" type="System.Type" value="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomLogFilterData" />
          </attribute>
          <baseType name="LogFilter" id="T:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogFilter" displayName="LogFilter" namespace="Microsoft.Practices.EnterpriseLibrary.Logging.Filters" assembly="Microsoft.Practices.EnterpriseLibrary.Logging" />
          <implementsClass type="Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter" id="T:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter" displayName="ILogFilter" namespace="Microsoft.Practices.EnterpriseLibrary.Logging.Filters" inherited="true" />
          <constructor name=".ctor" id="M:Common.Logging.EntLib.SeverityFilter.#ctor(System.String,System.Int32)" access="Public" contract="Normal" overload="1">
            <documentation><summary> Creates a new filter instance </summary></documentation>
            <parameter name="name" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="severityMask" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </constructor>
          <constructor name=".ctor" id="M:Common.Logging.EntLib.SeverityFilter.#ctor(System.String,System.Diagnostics.TraceEventType)" access="Public" contract="Normal" overload="2">
            <documentation><summary> Creates a new filter instance </summary></documentation>
            <parameter name="name" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="severityMask" typeId="T:System.Diagnostics.TraceEventType" displayName="TraceEventType" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="true" />
          </constructor>
          <constructor name=".ctor" id="M:Common.Logging.EntLib.SeverityFilter.#ctor(System.Collections.Specialized.NameValueCollection)" access="Public" contract="Normal" overload="3">
            <documentation><summary> Creates a new filter instance </summary></documentation>
            <parameter name="attributes" typeId="T:System.Collections.Specialized.NameValueCollection" displayName="NameValueCollection" namespace="System.Collections.Specialized" assembly="System" nullable="false" valueType="false" />
          </constructor>
          <property name="SeverityMask" id="P:Common.Logging.EntLib.SeverityFilter.SeverityMask" access="Public" contract="Normal" get="Public" set="Public" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Bitmask to identify severity levels that should be logged. </summary></documentation>
          </property>
          <property name="Name" id="P:Common.Logging.EntLib.SeverityFilter.Name" access="Public" contract="Final" declaringType="Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogFilter" declaringAssembly="Microsoft.Practices.EnterpriseLibrary.Logging" declaringId="P:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogFilter.Name" get="Public" set="false" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <documentation><summary></summary></documentation>
            <implements name="Name" id="P:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter.Name" interface="ILogFilter" assembly="Microsoft.Practices.EnterpriseLibrary.Logging" interfaceId="T:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter" declaringType="Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter" />
          </property>
          <method name="Filter" displayName="Filter" id="M:Common.Logging.EntLib.SeverityFilter.Filter(Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)" access="Public" contract="Override" valueType="true">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Check, if <paramref name="log" /> severity matches <see cref="F:Common.Logging.EntLib.SeverityFilter.severityMask" />. </summary>
<param name="log"></param>
<returns></returns></documentation>
            <parameter name="log" typeId="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry" displayName="LogEntry" namespace="Microsoft.Practices.EnterpriseLibrary.Logging" assembly="Microsoft.Practices.EnterpriseLibrary.Logging" nullable="false" valueType="false" />
            <implements name="Filter" id="M:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter.Filter(Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)" interface="ILogFilter" interfaceId="T:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter" assembly="Microsoft.Practices.EnterpriseLibrary.Logging" declaringType="Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter" />
          </method>
          <method name="ShouldLog" displayName="ShouldLog" id="M:Common.Logging.EntLib.SeverityFilter.ShouldLog(System.Diagnostics.TraceEventType)" access="Public" contract="Normal" valueType="true">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Checks, whether the specified severity is allowed to log. </summary></documentation>
            <parameter name="severity" typeId="T:System.Diagnostics.TraceEventType" displayName="TraceEventType" namespace="System.Diagnostics" assembly="System" nullable="false" valueType="true" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Common.Logging.EntLib.SeverityFilter.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Equals" displayName="Equals" id="M:Common.Logging.EntLib.SeverityFilter.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Common.Logging.EntLib.SeverityFilter.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="GetType" displayName="GetType" id="M:Common.Logging.EntLib.SeverityFilter.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Common.Logging.EntLib.SeverityFilter.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Common.Logging.EntLib.SeverityFilter.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
        </class>
      </namespace>
    </module>
  </assembly>
  <assembly name="Common.Logging.Log4Net129" version="2.0.0.0">
    <documentation><summary>
  <para>This assembly contains the adapter to the log4net 1.2.9 library</para>
  <para>For an example on how to configure <list type="bullet"><item>Common.Logging to render its output to log4net, see <see cref="T:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter" />.</item><item>log4net to render its output to Common.Logging use <see cref="T:Common.Logging.Log4Net.CommonLoggingAppender" />.</item></list></para>
</summary></documentation>
    <assemblyReference name="log4net" />
    <assemblyReference name="mscorlib" />
    <assemblyReference name="Common.Logging" />
    <assemblyReference name="System" />
    <assemblyReference name="mscorlib" />
    <attribute name="System.Reflection.AssemblyProductAttribute" target="assembly">
      <property name="Product" type="System.String" value="Common Logging Framework log4net 1.2.9 Adapter" />
    </attribute>
    <attribute name="System.Diagnostics.DebuggableAttribute" target="assembly">
      <property name="IsJITTrackingEnabled" type="System.Boolean" value="True" />
      <property name="IsJITOptimizerDisabled" type="System.Boolean" value="True" />
      <property name="DebuggingFlags" type="System.Diagnostics.DebuggableAttribute+DebuggingModes" value="(DebuggingModes.Default|DebuggingModes.IgnoreSymbolStoreSequencePoints|DebuggingModes.EnableEditAndContinue|DebuggingModes.DisableOptimizations)" />
    </attribute>
    <attribute name="System.Runtime.CompilerServices.CompilationRelaxationsAttribute" target="assembly">
      <property name="CompilationRelaxations" type="System.Int32" value="8" />
    </attribute>
    <attribute name="System.CLSCompliantAttribute" target="assembly">
      <property name="IsCompliant" type="System.Boolean" value="True" />
    </attribute>
    <attribute name="System.Reflection.AssemblyConfigurationAttribute" target="assembly">
      <property name="Configuration" type="System.String" value="net-2.0.win32; release" />
    </attribute>
    <attribute name="System.Runtime.InteropServices.ComVisibleAttribute" target="assembly">
      <property name="Value" type="System.Boolean" value="False" />
    </attribute>
    <attribute name="System.Runtime.CompilerServices.RuntimeCompatibilityAttribute" target="assembly">
      <property name="WrapNonExceptionThrows" type="System.Boolean" value="True" />
    </attribute>
    <attribute name="System.Reflection.AssemblyInformationalVersionAttribute" target="assembly">
      <property name="InformationalVersion" type="System.String" value="2.0.0.0; net-2.0.win32; release" />
    </attribute>
    <attribute name="System.Reflection.AssemblyTrademarkAttribute" target="assembly">
      <property name="Trademark" type="System.String" value="Apache License, Version 2.0" />
    </attribute>
    <attribute name="System.Reflection.AssemblyCopyrightAttribute" target="assembly">
      <property name="Copyright" type="System.String" value="Copyright 2006-2009 the Common Infrastructure Libraries Team." />
    </attribute>
    <attribute name="System.Reflection.AssemblyCompanyAttribute" target="assembly">
      <property name="Company" type="System.String" value="http://netcommon.sourceforge.net/" />
    </attribute>
    <module name="Common.Logging.Log4Net129.dll">
      <namespace name="Common.Logging.Log4Net">
        <documentation><summary>
  <para> This namespace contains the implementations to plug log4net 1.2.9 into Common.Logging. </para>
  <para>For an example on how to configure <list type="bullet"><item>Common.Logging to render its output to log4net, see <see cref="T:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter" />.</item><item>log4net to render its output to Common.Logging use <see cref="T:Common.Logging.Log4Net.CommonLoggingAppender" />.</item></list></para>
</summary></documentation>
        <class name="CommonLoggingAppender" displayName="CommonLoggingAppender" namespace="Common.Logging.Log4Net" id="T:Common.Logging.Log4Net.CommonLoggingAppender" access="Public">
          <documentation><summary> Routes log events to Common.Logging infrastructure. </summary>
<example> To route all events logged using log4net to Common.Logging, you need to configure this appender as shown below: <code>&lt;log4net&gt;
    &lt;appender name="CommonLoggingAppender" 
              type="Common.Logging.Log4Net.CommonLoggingAppender, Common.Logging.Log4Net129"&gt;
        &lt;layout type="log4net.Layout.PatternLayout, log4net"&gt;
            &lt;param name="ConversionPattern" value="%level - %class.%method: %message" /&gt;
        &lt;/layout&gt;
    &lt;/appender&gt;

    &lt;root&gt;
        &lt;level value="ALL" /&gt;
        &lt;appender-ref ref="CommonLoggingAppender" /&gt;
    &lt;/root&gt;
&lt;/log4net&gt;
</code></example>
<author>Erich Eichinger</author></documentation>
          <baseType name="AppenderSkeleton" id="T:log4net.Appender.AppenderSkeleton" displayName="AppenderSkeleton" namespace="log4net.Appender" assembly="log4net" />
          <implementsClass type="log4net.Appender.IAppender" id="T:log4net.Appender.IAppender" displayName="IAppender" namespace="log4net.Appender" inherited="true" />
          <implementsClass type="log4net.Core.IOptionHandler" id="T:log4net.Core.IOptionHandler" displayName="IOptionHandler" namespace="log4net.Core" inherited="true" />
          <constructor name=".ctor" id="M:Common.Logging.Log4Net.CommonLoggingAppender.#ctor" access="Public" contract="Normal">
            <documentation>
              <summary>Initializes a new instance of the <see cref="T:Common.Logging.Log4Net.CommonLoggingAppender" /> class.</summary>
            </documentation>
          </constructor>
          <property name="Layout" id="P:Common.Logging.Log4Net.CommonLoggingAppender.Layout" access="Public" contract="Override" get="Public" set="Public" typeId="T:log4net.Layout.ILayout" displayName="ILayout" namespace="log4net.Layout" assembly="log4net" nullable="false" valueType="false">
            <documentation><summary> Get or set the layout for this appender </summary></documentation>
          </property>
          <property name="Threshold" id="P:Common.Logging.Log4Net.CommonLoggingAppender.Threshold" access="Public" contract="Normal" declaringType="log4net.Appender.AppenderSkeleton" declaringAssembly="log4net" declaringId="P:log4net.Appender.AppenderSkeleton.Threshold" get="Public" set="Public" typeId="T:log4net.Core.Level" displayName="Level" namespace="log4net.Core" assembly="log4net" nullable="false" valueType="false">
            <documentation><summary></summary></documentation>
          </property>
          <property name="ErrorHandler" id="P:Common.Logging.Log4Net.CommonLoggingAppender.ErrorHandler" access="Public" contract="Virtual" declaringType="log4net.Appender.AppenderSkeleton" declaringAssembly="log4net" declaringId="P:log4net.Appender.AppenderSkeleton.ErrorHandler" get="Public" set="Public" typeId="T:log4net.Core.IErrorHandler" displayName="IErrorHandler" namespace="log4net.Core" assembly="log4net" nullable="false" valueType="false">
            <documentation><summary></summary></documentation>
          </property>
          <property name="FilterHead" id="P:Common.Logging.Log4Net.CommonLoggingAppender.FilterHead" access="Public" contract="Virtual" declaringType="log4net.Appender.AppenderSkeleton" declaringAssembly="log4net" declaringId="P:log4net.Appender.AppenderSkeleton.FilterHead" get="Public" set="false" typeId="T:log4net.Filter.IFilter" displayName="IFilter" namespace="log4net.Filter" assembly="log4net" nullable="false" valueType="false">
            <documentation><summary></summary></documentation>
          </property>
          <property name="Name" id="P:Common.Logging.Log4Net.CommonLoggingAppender.Name" access="Public" contract="Final" declaringType="log4net.Appender.AppenderSkeleton" declaringAssembly="log4net" declaringId="P:log4net.Appender.AppenderSkeleton.Name" get="Public" set="Public" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <documentation><summary></summary></documentation>
            <implements name="Name" id="P:log4net.Appender.IAppender.Name" interface="IAppender" assembly="log4net" interfaceId="T:log4net.Appender.IAppender" declaringType="log4net.Appender.IAppender" />
          </property>
          <property name="RequiresLayout" id="P:Common.Logging.Log4Net.CommonLoggingAppender.RequiresLayout" access="Family" contract="Virtual" declaringType="log4net.Appender.AppenderSkeleton" declaringAssembly="log4net" declaringId="P:log4net.Appender.AppenderSkeleton.RequiresLayout" get="Family" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary></summary></documentation>
          </property>
          <method name="GetClosestLevel" displayName="GetClosestLevel" id="M:Common.Logging.Log4Net.CommonLoggingAppender.GetClosestLevel(log4net.Core.Level)" access="Family" contract="Static" valueType="false">
            <returnType typeId="T:log4net.Core.Level" displayName="Level" namespace="log4net.Core" assembly="log4net" nullable="false" valueType="false" />
            <documentation><summary> Gets the closest level supported by Common.Logging of the given log4net level </summary></documentation>
            <parameter name="currentLevel" typeId="T:log4net.Core.Level" displayName="Level" namespace="log4net.Core" assembly="log4net" nullable="false" valueType="false" />
          </method>
          <method name="Append" displayName="Append" id="M:Common.Logging.Log4Net.CommonLoggingAppender.Append(log4net.Core.LoggingEvent)" access="Family" contract="Override" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Sends the given log event to Common.Logging </summary></documentation>
            <parameter name="loggingEvent" typeId="T:log4net.Core.LoggingEvent" displayName="LoggingEvent" namespace="log4net.Core" assembly="log4net" nullable="false" valueType="false" />
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Common.Logging.Log4Net.CommonLoggingAppender.Finalize" access="Family" contract="Override" valueType="true" declaringType="log4net.Appender.AppenderSkeleton" declaringAssembly="log4net" declaringId="M:log4net.Appender.AppenderSkeleton.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="ActivateOptions" displayName="ActivateOptions" id="M:Common.Logging.Log4Net.CommonLoggingAppender.ActivateOptions" access="Public" contract="Virtual" valueType="true" declaringType="log4net.Appender.AppenderSkeleton" declaringAssembly="log4net" declaringId="M:log4net.Appender.AppenderSkeleton.ActivateOptions">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <implements name="ActivateOptions" id="M:log4net.Core.IOptionHandler.ActivateOptions" interface="IOptionHandler" interfaceId="T:log4net.Core.IOptionHandler" assembly="log4net" declaringType="log4net.Core.IOptionHandler" />
          </method>
          <method name="Close" displayName="Close" id="M:Common.Logging.Log4Net.CommonLoggingAppender.Close" access="Public" contract="Final" valueType="true" declaringType="log4net.Appender.AppenderSkeleton" declaringAssembly="log4net" declaringId="M:log4net.Appender.AppenderSkeleton.Close">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <implements name="Close" id="M:log4net.Appender.IAppender.Close" interface="IAppender" interfaceId="T:log4net.Appender.IAppender" assembly="log4net" declaringType="log4net.Appender.IAppender" />
          </method>
          <method name="DoAppend" displayName="DoAppend" id="M:Common.Logging.Log4Net.CommonLoggingAppender.DoAppend(log4net.Core.LoggingEvent)" access="Public" contract="Final" valueType="true" declaringType="log4net.Appender.AppenderSkeleton" declaringAssembly="log4net" declaringId="M:log4net.Appender.AppenderSkeleton.DoAppend(log4net.Core.LoggingEvent)">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="loggingEvent" typeId="T:log4net.Core.LoggingEvent" displayName="LoggingEvent" namespace="log4net.Core" assembly="log4net" nullable="false" valueType="false" />
            <implements name="DoAppend" id="M:log4net.Appender.IAppender.DoAppend(log4net.Core.LoggingEvent)" interface="IAppender" interfaceId="T:log4net.Appender.IAppender" assembly="log4net" declaringType="log4net.Appender.IAppender" />
          </method>
          <method name="AddFilter" displayName="AddFilter" id="M:Common.Logging.Log4Net.CommonLoggingAppender.AddFilter(log4net.Filter.IFilter)" access="Public" contract="Virtual" valueType="true" declaringType="log4net.Appender.AppenderSkeleton" declaringAssembly="log4net" declaringId="M:log4net.Appender.AppenderSkeleton.AddFilter(log4net.Filter.IFilter)">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="filter" typeId="T:log4net.Filter.IFilter" displayName="IFilter" namespace="log4net.Filter" assembly="log4net" nullable="false" valueType="false" />
          </method>
          <method name="ClearFilters" displayName="ClearFilters" id="M:Common.Logging.Log4Net.CommonLoggingAppender.ClearFilters" access="Public" contract="Virtual" valueType="true" declaringType="log4net.Appender.AppenderSkeleton" declaringAssembly="log4net" declaringId="M:log4net.Appender.AppenderSkeleton.ClearFilters">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="IsAsSevereAsThreshold" displayName="IsAsSevereAsThreshold" id="M:Common.Logging.Log4Net.CommonLoggingAppender.IsAsSevereAsThreshold(log4net.Core.Level)" access="Family" contract="Virtual" valueType="true" declaringType="log4net.Appender.AppenderSkeleton" declaringAssembly="log4net" declaringId="M:log4net.Appender.AppenderSkeleton.IsAsSevereAsThreshold(log4net.Core.Level)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="level" typeId="T:log4net.Core.Level" displayName="Level" namespace="log4net.Core" assembly="log4net" nullable="false" valueType="false" />
          </method>
          <method name="OnClose" displayName="OnClose" id="M:Common.Logging.Log4Net.CommonLoggingAppender.OnClose" access="Family" contract="Virtual" valueType="true" declaringType="log4net.Appender.AppenderSkeleton" declaringAssembly="log4net" declaringId="M:log4net.Appender.AppenderSkeleton.OnClose">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="PreAppendCheck" displayName="PreAppendCheck" id="M:Common.Logging.Log4Net.CommonLoggingAppender.PreAppendCheck" access="Family" contract="Virtual" valueType="true" declaringType="log4net.Appender.AppenderSkeleton" declaringAssembly="log4net" declaringId="M:log4net.Appender.AppenderSkeleton.PreAppendCheck">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="RenderLoggingEvent" displayName="RenderLoggingEvent" id="M:Common.Logging.Log4Net.CommonLoggingAppender.RenderLoggingEvent(log4net.Core.LoggingEvent)" access="Family" contract="Normal" valueType="false" declaringType="log4net.Appender.AppenderSkeleton" declaringAssembly="log4net" declaringId="M:log4net.Appender.AppenderSkeleton.RenderLoggingEvent(log4net.Core.LoggingEvent)" overload="1">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
            <parameter name="loggingEvent" typeId="T:log4net.Core.LoggingEvent" displayName="LoggingEvent" namespace="log4net.Core" assembly="log4net" nullable="false" valueType="false" />
          </method>
          <method name="RenderLoggingEvent" displayName="RenderLoggingEvent" id="M:Common.Logging.Log4Net.CommonLoggingAppender.RenderLoggingEvent(System.IO.TextWriter,log4net.Core.LoggingEvent)" access="Family" contract="Normal" valueType="true" declaringType="log4net.Appender.AppenderSkeleton" declaringAssembly="log4net" declaringId="M:log4net.Appender.AppenderSkeleton.RenderLoggingEvent(System.IO.TextWriter,log4net.Core.LoggingEvent)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="writer" typeId="T:System.IO.TextWriter" displayName="TextWriter" namespace="System.IO" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="loggingEvent" typeId="T:log4net.Core.LoggingEvent" displayName="LoggingEvent" namespace="log4net.Core" assembly="log4net" nullable="false" valueType="false" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Common.Logging.Log4Net.CommonLoggingAppender.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Equals" displayName="Equals" id="M:Common.Logging.Log4Net.CommonLoggingAppender.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Common.Logging.Log4Net.CommonLoggingAppender.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="GetType" displayName="GetType" id="M:Common.Logging.Log4Net.CommonLoggingAppender.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Common.Logging.Log4Net.CommonLoggingAppender.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
        </class>
        <class name="Log4NetLogger" displayName="Log4NetLogger" namespace="Common.Logging.Log4Net" id="T:Common.Logging.Log4Net.Log4NetLogger" access="Public">
          <documentation><summary> Concrete implementation of <see cref="T:Common.Logging.ILog" /> interface specific to log4net 1.2.9. </summary>
<remarks> Log4net is capable of outputting extended debug information about where the current message was generated: class name, method name, file, line, etc. Log4net assumes that the location information should be gathered relative to where Debug() was called. When using Common.Logging, Debug() is called in Common.Logging.Log4Net.Log4NetLogger. This means that the location information will indicate that Common.Logging.Log4Net.Log4NetLogger always made the call to Debug(). We need to know where Common.Logging.ILog.Debug() was called. To do this we need to use the log4net.ILog.Logger.Log method and pass in a Type telling log4net where in the stack to begin looking for location information. </remarks>
<author>Gilles Bayon</author>
<author>Erich Eichinger</author></documentation>
          <attribute name="System.SerializableAttribute" />
          <baseType name="AbstractLogger" id="T:Common.Logging.Factory.AbstractLogger" displayName="AbstractLogger" namespace="Common.Logging.Factory" assembly="Common.Logging" />
          <implementsClass type="Common.Logging.ILog" id="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" inherited="true" />
          <constructor name=".ctor" id="M:Common.Logging.Log4Net.Log4NetLogger.#ctor(log4net.Core.ILoggerWrapper)" access="Family" contract="Normal">
            <documentation><summary> Constructor </summary>
<param name="log"></param></documentation>
            <parameter name="log" typeId="T:log4net.Core.ILoggerWrapper" displayName="ILoggerWrapper" namespace="log4net.Core" assembly="log4net" nullable="false" valueType="false" />
          </constructor>
          <property name="IsTraceEnabled" id="P:Common.Logging.Log4Net.Log4NetLogger.IsTraceEnabled" access="Public" contract="Override" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation>
              <summary>
                <span class="missing">Missing &lt;summary&gt; documentation for P:Common.Logging.Log4Net.Log4NetLogger.IsTraceEnabled</span>
              </summary><summary></summary></documentation>
            <implements name="IsTraceEnabled" id="P:Common.Logging.ILog.IsTraceEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsDebugEnabled" id="P:Common.Logging.Log4Net.Log4NetLogger.IsDebugEnabled" access="Public" contract="Override" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation>
              <summary>
                <span class="missing">Missing &lt;summary&gt; documentation for P:Common.Logging.Log4Net.Log4NetLogger.IsDebugEnabled</span>
              </summary><summary></summary></documentation>
            <implements name="IsDebugEnabled" id="P:Common.Logging.ILog.IsDebugEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsInfoEnabled" id="P:Common.Logging.Log4Net.Log4NetLogger.IsInfoEnabled" access="Public" contract="Override" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation>
              <summary>
                <span class="missing">Missing &lt;summary&gt; documentation for P:Common.Logging.Log4Net.Log4NetLogger.IsInfoEnabled</span>
              </summary><summary></summary></documentation>
            <implements name="IsInfoEnabled" id="P:Common.Logging.ILog.IsInfoEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsWarnEnabled" id="P:Common.Logging.Log4Net.Log4NetLogger.IsWarnEnabled" access="Public" contract="Override" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation>
              <summary>
                <span class="missing">Missing &lt;summary&gt; documentation for P:Common.Logging.Log4Net.Log4NetLogger.IsWarnEnabled</span>
              </summary><summary></summary></documentation>
            <implements name="IsWarnEnabled" id="P:Common.Logging.ILog.IsWarnEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsErrorEnabled" id="P:Common.Logging.Log4Net.Log4NetLogger.IsErrorEnabled" access="Public" contract="Override" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation>
              <summary>
                <span class="missing">Missing &lt;summary&gt; documentation for P:Common.Logging.Log4Net.Log4NetLogger.IsErrorEnabled</span>
              </summary><summary></summary></documentation>
            <implements name="IsErrorEnabled" id="P:Common.Logging.ILog.IsErrorEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsFatalEnabled" id="P:Common.Logging.Log4Net.Log4NetLogger.IsFatalEnabled" access="Public" contract="Override" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation>
              <summary>
                <span class="missing">Missing &lt;summary&gt; documentation for P:Common.Logging.Log4Net.Log4NetLogger.IsFatalEnabled</span>
              </summary><summary></summary></documentation>
            <implements name="IsFatalEnabled" id="P:Common.Logging.ILog.IsFatalEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <method name="WriteInternal" displayName="WriteInternal" id="M:Common.Logging.Log4Net.Log4NetLogger.WriteInternal(Common.Logging.LogLevel,System.Object,System.Exception)" access="Family" contract="Override" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Actually sends the message to the underlying log system. </summary>
<param name="logLevel">the level of this log event.</param>
<param name="message">the message to log</param>
<param name="exception">the exception to log (may be null)</param></documentation>
            <parameter name="logLevel" typeId="T:Common.Logging.LogLevel" displayName="LogLevel" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="true" />
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetWriteHandler" displayName="GetWriteHandler" id="M:Common.Logging.Log4Net.Log4NetLogger.GetWriteHandler" access="Family" contract="Virtual" valueType="false" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.GetWriteHandler">
            <returnType typeId="T:Common.Logging.Factory.AbstractLogger.WriteHandler" displayName="AbstractLogger.WriteHandler" namespace="Common.Logging.Factory" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Override this method to use a different method than <see cref="M:Common.Logging.Factory.AbstractLogger.WriteInternal(Common.Logging.LogLevel,System.Object,System.Exception)" /> for writing log events to the underlying log system. </summary></documentation>
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.Log4Net.Log4NetLogger.Trace(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.Log4Net.Log4NetLogger.Trace(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Trace" /> level including the stack trace of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="TraceFormat" displayName="TraceFormat" id="M:Common.Logging.Log4Net.Log4NetLogger.TraceFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.TraceFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="TraceFormat" id="M:Common.Logging.ILog.TraceFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="TraceFormat" displayName="TraceFormat" id="M:Common.Logging.Log4Net.Log4NetLogger.TraceFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.TraceFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="TraceFormat" id="M:Common.Logging.ILog.TraceFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="TraceFormat" displayName="TraceFormat" id="M:Common.Logging.Log4Net.Log4NetLogger.TraceFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.TraceFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="TraceFormat" id="M:Common.Logging.ILog.TraceFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="TraceFormat" displayName="TraceFormat" id="M:Common.Logging.Log4Net.Log4NetLogger.TraceFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.TraceFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="TraceFormat" id="M:Common.Logging.ILog.TraceFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.Log4Net.Log4NetLogger.Trace(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.Log4Net.Log4NetLogger.Trace(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.Log4Net.Log4NetLogger.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.Log4Net.Log4NetLogger.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.Log4Net.Log4NetLogger.Debug(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.Log4Net.Log4NetLogger.Debug(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Debug" /> level including the stack Debug of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="DebugFormat" displayName="DebugFormat" id="M:Common.Logging.Log4Net.Log4NetLogger.DebugFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.DebugFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="DebugFormat" id="M:Common.Logging.ILog.DebugFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="DebugFormat" displayName="DebugFormat" id="M:Common.Logging.Log4Net.Log4NetLogger.DebugFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.DebugFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="DebugFormat" id="M:Common.Logging.ILog.DebugFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="DebugFormat" displayName="DebugFormat" id="M:Common.Logging.Log4Net.Log4NetLogger.DebugFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.DebugFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="DebugFormat" id="M:Common.Logging.ILog.DebugFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="DebugFormat" displayName="DebugFormat" id="M:Common.Logging.Log4Net.Log4NetLogger.DebugFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.DebugFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="DebugFormat" id="M:Common.Logging.ILog.DebugFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.Log4Net.Log4NetLogger.Debug(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.Log4Net.Log4NetLogger.Debug(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.Log4Net.Log4NetLogger.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.Log4Net.Log4NetLogger.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.Log4Net.Log4NetLogger.Info(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.Log4Net.Log4NetLogger.Info(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Info" /> level including the stack Info of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="InfoFormat" displayName="InfoFormat" id="M:Common.Logging.Log4Net.Log4NetLogger.InfoFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.InfoFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="InfoFormat" id="M:Common.Logging.ILog.InfoFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="InfoFormat" displayName="InfoFormat" id="M:Common.Logging.Log4Net.Log4NetLogger.InfoFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.InfoFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="InfoFormat" id="M:Common.Logging.ILog.InfoFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="InfoFormat" displayName="InfoFormat" id="M:Common.Logging.Log4Net.Log4NetLogger.InfoFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.InfoFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="InfoFormat" id="M:Common.Logging.ILog.InfoFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="InfoFormat" displayName="InfoFormat" id="M:Common.Logging.Log4Net.Log4NetLogger.InfoFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.InfoFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="InfoFormat" id="M:Common.Logging.ILog.InfoFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.Log4Net.Log4NetLogger.Info(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.Log4Net.Log4NetLogger.Info(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.Log4Net.Log4NetLogger.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.Log4Net.Log4NetLogger.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.Log4Net.Log4NetLogger.Warn(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.Log4Net.Log4NetLogger.Warn(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Warn" /> level including the stack Warn of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="WarnFormat" displayName="WarnFormat" id="M:Common.Logging.Log4Net.Log4NetLogger.WarnFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.WarnFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="WarnFormat" id="M:Common.Logging.ILog.WarnFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="WarnFormat" displayName="WarnFormat" id="M:Common.Logging.Log4Net.Log4NetLogger.WarnFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.WarnFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="WarnFormat" id="M:Common.Logging.ILog.WarnFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="WarnFormat" displayName="WarnFormat" id="M:Common.Logging.Log4Net.Log4NetLogger.WarnFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.WarnFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="WarnFormat" id="M:Common.Logging.ILog.WarnFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="WarnFormat" displayName="WarnFormat" id="M:Common.Logging.Log4Net.Log4NetLogger.WarnFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.WarnFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="WarnFormat" id="M:Common.Logging.ILog.WarnFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.Log4Net.Log4NetLogger.Warn(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.Log4Net.Log4NetLogger.Warn(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.Log4Net.Log4NetLogger.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.Log4Net.Log4NetLogger.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.Log4Net.Log4NetLogger.Error(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.Log4Net.Log4NetLogger.Error(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Error" /> level including the stack Error of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ErrorFormat" displayName="ErrorFormat" id="M:Common.Logging.Log4Net.Log4NetLogger.ErrorFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.ErrorFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="ErrorFormat" id="M:Common.Logging.ILog.ErrorFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ErrorFormat" displayName="ErrorFormat" id="M:Common.Logging.Log4Net.Log4NetLogger.ErrorFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.ErrorFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="ErrorFormat" id="M:Common.Logging.ILog.ErrorFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ErrorFormat" displayName="ErrorFormat" id="M:Common.Logging.Log4Net.Log4NetLogger.ErrorFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.ErrorFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="ErrorFormat" id="M:Common.Logging.ILog.ErrorFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ErrorFormat" displayName="ErrorFormat" id="M:Common.Logging.Log4Net.Log4NetLogger.ErrorFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.ErrorFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="ErrorFormat" id="M:Common.Logging.ILog.ErrorFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.Log4Net.Log4NetLogger.Error(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.Log4Net.Log4NetLogger.Error(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.Log4Net.Log4NetLogger.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.Log4Net.Log4NetLogger.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.Log4Net.Log4NetLogger.Fatal(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.Log4Net.Log4NetLogger.Fatal(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level including the stack Fatal of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="FatalFormat" displayName="FatalFormat" id="M:Common.Logging.Log4Net.Log4NetLogger.FatalFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.FatalFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="FatalFormat" id="M:Common.Logging.ILog.FatalFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="FatalFormat" displayName="FatalFormat" id="M:Common.Logging.Log4Net.Log4NetLogger.FatalFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.FatalFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="FatalFormat" id="M:Common.Logging.ILog.FatalFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="FatalFormat" displayName="FatalFormat" id="M:Common.Logging.Log4Net.Log4NetLogger.FatalFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.FatalFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="FatalFormat" id="M:Common.Logging.ILog.FatalFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="FatalFormat" displayName="FatalFormat" id="M:Common.Logging.Log4Net.Log4NetLogger.FatalFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.FatalFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="FatalFormat" id="M:Common.Logging.ILog.FatalFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.Log4Net.Log4NetLogger.Fatal(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.Log4Net.Log4NetLogger.Fatal(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.Log4Net.Log4NetLogger.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.Log4Net.Log4NetLogger.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Common.Logging.Log4Net.Log4NetLogger.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Equals" displayName="Equals" id="M:Common.Logging.Log4Net.Log4NetLogger.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Common.Logging.Log4Net.Log4NetLogger.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="GetType" displayName="GetType" id="M:Common.Logging.Log4Net.Log4NetLogger.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Common.Logging.Log4Net.Log4NetLogger.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Common.Logging.Log4Net.Log4NetLogger.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
        </class>
        <class name="Log4NetLoggerFactoryAdapter" displayName="Log4NetLoggerFactoryAdapter" namespace="Common.Logging.Log4Net" id="T:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter" access="Public">
          <documentation><summary> Concrete subclass of ILoggerFactoryAdapter specific to log4net 1.2.9. </summary>
<remarks> The following configuration property values may be configured: <list type="bullet"><item><c>configType</c>: <c>INLINE|FILE|FILE-WATCH|EXTERNAL</c></item><item><c>configFile</c>: log4net configuration file path in case of FILE or FILE-WATCH</item></list> The configType values have the following implications: <list type="bullet"><item>INLINE: simply calls <c>XmlConfigurator.Configure()</c></item><item>FILE: calls <c>XmlConfigurator.Configure(System.IO.FileInfo)</c> using <c>configFile</c>.</item><item>FILE-WATCH: calls <c>XmlConfigurator.ConfigureAndWatch(System.IO.FileInfo)</c> using <c>configFile</c>.</item><item>EXTERNAL: does nothing and expects log4net to be configured elsewhere.</item><item>&lt;any&gt;: calls <c>BasicConfigurator.Configure()</c></item></list></remarks>
<example> The following snippet shows how to configure EntLib logging for Common.Logging: <code>&lt;configuration&gt;
  &lt;configSections&gt;
      &lt;section name="logging" type="Common.Logging.ConfigurationSectionHandler, Common.Logging" /&gt;
  &lt;/configSections&gt;
  &lt;common&gt;
    &lt;logging&gt;
      &lt;factoryAdapter type="Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter, Common.Logging.Log4Net129"&gt;
        &lt;arg key="configType" value="FILE" /&gt;
        &lt;arg key="configFile" value="~/log4net.config" /&gt;
      &lt;/factoryAdapter&gt;
    &lt;/logging&gt;
  &lt;/common&gt;
&lt;/configuration&gt;
</code></example>
<author>Gilles Bayon</author>
<author>Erich Eichinger</author></documentation>
          <baseType name="AbstractCachingLoggerFactoryAdapter" id="T:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter" displayName="AbstractCachingLoggerFactoryAdapter" namespace="Common.Logging.Factory" assembly="Common.Logging" />
          <implementsClass type="Common.Logging.ILoggerFactoryAdapter" id="T:Common.Logging.ILoggerFactoryAdapter" displayName="ILoggerFactoryAdapter" namespace="Common.Logging" inherited="true" />
          <constructor name=".ctor" id="M:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.#ctor(System.Collections.Specialized.NameValueCollection)" access="Public" contract="Normal" overload="1">
            <documentation><summary> Constructor </summary>
<param name="properties">configuration properties, see <see cref="T:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter" /> for more.</param></documentation>
            <parameter name="properties" typeId="T:System.Collections.Specialized.NameValueCollection" displayName="NameValueCollection" namespace="System.Collections.Specialized" assembly="System" nullable="false" valueType="false" />
          </constructor>
          <constructor name=".ctor" id="M:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.#ctor(System.Collections.Specialized.NameValueCollection,Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.ILog4NetRuntime)" access="Family" contract="Normal" overload="2">
            <documentation><summary> Constructor accepting configuration properties and an arbitrary <see cref="T:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.ILog4NetRuntime" /> instance. </summary>
<param name="properties">configuration properties, see <see cref="T:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter" /> for more.</param>
<param name="runtime">a log4net runtime adapter</param></documentation>
            <parameter name="properties" typeId="T:System.Collections.Specialized.NameValueCollection" displayName="NameValueCollection" namespace="System.Collections.Specialized" assembly="System" nullable="false" valueType="false" />
            <parameter name="runtime" typeId="T:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.ILog4NetRuntime" displayName="Log4NetLoggerFactoryAdapter.ILog4NetRuntime" namespace="Common.Logging.Log4Net" assembly="Common.Logging.Log4Net129" nullable="false" valueType="false" />
          </constructor>
          <method name="CreateLogger" displayName="CreateLogger" id="M:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.CreateLogger(System.String)" access="Family" contract="Override" valueType="false">
            <returnType typeId="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Create a ILog instance by name </summary>
<param name="name"></param>
<returns></returns></documentation>
            <parameter name="name" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="ClearLoggerCache" displayName="ClearLoggerCache" id="M:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.ClearLoggerCache" access="Family" contract="Normal" valueType="true" declaringType="Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.ClearLoggerCache">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Purges all loggers from cache </summary></documentation>
          </method>
          <method name="GetLogger" displayName="GetLogger" id="M:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.GetLogger(System.Type)" access="Public" contract="Final" valueType="false" declaringType="Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.GetLogger(System.Type)" overload="1">
            <returnType typeId="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Get a ILog instance by <see cref="T:System.Type" />. </summary></documentation>
            <parameter name="type" typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="GetLogger" id="M:Common.Logging.ILoggerFactoryAdapter.GetLogger(System.Type)" interface="ILoggerFactoryAdapter" interfaceId="T:Common.Logging.ILoggerFactoryAdapter" assembly="Common.Logging" declaringType="Common.Logging.ILoggerFactoryAdapter" />
          </method>
          <method name="GetLogger" displayName="GetLogger" id="M:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.GetLogger(System.String)" access="Public" contract="Final" valueType="false" declaringType="Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.GetLogger(System.String)" overload="2">
            <returnType typeId="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Get a ILog instance by name. </summary></documentation>
            <parameter name="name" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="GetLogger" id="M:Common.Logging.ILoggerFactoryAdapter.GetLogger(System.String)" interface="ILoggerFactoryAdapter" interfaceId="T:Common.Logging.ILoggerFactoryAdapter" assembly="Common.Logging" declaringType="Common.Logging.ILoggerFactoryAdapter" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Equals" displayName="Equals" id="M:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="GetType" displayName="GetType" id="M:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
        </class>
        <interface name="Log4NetLoggerFactoryAdapter.ILog4NetRuntime" displayName="Log4NetLoggerFactoryAdapter.ILog4NetRuntime" namespace="Common.Logging.Log4Net" id="T:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.ILog4NetRuntime" access="NestedPublic">
          <documentation><summary> Abstract interface to the underlying log4net runtime </summary></documentation>
          <method name="XmlConfiguratorConfigure" displayName="XmlConfiguratorConfigure" id="M:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.ILog4NetRuntime.XmlConfiguratorConfigure" access="Public" contract="Abstract" valueType="true" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary>Calls <see cref="M:log4net.Config.XmlConfigurator.Configure" /></summary></documentation>
          </method>
          <method name="XmlConfiguratorConfigure" displayName="XmlConfiguratorConfigure" id="M:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.ILog4NetRuntime.XmlConfiguratorConfigure(System.String)" access="Public" contract="Abstract" valueType="true" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary>Calls <see cref="M:log4net.Config.XmlConfigurator.Configure(System.IO.FileInfo)" /></summary></documentation>
            <parameter name="configFile" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="XmlConfiguratorConfigureAndWatch" displayName="XmlConfiguratorConfigureAndWatch" id="M:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.ILog4NetRuntime.XmlConfiguratorConfigureAndWatch(System.String)" access="Public" contract="Abstract" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary>Calls <see cref="M:log4net.Config.XmlConfigurator.ConfigureAndWatch(System.IO.FileInfo)" /></summary></documentation>
            <parameter name="configFile" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="BasicConfiguratorConfigure" displayName="BasicConfiguratorConfigure" id="M:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.ILog4NetRuntime.BasicConfiguratorConfigure" access="Public" contract="Abstract" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary>Calls <see cref="M:log4net.Config.BasicConfigurator.Configure" /></summary></documentation>
          </method>
          <method name="GetLogger" displayName="GetLogger" id="M:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.ILog4NetRuntime.GetLogger(System.String)" access="Public" contract="Abstract" valueType="false">
            <returnType typeId="T:log4net.ILog" displayName="ILog" namespace="log4net" assembly="log4net" nullable="false" valueType="false" />
            <documentation><summary>Calls <see cref="M:Common.Logging.LogManager.GetLogger(System.String)" /></summary></documentation>
            <parameter name="name" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
        </interface>
      </namespace>
    </module>
  </assembly>
  <assembly name="Common.Logging.Log4Net" version="2.0.0.0">
    <documentation><summary>
  <para>This assembly contains the adapter to the log4net 1.2.10 library</para>
  <para>For an example on how to configure <list type="bullet"><item>Common.Logging to render its output to log4net, see <see cref="T:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter" />.</item><item>log4net to render its output to Common.Logging use <see cref="T:Common.Logging.Log4Net.CommonLoggingAppender" />.</item></list></para>
</summary></documentation>
    <assemblyReference name="log4net" />
    <assemblyReference name="mscorlib" />
    <assemblyReference name="Common.Logging" />
    <assemblyReference name="System" />
    <attribute name="System.Reflection.AssemblyProductAttribute" target="assembly">
      <property name="Product" type="System.String" value="Common Logging Framework log4net 1.2.10 Adapter" />
    </attribute>
    <attribute name="System.Diagnostics.DebuggableAttribute" target="assembly">
      <property name="IsJITTrackingEnabled" type="System.Boolean" value="True" />
      <property name="IsJITOptimizerDisabled" type="System.Boolean" value="True" />
      <property name="DebuggingFlags" type="System.Diagnostics.DebuggableAttribute+DebuggingModes" value="(DebuggingModes.Default|DebuggingModes.IgnoreSymbolStoreSequencePoints|DebuggingModes.EnableEditAndContinue|DebuggingModes.DisableOptimizations)" />
    </attribute>
    <attribute name="System.Runtime.CompilerServices.CompilationRelaxationsAttribute" target="assembly">
      <property name="CompilationRelaxations" type="System.Int32" value="8" />
    </attribute>
    <attribute name="System.CLSCompliantAttribute" target="assembly">
      <property name="IsCompliant" type="System.Boolean" value="True" />
    </attribute>
    <attribute name="System.Reflection.AssemblyConfigurationAttribute" target="assembly">
      <property name="Configuration" type="System.String" value="net-2.0.win32; release" />
    </attribute>
    <attribute name="System.Runtime.InteropServices.ComVisibleAttribute" target="assembly">
      <property name="Value" type="System.Boolean" value="False" />
    </attribute>
    <attribute name="System.Runtime.CompilerServices.RuntimeCompatibilityAttribute" target="assembly">
      <property name="WrapNonExceptionThrows" type="System.Boolean" value="True" />
    </attribute>
    <attribute name="System.Reflection.AssemblyInformationalVersionAttribute" target="assembly">
      <property name="InformationalVersion" type="System.String" value="2.0.0.0; net-2.0.win32; release" />
    </attribute>
    <attribute name="System.Reflection.AssemblyTrademarkAttribute" target="assembly">
      <property name="Trademark" type="System.String" value="Apache License, Version 2.0" />
    </attribute>
    <attribute name="System.Reflection.AssemblyCopyrightAttribute" target="assembly">
      <property name="Copyright" type="System.String" value="Copyright 2006-2009 the Common Infrastructure Libraries Team." />
    </attribute>
    <attribute name="System.Reflection.AssemblyCompanyAttribute" target="assembly">
      <property name="Company" type="System.String" value="http://netcommon.sourceforge.net/" />
    </attribute>
    <module name="Common.Logging.Log4Net.dll">
      <namespace name="Common.Logging.Log4Net">
        <documentation><summary>
  <para> This namespace contains the implementations to plug log4net 1.2.10 into Common.Logging. </para>
  <para>For an example on how to configure <list type="bullet"><item>Common.Logging to render its output to log4net, see <see cref="T:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter" />.</item><item>log4net to render its output to Common.Logging use <see cref="T:Common.Logging.Log4Net.CommonLoggingAppender" />.</item></list></para>
</summary></documentation>
        <class name="CommonLoggingAppender" displayName="CommonLoggingAppender" namespace="Common.Logging.Log4Net" id="T:Common.Logging.Log4Net.CommonLoggingAppender" access="Public">
          <documentation><summary> Routes log events to Common.Logging infrastructure. </summary>
<example> To route all events logged using log4net to Common.Logging, you need to configure this appender as shown below: <code>&lt;log4net&gt;
    &lt;appender name="CommonLoggingAppender" 
              type="Common.Logging.Log4Net.CommonLoggingAppender, Common.Logging.Log4Net"&gt;
        &lt;layout type="log4net.Layout.PatternLayout, log4net"&gt;
            &lt;param name="ConversionPattern" value="%level - %class.%method: %message" /&gt;
        &lt;/layout&gt;
    &lt;/appender&gt;

    &lt;root&gt;
        &lt;level value="ALL" /&gt;
        &lt;appender-ref ref="CommonLoggingAppender" /&gt;
    &lt;/root&gt;
&lt;/log4net&gt;
</code></example>
<author>Erich Eichinger</author></documentation>
          <baseType name="AppenderSkeleton" id="T:log4net.Appender.AppenderSkeleton" displayName="AppenderSkeleton" namespace="log4net.Appender" assembly="log4net" />
          <implementsClass type="log4net.Appender.IBulkAppender" id="T:log4net.Appender.IBulkAppender" displayName="IBulkAppender" namespace="log4net.Appender" inherited="true" />
          <implementsClass type="log4net.Appender.IAppender" id="T:log4net.Appender.IAppender" displayName="IAppender" namespace="log4net.Appender" inherited="true" />
          <implementsClass type="log4net.Core.IOptionHandler" id="T:log4net.Core.IOptionHandler" displayName="IOptionHandler" namespace="log4net.Core" inherited="true" />
          <constructor name=".ctor" id="M:Common.Logging.Log4Net.CommonLoggingAppender.#ctor" access="Public" contract="Normal">
            <documentation>
              <summary>Initializes a new instance of the <see cref="T:Common.Logging.Log4Net.CommonLoggingAppender" /> class.</summary>
            </documentation>
          </constructor>
          <property name="Layout" id="P:Common.Logging.Log4Net.CommonLoggingAppender.Layout" access="Public" contract="Override" get="Public" set="Public" typeId="T:log4net.Layout.ILayout" displayName="ILayout" namespace="log4net.Layout" assembly="log4net" nullable="false" valueType="false">
            <documentation><summary> Get or set the layout for this appender </summary></documentation>
          </property>
          <property name="Threshold" id="P:Common.Logging.Log4Net.CommonLoggingAppender.Threshold" access="Public" contract="Normal" declaringType="log4net.Appender.AppenderSkeleton" declaringAssembly="log4net" declaringId="P:log4net.Appender.AppenderSkeleton.Threshold" get="Public" set="Public" typeId="T:log4net.Core.Level" displayName="Level" namespace="log4net.Core" assembly="log4net" nullable="false" valueType="false">
            <documentation><summary></summary></documentation>
          </property>
          <property name="ErrorHandler" id="P:Common.Logging.Log4Net.CommonLoggingAppender.ErrorHandler" access="Public" contract="Virtual" declaringType="log4net.Appender.AppenderSkeleton" declaringAssembly="log4net" declaringId="P:log4net.Appender.AppenderSkeleton.ErrorHandler" get="Public" set="Public" typeId="T:log4net.Core.IErrorHandler" displayName="IErrorHandler" namespace="log4net.Core" assembly="log4net" nullable="false" valueType="false">
            <documentation><summary></summary></documentation>
          </property>
          <property name="FilterHead" id="P:Common.Logging.Log4Net.CommonLoggingAppender.FilterHead" access="Public" contract="Virtual" declaringType="log4net.Appender.AppenderSkeleton" declaringAssembly="log4net" declaringId="P:log4net.Appender.AppenderSkeleton.FilterHead" get="Public" set="false" typeId="T:log4net.Filter.IFilter" displayName="IFilter" namespace="log4net.Filter" assembly="log4net" nullable="false" valueType="false">
            <documentation><summary></summary></documentation>
          </property>
          <property name="Name" id="P:Common.Logging.Log4Net.CommonLoggingAppender.Name" access="Public" contract="Final" declaringType="log4net.Appender.AppenderSkeleton" declaringAssembly="log4net" declaringId="P:log4net.Appender.AppenderSkeleton.Name" get="Public" set="Public" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <documentation><summary></summary></documentation>
            <implements name="Name" id="P:log4net.Appender.IAppender.Name" interface="IAppender" assembly="log4net" interfaceId="T:log4net.Appender.IAppender" declaringType="log4net.Appender.IAppender" />
          </property>
          <property name="RequiresLayout" id="P:Common.Logging.Log4Net.CommonLoggingAppender.RequiresLayout" access="Family" contract="Virtual" declaringType="log4net.Appender.AppenderSkeleton" declaringAssembly="log4net" declaringId="P:log4net.Appender.AppenderSkeleton.RequiresLayout" get="Family" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary></summary></documentation>
          </property>
          <method name="GetClosestLevel" displayName="GetClosestLevel" id="M:Common.Logging.Log4Net.CommonLoggingAppender.GetClosestLevel(log4net.Core.Level)" access="Family" contract="Static" valueType="false">
            <returnType typeId="T:log4net.Core.Level" displayName="Level" namespace="log4net.Core" assembly="log4net" nullable="false" valueType="false" />
            <documentation><summary> Gets the closest level supported by Common.Logging of the given log4net level </summary></documentation>
            <parameter name="currentLevel" typeId="T:log4net.Core.Level" displayName="Level" namespace="log4net.Core" assembly="log4net" nullable="false" valueType="false" />
          </method>
          <method name="Append" displayName="Append" id="M:Common.Logging.Log4Net.CommonLoggingAppender.Append(log4net.Core.LoggingEvent)" access="Family" contract="Override" valueType="true" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Sends the given log event to Common.Logging </summary></documentation>
            <parameter name="loggingEvent" typeId="T:log4net.Core.LoggingEvent" displayName="LoggingEvent" namespace="log4net.Core" assembly="log4net" nullable="false" valueType="false" />
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Common.Logging.Log4Net.CommonLoggingAppender.Finalize" access="Family" contract="Override" valueType="true" declaringType="log4net.Appender.AppenderSkeleton" declaringAssembly="log4net" declaringId="M:log4net.Appender.AppenderSkeleton.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="ActivateOptions" displayName="ActivateOptions" id="M:Common.Logging.Log4Net.CommonLoggingAppender.ActivateOptions" access="Public" contract="Virtual" valueType="true" declaringType="log4net.Appender.AppenderSkeleton" declaringAssembly="log4net" declaringId="M:log4net.Appender.AppenderSkeleton.ActivateOptions">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <implements name="ActivateOptions" id="M:log4net.Core.IOptionHandler.ActivateOptions" interface="IOptionHandler" interfaceId="T:log4net.Core.IOptionHandler" assembly="log4net" declaringType="log4net.Core.IOptionHandler" />
          </method>
          <method name="Close" displayName="Close" id="M:Common.Logging.Log4Net.CommonLoggingAppender.Close" access="Public" contract="Final" valueType="true" declaringType="log4net.Appender.AppenderSkeleton" declaringAssembly="log4net" declaringId="M:log4net.Appender.AppenderSkeleton.Close">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <implements name="Close" id="M:log4net.Appender.IAppender.Close" interface="IAppender" interfaceId="T:log4net.Appender.IAppender" assembly="log4net" declaringType="log4net.Appender.IAppender" />
          </method>
          <method name="DoAppend" displayName="DoAppend" id="M:Common.Logging.Log4Net.CommonLoggingAppender.DoAppend(log4net.Core.LoggingEvent)" access="Public" contract="Final" valueType="true" declaringType="log4net.Appender.AppenderSkeleton" declaringAssembly="log4net" declaringId="M:log4net.Appender.AppenderSkeleton.DoAppend(log4net.Core.LoggingEvent)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="loggingEvent" typeId="T:log4net.Core.LoggingEvent" displayName="LoggingEvent" namespace="log4net.Core" assembly="log4net" nullable="false" valueType="false" />
            <implements name="DoAppend" id="M:log4net.Appender.IAppender.DoAppend(log4net.Core.LoggingEvent)" interface="IAppender" interfaceId="T:log4net.Appender.IAppender" assembly="log4net" declaringType="log4net.Appender.IAppender" />
          </method>
          <method name="DoAppend" displayName="DoAppend" id="M:Common.Logging.Log4Net.CommonLoggingAppender.DoAppend(log4net.Core.LoggingEvent[])" access="Public" contract="Final" valueType="true" declaringType="log4net.Appender.AppenderSkeleton" declaringAssembly="log4net" declaringId="M:log4net.Appender.AppenderSkeleton.DoAppend(log4net.Core.LoggingEvent[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="loggingEvents" typeId="T:log4net.Core.LoggingEvent" displayName="LoggingEvent" namespace="log4net.Core" assembly="log4net" nullable="false" valueType="false">
              <array rank="1" />
            </parameter>
            <implements name="DoAppend" id="M:log4net.Appender.IBulkAppender.DoAppend(log4net.Core.LoggingEvent[])" interface="IBulkAppender" interfaceId="T:log4net.Appender.IBulkAppender" assembly="log4net" declaringType="log4net.Appender.IBulkAppender" />
          </method>
          <method name="FilterEvent" displayName="FilterEvent" id="M:Common.Logging.Log4Net.CommonLoggingAppender.FilterEvent(log4net.Core.LoggingEvent)" access="Family" contract="Virtual" valueType="true" declaringType="log4net.Appender.AppenderSkeleton" declaringAssembly="log4net" declaringId="M:log4net.Appender.AppenderSkeleton.FilterEvent(log4net.Core.LoggingEvent)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="loggingEvent" typeId="T:log4net.Core.LoggingEvent" displayName="LoggingEvent" namespace="log4net.Core" assembly="log4net" nullable="false" valueType="false" />
          </method>
          <method name="AddFilter" displayName="AddFilter" id="M:Common.Logging.Log4Net.CommonLoggingAppender.AddFilter(log4net.Filter.IFilter)" access="Public" contract="Virtual" valueType="true" declaringType="log4net.Appender.AppenderSkeleton" declaringAssembly="log4net" declaringId="M:log4net.Appender.AppenderSkeleton.AddFilter(log4net.Filter.IFilter)">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="filter" typeId="T:log4net.Filter.IFilter" displayName="IFilter" namespace="log4net.Filter" assembly="log4net" nullable="false" valueType="false" />
          </method>
          <method name="ClearFilters" displayName="ClearFilters" id="M:Common.Logging.Log4Net.CommonLoggingAppender.ClearFilters" access="Public" contract="Virtual" valueType="true" declaringType="log4net.Appender.AppenderSkeleton" declaringAssembly="log4net" declaringId="M:log4net.Appender.AppenderSkeleton.ClearFilters">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="IsAsSevereAsThreshold" displayName="IsAsSevereAsThreshold" id="M:Common.Logging.Log4Net.CommonLoggingAppender.IsAsSevereAsThreshold(log4net.Core.Level)" access="Family" contract="Virtual" valueType="true" declaringType="log4net.Appender.AppenderSkeleton" declaringAssembly="log4net" declaringId="M:log4net.Appender.AppenderSkeleton.IsAsSevereAsThreshold(log4net.Core.Level)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="level" typeId="T:log4net.Core.Level" displayName="Level" namespace="log4net.Core" assembly="log4net" nullable="false" valueType="false" />
          </method>
          <method name="OnClose" displayName="OnClose" id="M:Common.Logging.Log4Net.CommonLoggingAppender.OnClose" access="Family" contract="Virtual" valueType="true" declaringType="log4net.Appender.AppenderSkeleton" declaringAssembly="log4net" declaringId="M:log4net.Appender.AppenderSkeleton.OnClose">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Append" displayName="Append" id="M:Common.Logging.Log4Net.CommonLoggingAppender.Append(log4net.Core.LoggingEvent[])" access="Family" contract="Virtual" valueType="true" declaringType="log4net.Appender.AppenderSkeleton" declaringAssembly="log4net" declaringId="M:log4net.Appender.AppenderSkeleton.Append(log4net.Core.LoggingEvent[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="loggingEvents" typeId="T:log4net.Core.LoggingEvent" displayName="LoggingEvent" namespace="log4net.Core" assembly="log4net" nullable="false" valueType="false">
              <array rank="1" />
            </parameter>
          </method>
          <method name="PreAppendCheck" displayName="PreAppendCheck" id="M:Common.Logging.Log4Net.CommonLoggingAppender.PreAppendCheck" access="Family" contract="Virtual" valueType="true" declaringType="log4net.Appender.AppenderSkeleton" declaringAssembly="log4net" declaringId="M:log4net.Appender.AppenderSkeleton.PreAppendCheck">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="RenderLoggingEvent" displayName="RenderLoggingEvent" id="M:Common.Logging.Log4Net.CommonLoggingAppender.RenderLoggingEvent(log4net.Core.LoggingEvent)" access="Family" contract="Normal" valueType="false" declaringType="log4net.Appender.AppenderSkeleton" declaringAssembly="log4net" declaringId="M:log4net.Appender.AppenderSkeleton.RenderLoggingEvent(log4net.Core.LoggingEvent)" overload="1">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
            <parameter name="loggingEvent" typeId="T:log4net.Core.LoggingEvent" displayName="LoggingEvent" namespace="log4net.Core" assembly="log4net" nullable="false" valueType="false" />
          </method>
          <method name="RenderLoggingEvent" displayName="RenderLoggingEvent" id="M:Common.Logging.Log4Net.CommonLoggingAppender.RenderLoggingEvent(System.IO.TextWriter,log4net.Core.LoggingEvent)" access="Family" contract="Normal" valueType="true" declaringType="log4net.Appender.AppenderSkeleton" declaringAssembly="log4net" declaringId="M:log4net.Appender.AppenderSkeleton.RenderLoggingEvent(System.IO.TextWriter,log4net.Core.LoggingEvent)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="writer" typeId="T:System.IO.TextWriter" displayName="TextWriter" namespace="System.IO" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="loggingEvent" typeId="T:log4net.Core.LoggingEvent" displayName="LoggingEvent" namespace="log4net.Core" assembly="log4net" nullable="false" valueType="false" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Common.Logging.Log4Net.CommonLoggingAppender.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Equals" displayName="Equals" id="M:Common.Logging.Log4Net.CommonLoggingAppender.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Common.Logging.Log4Net.CommonLoggingAppender.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="GetType" displayName="GetType" id="M:Common.Logging.Log4Net.CommonLoggingAppender.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Common.Logging.Log4Net.CommonLoggingAppender.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
        </class>
        <class name="Log4NetLogger" displayName="Log4NetLogger" namespace="Common.Logging.Log4Net" id="T:Common.Logging.Log4Net.Log4NetLogger" access="Public">
          <documentation><summary> Concrete implementation of <see cref="T:Common.Logging.ILog" /> interface specific to log4net 1.2.10. </summary>
<remarks> Log4net is capable of outputting extended debug information about where the current message was generated: class name, method name, file, line, etc. Log4net assumes that the location information should be gathered relative to where Debug() was called. When using Common.Logging, Debug() is called in Common.Logging.Log4Net.Log4NetLogger. This means that the location information will indicate that Common.Logging.Log4Net.Log4NetLogger always made the call to Debug(). We need to know where Common.Logging.ILog.Debug() was called. To do this we need to use the log4net.ILog.Logger.Log method and pass in a Type telling log4net where in the stack to begin looking for location information. </remarks>
<author>Gilles Bayon</author>
<author>Erich Eichinger</author></documentation>
          <baseType name="AbstractLogger" id="T:Common.Logging.Factory.AbstractLogger" displayName="AbstractLogger" namespace="Common.Logging.Factory" assembly="Common.Logging" />
          <implementsClass type="Common.Logging.ILog" id="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" inherited="true" />
          <constructor name=".ctor" id="M:Common.Logging.Log4Net.Log4NetLogger.#ctor(log4net.Core.ILoggerWrapper)" access="Family" contract="Normal">
            <documentation><summary> Constructor </summary>
<param name="log"></param></documentation>
            <parameter name="log" typeId="T:log4net.Core.ILoggerWrapper" displayName="ILoggerWrapper" namespace="log4net.Core" assembly="log4net" nullable="false" valueType="false" />
          </constructor>
          <property name="IsTraceEnabled" id="P:Common.Logging.Log4Net.Log4NetLogger.IsTraceEnabled" access="Public" contract="Override" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary></documentation>
            <implements name="IsTraceEnabled" id="P:Common.Logging.ILog.IsTraceEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsDebugEnabled" id="P:Common.Logging.Log4Net.Log4NetLogger.IsDebugEnabled" access="Public" contract="Override" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary></documentation>
            <implements name="IsDebugEnabled" id="P:Common.Logging.ILog.IsDebugEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsInfoEnabled" id="P:Common.Logging.Log4Net.Log4NetLogger.IsInfoEnabled" access="Public" contract="Override" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary></documentation>
            <implements name="IsInfoEnabled" id="P:Common.Logging.ILog.IsInfoEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsWarnEnabled" id="P:Common.Logging.Log4Net.Log4NetLogger.IsWarnEnabled" access="Public" contract="Override" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary></documentation>
            <implements name="IsWarnEnabled" id="P:Common.Logging.ILog.IsWarnEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsErrorEnabled" id="P:Common.Logging.Log4Net.Log4NetLogger.IsErrorEnabled" access="Public" contract="Override" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary></documentation>
            <implements name="IsErrorEnabled" id="P:Common.Logging.ILog.IsErrorEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsFatalEnabled" id="P:Common.Logging.Log4Net.Log4NetLogger.IsFatalEnabled" access="Public" contract="Override" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary></documentation>
            <implements name="IsFatalEnabled" id="P:Common.Logging.ILog.IsFatalEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <method name="WriteInternal" displayName="WriteInternal" id="M:Common.Logging.Log4Net.Log4NetLogger.WriteInternal(Common.Logging.LogLevel,System.Object,System.Exception)" access="Family" contract="Override" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Sends the message to the underlying log4net system. </summary>
<param name="logLevel">the level of this log event.</param>
<param name="message">the message to log</param>
<param name="exception">the exception to log (may be null)</param></documentation>
            <parameter name="logLevel" typeId="T:Common.Logging.LogLevel" displayName="LogLevel" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="true" />
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetWriteHandler" displayName="GetWriteHandler" id="M:Common.Logging.Log4Net.Log4NetLogger.GetWriteHandler" access="Family" contract="Virtual" valueType="false" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.GetWriteHandler">
            <returnType typeId="T:Common.Logging.Factory.AbstractLogger.WriteHandler" displayName="AbstractLogger.WriteHandler" namespace="Common.Logging.Factory" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Override this method to use a different method than <see cref="M:Common.Logging.Factory.AbstractLogger.WriteInternal(Common.Logging.LogLevel,System.Object,System.Exception)" /> for writing log events to the underlying log system. </summary></documentation>
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.Log4Net.Log4NetLogger.Trace(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.Log4Net.Log4NetLogger.Trace(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Trace" /> level including the stack trace of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="TraceFormat" displayName="TraceFormat" id="M:Common.Logging.Log4Net.Log4NetLogger.TraceFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.TraceFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="TraceFormat" id="M:Common.Logging.ILog.TraceFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="TraceFormat" displayName="TraceFormat" id="M:Common.Logging.Log4Net.Log4NetLogger.TraceFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.TraceFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="TraceFormat" id="M:Common.Logging.ILog.TraceFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="TraceFormat" displayName="TraceFormat" id="M:Common.Logging.Log4Net.Log4NetLogger.TraceFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.TraceFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="TraceFormat" id="M:Common.Logging.ILog.TraceFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="TraceFormat" displayName="TraceFormat" id="M:Common.Logging.Log4Net.Log4NetLogger.TraceFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.TraceFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="TraceFormat" id="M:Common.Logging.ILog.TraceFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.Log4Net.Log4NetLogger.Trace(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.Log4Net.Log4NetLogger.Trace(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.Log4Net.Log4NetLogger.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.Log4Net.Log4NetLogger.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.Log4Net.Log4NetLogger.Debug(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.Log4Net.Log4NetLogger.Debug(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Debug" /> level including the stack Debug of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="DebugFormat" displayName="DebugFormat" id="M:Common.Logging.Log4Net.Log4NetLogger.DebugFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.DebugFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="DebugFormat" id="M:Common.Logging.ILog.DebugFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="DebugFormat" displayName="DebugFormat" id="M:Common.Logging.Log4Net.Log4NetLogger.DebugFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.DebugFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="DebugFormat" id="M:Common.Logging.ILog.DebugFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="DebugFormat" displayName="DebugFormat" id="M:Common.Logging.Log4Net.Log4NetLogger.DebugFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.DebugFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="DebugFormat" id="M:Common.Logging.ILog.DebugFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="DebugFormat" displayName="DebugFormat" id="M:Common.Logging.Log4Net.Log4NetLogger.DebugFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.DebugFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="DebugFormat" id="M:Common.Logging.ILog.DebugFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.Log4Net.Log4NetLogger.Debug(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.Log4Net.Log4NetLogger.Debug(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.Log4Net.Log4NetLogger.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.Log4Net.Log4NetLogger.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.Log4Net.Log4NetLogger.Info(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.Log4Net.Log4NetLogger.Info(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Info" /> level including the stack Info of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="InfoFormat" displayName="InfoFormat" id="M:Common.Logging.Log4Net.Log4NetLogger.InfoFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.InfoFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="InfoFormat" id="M:Common.Logging.ILog.InfoFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="InfoFormat" displayName="InfoFormat" id="M:Common.Logging.Log4Net.Log4NetLogger.InfoFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.InfoFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="InfoFormat" id="M:Common.Logging.ILog.InfoFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="InfoFormat" displayName="InfoFormat" id="M:Common.Logging.Log4Net.Log4NetLogger.InfoFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.InfoFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="InfoFormat" id="M:Common.Logging.ILog.InfoFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="InfoFormat" displayName="InfoFormat" id="M:Common.Logging.Log4Net.Log4NetLogger.InfoFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.InfoFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="InfoFormat" id="M:Common.Logging.ILog.InfoFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.Log4Net.Log4NetLogger.Info(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.Log4Net.Log4NetLogger.Info(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.Log4Net.Log4NetLogger.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.Log4Net.Log4NetLogger.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.Log4Net.Log4NetLogger.Warn(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.Log4Net.Log4NetLogger.Warn(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Warn" /> level including the stack Warn of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="WarnFormat" displayName="WarnFormat" id="M:Common.Logging.Log4Net.Log4NetLogger.WarnFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.WarnFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="WarnFormat" id="M:Common.Logging.ILog.WarnFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="WarnFormat" displayName="WarnFormat" id="M:Common.Logging.Log4Net.Log4NetLogger.WarnFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.WarnFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="WarnFormat" id="M:Common.Logging.ILog.WarnFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="WarnFormat" displayName="WarnFormat" id="M:Common.Logging.Log4Net.Log4NetLogger.WarnFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.WarnFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="WarnFormat" id="M:Common.Logging.ILog.WarnFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="WarnFormat" displayName="WarnFormat" id="M:Common.Logging.Log4Net.Log4NetLogger.WarnFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.WarnFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="WarnFormat" id="M:Common.Logging.ILog.WarnFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.Log4Net.Log4NetLogger.Warn(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.Log4Net.Log4NetLogger.Warn(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.Log4Net.Log4NetLogger.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.Log4Net.Log4NetLogger.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.Log4Net.Log4NetLogger.Error(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.Log4Net.Log4NetLogger.Error(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Error" /> level including the stack Error of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ErrorFormat" displayName="ErrorFormat" id="M:Common.Logging.Log4Net.Log4NetLogger.ErrorFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.ErrorFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="ErrorFormat" id="M:Common.Logging.ILog.ErrorFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ErrorFormat" displayName="ErrorFormat" id="M:Common.Logging.Log4Net.Log4NetLogger.ErrorFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.ErrorFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="ErrorFormat" id="M:Common.Logging.ILog.ErrorFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ErrorFormat" displayName="ErrorFormat" id="M:Common.Logging.Log4Net.Log4NetLogger.ErrorFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.ErrorFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="ErrorFormat" id="M:Common.Logging.ILog.ErrorFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ErrorFormat" displayName="ErrorFormat" id="M:Common.Logging.Log4Net.Log4NetLogger.ErrorFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.ErrorFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="ErrorFormat" id="M:Common.Logging.ILog.ErrorFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.Log4Net.Log4NetLogger.Error(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.Log4Net.Log4NetLogger.Error(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.Log4Net.Log4NetLogger.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.Log4Net.Log4NetLogger.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.Log4Net.Log4NetLogger.Fatal(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.Log4Net.Log4NetLogger.Fatal(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level including the stack Fatal of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="FatalFormat" displayName="FatalFormat" id="M:Common.Logging.Log4Net.Log4NetLogger.FatalFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.FatalFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="FatalFormat" id="M:Common.Logging.ILog.FatalFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="FatalFormat" displayName="FatalFormat" id="M:Common.Logging.Log4Net.Log4NetLogger.FatalFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.FatalFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="FatalFormat" id="M:Common.Logging.ILog.FatalFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="FatalFormat" displayName="FatalFormat" id="M:Common.Logging.Log4Net.Log4NetLogger.FatalFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.FatalFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="FatalFormat" id="M:Common.Logging.ILog.FatalFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="FatalFormat" displayName="FatalFormat" id="M:Common.Logging.Log4Net.Log4NetLogger.FatalFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.FatalFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="FatalFormat" id="M:Common.Logging.ILog.FatalFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.Log4Net.Log4NetLogger.Fatal(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.Log4Net.Log4NetLogger.Fatal(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.Log4Net.Log4NetLogger.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.Log4Net.Log4NetLogger.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Common.Logging.Log4Net.Log4NetLogger.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Equals" displayName="Equals" id="M:Common.Logging.Log4Net.Log4NetLogger.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Common.Logging.Log4Net.Log4NetLogger.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="GetType" displayName="GetType" id="M:Common.Logging.Log4Net.Log4NetLogger.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Common.Logging.Log4Net.Log4NetLogger.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Common.Logging.Log4Net.Log4NetLogger.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
        </class>
        <class name="Log4NetLoggerFactoryAdapter" displayName="Log4NetLoggerFactoryAdapter" namespace="Common.Logging.Log4Net" id="T:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter" access="Public">
          <documentation><summary> Concrete subclass of ILoggerFactoryAdapter specific to log4net 1.2.10. </summary>
<remarks> The following configuration property values may be configured: <list type="bullet"><item><c>configType</c>: <c>INLINE|FILE|FILE-WATCH|EXTERNAL</c></item><item><c>configFile</c>: log4net configuration file path in case of FILE or FILE-WATCH</item></list> The configType values have the following implications: <list type="bullet"><item>INLINE: simply calls <c>XmlConfigurator.Configure()</c></item><item>FILE: calls <c>XmlConfigurator.Configure(System.IO.FileInfo)</c> using <c>configFile</c>.</item><item>FILE-WATCH: calls <c>XmlConfigurator.ConfigureAndWatch(System.IO.FileInfo)</c> using <c>configFile</c>.</item><item>EXTERNAL: does nothing and expects log4net to be configured elsewhere.</item><item>&lt;any&gt;: calls <c>BasicConfigurator.Configure()</c></item></list></remarks>
<example> The following snippet shows how to configure EntLib logging for Common.Logging: <code>&lt;configuration&gt;
  &lt;configSections&gt;
      &lt;section name="logging" type="Common.Logging.ConfigurationSectionHandler, Common.Logging" /&gt;
  &lt;/configSections&gt;
  &lt;common&gt;
    &lt;logging&gt;
      &lt;factoryAdapter type="Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter, Common.Logging.Log4Net"&gt;
        &lt;arg key="configType" value="FILE" /&gt;
        &lt;arg key="configFile" value="~/log4net.config" /&gt;
      &lt;/factoryAdapter&gt;
    &lt;/logging&gt;
  &lt;/common&gt;
&lt;/configuration&gt;
</code></example>
<author>Gilles Bayon</author>
<author>Erich Eichinger</author></documentation>
          <baseType name="AbstractCachingLoggerFactoryAdapter" id="T:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter" displayName="AbstractCachingLoggerFactoryAdapter" namespace="Common.Logging.Factory" assembly="Common.Logging" />
          <implementsClass type="Common.Logging.ILoggerFactoryAdapter" id="T:Common.Logging.ILoggerFactoryAdapter" displayName="ILoggerFactoryAdapter" namespace="Common.Logging" inherited="true" />
          <constructor name=".ctor" id="M:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.#ctor(System.Collections.Specialized.NameValueCollection)" access="Public" contract="Normal" overload="1">
            <documentation><summary> Constructor </summary>
<param name="properties">configuration properties, see <see cref="T:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter" /> for more.</param></documentation>
            <parameter name="properties" typeId="T:System.Collections.Specialized.NameValueCollection" displayName="NameValueCollection" namespace="System.Collections.Specialized" assembly="System" nullable="false" valueType="false" />
          </constructor>
          <constructor name=".ctor" id="M:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.#ctor(System.Collections.Specialized.NameValueCollection,Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.ILog4NetRuntime)" access="Family" contract="Normal" overload="2">
            <documentation><summary> Constructor accepting configuration properties and an arbitrary <see cref="T:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.ILog4NetRuntime" /> instance. </summary>
<param name="properties">configuration properties, see <see cref="T:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter" /> for more.</param>
<param name="runtime">a log4net runtime adapter</param></documentation>
            <parameter name="properties" typeId="T:System.Collections.Specialized.NameValueCollection" displayName="NameValueCollection" namespace="System.Collections.Specialized" assembly="System" nullable="false" valueType="false" />
            <parameter name="runtime" typeId="T:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.ILog4NetRuntime" displayName="Log4NetLoggerFactoryAdapter.ILog4NetRuntime" namespace="Common.Logging.Log4Net" assembly="Common.Logging.Log4Net" nullable="false" valueType="false" />
          </constructor>
          <method name="CreateLogger" displayName="CreateLogger" id="M:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.CreateLogger(System.String)" access="Family" contract="Override" valueType="false">
            <returnType typeId="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Create a ILog instance by name </summary>
<param name="name"></param>
<returns></returns></documentation>
            <parameter name="name" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="ClearLoggerCache" displayName="ClearLoggerCache" id="M:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.ClearLoggerCache" access="Family" contract="Normal" valueType="true" declaringType="Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.ClearLoggerCache">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Purges all loggers from cache </summary></documentation>
          </method>
          <method name="GetLogger" displayName="GetLogger" id="M:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.GetLogger(System.Type)" access="Public" contract="Final" valueType="false" declaringType="Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.GetLogger(System.Type)" overload="1">
            <returnType typeId="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Get a ILog instance by <see cref="T:System.Type" />. </summary></documentation>
            <parameter name="type" typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="GetLogger" id="M:Common.Logging.ILoggerFactoryAdapter.GetLogger(System.Type)" interface="ILoggerFactoryAdapter" interfaceId="T:Common.Logging.ILoggerFactoryAdapter" assembly="Common.Logging" declaringType="Common.Logging.ILoggerFactoryAdapter" />
          </method>
          <method name="GetLogger" displayName="GetLogger" id="M:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.GetLogger(System.String)" access="Public" contract="Final" valueType="false" declaringType="Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.GetLogger(System.String)" overload="2">
            <returnType typeId="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Get a ILog instance by name. </summary></documentation>
            <parameter name="name" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="GetLogger" id="M:Common.Logging.ILoggerFactoryAdapter.GetLogger(System.String)" interface="ILoggerFactoryAdapter" interfaceId="T:Common.Logging.ILoggerFactoryAdapter" assembly="Common.Logging" declaringType="Common.Logging.ILoggerFactoryAdapter" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Equals" displayName="Equals" id="M:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="GetType" displayName="GetType" id="M:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
        </class>
        <interface name="Log4NetLoggerFactoryAdapter.ILog4NetRuntime" displayName="Log4NetLoggerFactoryAdapter.ILog4NetRuntime" namespace="Common.Logging.Log4Net" id="T:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.ILog4NetRuntime" access="NestedPublic">
          <documentation><summary> Abstract interface to the underlying log4net runtime </summary></documentation>
          <method name="XmlConfiguratorConfigure" displayName="XmlConfiguratorConfigure" id="M:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.ILog4NetRuntime.XmlConfiguratorConfigure" access="Public" contract="Abstract" valueType="true" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary>Calls <see cref="M:log4net.Config.XmlConfigurator.Configure" /></summary></documentation>
          </method>
          <method name="XmlConfiguratorConfigure" displayName="XmlConfiguratorConfigure" id="M:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.ILog4NetRuntime.XmlConfiguratorConfigure(System.String)" access="Public" contract="Abstract" valueType="true" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary>Calls <see cref="M:log4net.Config.XmlConfigurator.Configure(System.IO.FileInfo)" /></summary></documentation>
            <parameter name="configFile" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="XmlConfiguratorConfigureAndWatch" displayName="XmlConfiguratorConfigureAndWatch" id="M:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.ILog4NetRuntime.XmlConfiguratorConfigureAndWatch(System.String)" access="Public" contract="Abstract" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary>Calls <see cref="M:log4net.Config.XmlConfigurator.ConfigureAndWatch(System.IO.FileInfo)" /></summary></documentation>
            <parameter name="configFile" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="BasicConfiguratorConfigure" displayName="BasicConfiguratorConfigure" id="M:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.ILog4NetRuntime.BasicConfiguratorConfigure" access="Public" contract="Abstract" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary>Calls <see cref="M:log4net.Config.BasicConfigurator.Configure" /></summary></documentation>
          </method>
          <method name="GetLogger" displayName="GetLogger" id="M:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.ILog4NetRuntime.GetLogger(System.String)" access="Public" contract="Abstract" valueType="false">
            <returnType typeId="T:log4net.ILog" displayName="ILog" namespace="log4net" assembly="log4net" nullable="false" valueType="false" />
            <documentation><summary>Calls <see cref="M:Common.Logging.LogManager.GetLogger(System.String)" /></summary></documentation>
            <parameter name="name" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
        </interface>
      </namespace>
    </module>
  </assembly>
  <assembly name="Common.Logging.NLog" version="2.0.0.0">
    <documentation><summary>
  <para>This assembly contains the implementations to plug NLog 1.0.0.505 into Common.Logging.</para>
  <para>For an example on how to configure <list type="bullet"><item>Common.Logging to render its output to Entlib, see <see cref="T:Common.Logging.NLog.NLogLoggerFactoryAdapter" />.</item><item>NLog to render its output to Common.Logging use <see cref="T:Common.Logging.NLog.CommonLoggingTarget" />.</item></list></para>
</summary></documentation>
    <assemblyReference name="NLog" />
    <assemblyReference name="mscorlib" />
    <assemblyReference name="Common.Logging" />
    <assemblyReference name="System" />
    <attribute name="System.Reflection.AssemblyProductAttribute" target="assembly">
      <property name="Product" type="System.String" value="Common Logging Framework NLog 1.0.0.505 Adapter" />
    </attribute>
    <attribute name="System.Runtime.CompilerServices.CompilationRelaxationsAttribute" target="assembly">
      <property name="CompilationRelaxations" type="System.Int32" value="8" />
    </attribute>
    <attribute name="System.CLSCompliantAttribute" target="assembly">
      <property name="IsCompliant" type="System.Boolean" value="True" />
    </attribute>
    <attribute name="System.Diagnostics.DebuggableAttribute" target="assembly">
      <property name="IsJITTrackingEnabled" type="System.Boolean" value="True" />
      <property name="IsJITOptimizerDisabled" type="System.Boolean" value="True" />
      <property name="DebuggingFlags" type="System.Diagnostics.DebuggableAttribute+DebuggingModes" value="(DebuggingModes.Default|DebuggingModes.IgnoreSymbolStoreSequencePoints|DebuggingModes.EnableEditAndContinue|DebuggingModes.DisableOptimizations)" />
    </attribute>
    <attribute name="System.Runtime.CompilerServices.RuntimeCompatibilityAttribute" target="assembly">
      <property name="WrapNonExceptionThrows" type="System.Boolean" value="True" />
    </attribute>
    <attribute name="System.Reflection.AssemblyTrademarkAttribute" target="assembly">
      <property name="Trademark" type="System.String" value="Apache License, Version 2.0" />
    </attribute>
    <attribute name="System.Runtime.InteropServices.ComVisibleAttribute" target="assembly">
      <property name="Value" type="System.Boolean" value="False" />
    </attribute>
    <attribute name="System.Reflection.AssemblyConfigurationAttribute" target="assembly">
      <property name="Configuration" type="System.String" value="net-2.0.win32; release" />
    </attribute>
    <attribute name="System.Reflection.AssemblyInformationalVersionAttribute" target="assembly">
      <property name="InformationalVersion" type="System.String" value="2.0.0.0; net-2.0.win32; release" />
    </attribute>
    <attribute name="System.Reflection.AssemblyCopyrightAttribute" target="assembly">
      <property name="Copyright" type="System.String" value="Copyright 2006-2009 the Common Infrastructure Libraries Team." />
    </attribute>
    <attribute name="System.Reflection.AssemblyCompanyAttribute" target="assembly">
      <property name="Company" type="System.String" value="http://netcommon.sourceforge.net/" />
    </attribute>
    <module name="Common.Logging.NLog.dll">
      <namespace name="Common.Logging.NLog">
        <documentation><summary>
  <para>This namespace contains the implementations to plug NLog 1.0.0.505 into Common.Logging.</para>
  <para>For an example on how to configure <list type="bullet"><item>Common.Logging to render its output to Entlib, see <see cref="T:Common.Logging.NLog.NLogLoggerFactoryAdapter" />.</item><item>NLog to render its output to Common.Logging use <see cref="T:Common.Logging.NLog.CommonLoggingTarget" />.</item></list></para>
</summary></documentation>
        <class name="CommonLoggingTarget" displayName="CommonLoggingTarget" namespace="Common.Logging.NLog" id="T:Common.Logging.NLog.CommonLoggingTarget" access="Public">
          <documentation><summary> Routes all log events logged through NLog into the Common.Logging infrastructure. </summary>
<remarks>
  <example> To route all NLog events to Common.Logging, you must add this target to your configuration: <code>LoggingConfiguration cfg = new LoggingConfiguration();
CommonLoggingTarget target = new CommonLoggingTarget("${level:uppercase=true}|${logger}|${message}");
cfg.LoggingRules.Add(new LoggingRule("*", LogLevel.Trace, target));

LogManager.Configuration = cfg;

Logger log = LogManager.GetLogger("mylogger");
log.Debug("some message");
</code></example>
</remarks>
<author>Erich Eichinger</author></documentation>
          <baseType name="TargetWithLayout" id="T:NLog.TargetWithLayout" displayName="TargetWithLayout" namespace="NLog" assembly="NLog">
            <baseType name="Target" id="T:NLog.Target" displayName="Target" namespace="NLog" assembly="NLog" />
          </baseType>
          <constructor name=".ctor" id="M:Common.Logging.NLog.CommonLoggingTarget.#ctor" access="Public" contract="Normal" overload="1">
            <documentation><summary> Creates this target using the default layout. </summary></documentation>
          </constructor>
          <constructor name=".ctor" id="M:Common.Logging.NLog.CommonLoggingTarget.#ctor(System.String)" access="Public" contract="Normal" overload="2">
            <documentation><summary> Creates this target using a custom layout. </summary></documentation>
            <parameter name="layout" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </constructor>
          <property name="Layout" id="P:Common.Logging.NLog.CommonLoggingTarget.Layout" access="Public" contract="Virtual" declaringType="NLog.TargetWithLayout" declaringAssembly="NLog" declaringId="P:NLog.TargetWithLayout.Layout" get="Public" set="Public" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <attribute name="System.ComponentModel.DefaultValueAttribute">
              <property name="Value" type="System.Object" value="${longdate}|${level:uppercase=true}|${logger}|${message}" />
            </attribute>
            <attribute name="NLog.Config.AcceptsLayoutAttribute" />
            <attribute name="NLog.Config.RequiredParameterAttribute" />
            <documentation><summary></summary></documentation>
          </property>
          <property name="CompiledLayout" id="P:Common.Logging.NLog.CommonLoggingTarget.CompiledLayout" access="Public" contract="Virtual" declaringType="NLog.TargetWithLayout" declaringAssembly="NLog" declaringId="P:NLog.TargetWithLayout.CompiledLayout" get="Public" set="Public" typeId="T:NLog.ILayout" displayName="ILayout" namespace="NLog" assembly="NLog" nullable="false" valueType="false">
            <documentation><summary></summary></documentation>
          </property>
          <property name="Name" id="P:Common.Logging.NLog.CommonLoggingTarget.Name" access="Public" contract="Normal" declaringType="NLog.Target" declaringAssembly="NLog" declaringId="P:NLog.Target.Name" get="Public" set="Public" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <attribute name="NLog.Config.RequiredParameterAttribute" />
            <documentation><summary></summary></documentation>
          </property>
          <method name="Write" displayName="Write" id="M:Common.Logging.NLog.CommonLoggingTarget.Write(NLog.LogEventInfo)" access="Family" contract="Override" valueType="true" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Writes the event to the Common.Logging infrastructure </summary></documentation>
            <parameter name="logEvent" typeId="T:NLog.LogEventInfo" displayName="LogEventInfo" namespace="NLog" assembly="NLog" nullable="false" valueType="false" />
          </method>
          <method name="PopulateLayouts" displayName="PopulateLayouts" id="M:Common.Logging.NLog.CommonLoggingTarget.PopulateLayouts(NLog.LayoutCollection)" access="Public" contract="Override" valueType="true" declaringType="NLog.TargetWithLayout" declaringAssembly="NLog" declaringId="M:NLog.TargetWithLayout.PopulateLayouts(NLog.LayoutCollection)">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="layouts" typeId="T:NLog.LayoutCollection" displayName="LayoutCollection" namespace="NLog" assembly="NLog" nullable="false" valueType="false" />
          </method>
          <method name="Initialize" displayName="Initialize" id="M:Common.Logging.NLog.CommonLoggingTarget.Initialize" access="Public" contract="Override" valueType="true" declaringType="NLog.TargetWithLayout" declaringAssembly="NLog" declaringId="M:NLog.TargetWithLayout.Initialize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="GetLayouts" displayName="GetLayouts" id="M:Common.Logging.NLog.CommonLoggingTarget.GetLayouts" access="Public" contract="Normal" valueType="false" declaringType="NLog.Target" declaringAssembly="NLog" declaringId="M:NLog.Target.GetLayouts">
            <returnType typeId="T:NLog.LayoutCollection" displayName="LayoutCollection" namespace="NLog" assembly="NLog" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="InvalidateLayouts" displayName="InvalidateLayouts" id="M:Common.Logging.NLog.CommonLoggingTarget.InvalidateLayouts" access="Family" contract="Normal" valueType="true" declaringType="NLog.Target" declaringAssembly="NLog" declaringId="M:NLog.Target.InvalidateLayouts">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Write" displayName="Write" id="M:Common.Logging.NLog.CommonLoggingTarget.Write(NLog.LogEventInfo[])" access="Family" contract="Virtual" valueType="true" declaringType="NLog.Target" declaringAssembly="NLog" declaringId="M:NLog.Target.Write(NLog.LogEventInfo[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="logEvents" typeId="T:NLog.LogEventInfo" displayName="LogEventInfo" namespace="NLog" assembly="NLog" nullable="false" valueType="false">
              <array rank="1" />
            </parameter>
          </method>
          <method name="NeedsStackTrace" displayName="NeedsStackTrace" id="M:Common.Logging.NLog.CommonLoggingTarget.NeedsStackTrace" access="Family" contract="Virtual" valueType="true" declaringType="NLog.Target" declaringAssembly="NLog" declaringId="M:NLog.Target.NeedsStackTrace">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="ToString" displayName="ToString" id="M:Common.Logging.NLog.CommonLoggingTarget.ToString" access="Public" contract="Override" valueType="false" declaringType="NLog.Target" declaringAssembly="NLog" declaringId="M:NLog.Target.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Flush" displayName="Flush" id="M:Common.Logging.NLog.CommonLoggingTarget.Flush" access="Public" contract="Normal" valueType="true" declaringType="NLog.Target" declaringAssembly="NLog" declaringId="M:NLog.Target.Flush" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Flush" displayName="Flush" id="M:Common.Logging.NLog.CommonLoggingTarget.Flush(System.TimeSpan)" access="Public" contract="Virtual" valueType="true" declaringType="NLog.Target" declaringAssembly="NLog" declaringId="M:NLog.Target.Flush(System.TimeSpan)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="timeout" typeId="T:System.TimeSpan" displayName="TimeSpan" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="Flush" displayName="Flush" id="M:Common.Logging.NLog.CommonLoggingTarget.Flush(System.Int32)" access="Public" contract="Normal" valueType="true" declaringType="NLog.Target" declaringAssembly="NLog" declaringId="M:NLog.Target.Flush(System.Int32)" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="timeoutMilliseconds" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="Close" displayName="Close" id="M:Common.Logging.NLog.CommonLoggingTarget.Close" access="Family" contract="Virtual" valueType="true" declaringType="NLog.Target" declaringAssembly="NLog" declaringId="M:NLog.Target.Close">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="PrecalculateVolatileLayouts" displayName="PrecalculateVolatileLayouts" id="M:Common.Logging.NLog.CommonLoggingTarget.PrecalculateVolatileLayouts(NLog.LogEventInfo)" access="Public" contract="Normal" valueType="true" declaringType="NLog.Target" declaringAssembly="NLog" declaringId="M:NLog.Target.PrecalculateVolatileLayouts(NLog.LogEventInfo)">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="logEvent" typeId="T:NLog.LogEventInfo" displayName="LogEventInfo" namespace="NLog" assembly="NLog" nullable="false" valueType="false" />
          </method>
          <method name="Equals" displayName="Equals" id="M:Common.Logging.NLog.CommonLoggingTarget.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Common.Logging.NLog.CommonLoggingTarget.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="GetType" displayName="GetType" id="M:Common.Logging.NLog.CommonLoggingTarget.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Common.Logging.NLog.CommonLoggingTarget.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Common.Logging.NLog.CommonLoggingTarget.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
        </class>
        <class name="NLogLogger" displayName="NLogLogger" namespace="Common.Logging.NLog" id="T:Common.Logging.NLog.NLogLogger" access="Public">
          <documentation><summary> Concrete implementation of <see cref="T:Common.Logging.ILog" /> interface specific to NLog 1.0.0.505. </summary>
<remarks> NLog is a .NET logging library designed with simplicity and flexibility in mind. http://www.nlog-project.org/ </remarks>
<author>Bruno Baia</author></documentation>
          <baseType name="AbstractLogger" id="T:Common.Logging.Factory.AbstractLogger" displayName="AbstractLogger" namespace="Common.Logging.Factory" assembly="Common.Logging" />
          <implementsClass type="Common.Logging.ILog" id="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" inherited="true" />
          <constructor name=".ctor" id="M:Common.Logging.NLog.NLogLogger.#ctor(NLog.Logger)" access="Family" contract="Normal">
            <documentation><summary> Constructor </summary></documentation>
            <parameter name="logger" typeId="T:NLog.Logger" displayName="Logger" namespace="NLog" assembly="NLog" nullable="false" valueType="false" />
          </constructor>
          <property name="IsTraceEnabled" id="P:Common.Logging.NLog.NLogLogger.IsTraceEnabled" access="Public" contract="Override" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Gets a value indicating whether this instance is trace enabled. </summary>
<value>
  <c>true</c> if this instance is trace enabled; otherwise, <c>false</c>. </value></documentation>
            <implements name="IsTraceEnabled" id="P:Common.Logging.ILog.IsTraceEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsDebugEnabled" id="P:Common.Logging.NLog.NLogLogger.IsDebugEnabled" access="Public" contract="Override" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Gets a value indicating whether this instance is debug enabled. </summary>
<value>
  <c>true</c> if this instance is debug enabled; otherwise, <c>false</c>. </value></documentation>
            <implements name="IsDebugEnabled" id="P:Common.Logging.ILog.IsDebugEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsInfoEnabled" id="P:Common.Logging.NLog.NLogLogger.IsInfoEnabled" access="Public" contract="Override" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Gets a value indicating whether this instance is info enabled. </summary>
<value>
  <c>true</c> if this instance is info enabled; otherwise, <c>false</c>. </value></documentation>
            <implements name="IsInfoEnabled" id="P:Common.Logging.ILog.IsInfoEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsWarnEnabled" id="P:Common.Logging.NLog.NLogLogger.IsWarnEnabled" access="Public" contract="Override" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Gets a value indicating whether this instance is warn enabled. </summary>
<value>
  <c>true</c> if this instance is warn enabled; otherwise, <c>false</c>. </value></documentation>
            <implements name="IsWarnEnabled" id="P:Common.Logging.ILog.IsWarnEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsErrorEnabled" id="P:Common.Logging.NLog.NLogLogger.IsErrorEnabled" access="Public" contract="Override" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Gets a value indicating whether this instance is error enabled. </summary>
<value>
  <c>true</c> if this instance is error enabled; otherwise, <c>false</c>. </value></documentation>
            <implements name="IsErrorEnabled" id="P:Common.Logging.ILog.IsErrorEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <property name="IsFatalEnabled" id="P:Common.Logging.NLog.NLogLogger.IsFatalEnabled" access="Public" contract="Override" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Gets a value indicating whether this instance is fatal enabled. </summary>
<value>
  <c>true</c> if this instance is fatal enabled; otherwise, <c>false</c>. </value></documentation>
            <implements name="IsFatalEnabled" id="P:Common.Logging.ILog.IsFatalEnabled" interface="ILog" assembly="Common.Logging" interfaceId="T:Common.Logging.ILog" declaringType="Common.Logging.ILog" />
          </property>
          <method name="WriteInternal" displayName="WriteInternal" id="M:Common.Logging.NLog.NLogLogger.WriteInternal(Common.Logging.LogLevel,System.Object,System.Exception)" access="Family" contract="Override" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Actually sends the message to the underlying log system. </summary>
<param name="logLevel">the level of this log event.</param>
<param name="message">the message to log</param>
<param name="exception">the exception to log (may be null)</param></documentation>
            <parameter name="logLevel" typeId="T:Common.Logging.LogLevel" displayName="LogLevel" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="true" />
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetWriteHandler" displayName="GetWriteHandler" id="M:Common.Logging.NLog.NLogLogger.GetWriteHandler" access="Family" contract="Virtual" valueType="false" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.GetWriteHandler">
            <returnType typeId="T:Common.Logging.Factory.AbstractLogger.WriteHandler" displayName="AbstractLogger.WriteHandler" namespace="Common.Logging.Factory" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Override this method to use a different method than <see cref="M:Common.Logging.Factory.AbstractLogger.WriteInternal(Common.Logging.LogLevel,System.Object,System.Exception)" /> for writing log events to the underlying log system. </summary></documentation>
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.NLog.NLogLogger.Trace(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.NLog.NLogLogger.Trace(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Trace" /> level including the stack trace of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="TraceFormat" displayName="TraceFormat" id="M:Common.Logging.NLog.NLogLogger.TraceFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.TraceFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="TraceFormat" id="M:Common.Logging.ILog.TraceFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="TraceFormat" displayName="TraceFormat" id="M:Common.Logging.NLog.NLogLogger.TraceFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.TraceFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="TraceFormat" id="M:Common.Logging.ILog.TraceFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="TraceFormat" displayName="TraceFormat" id="M:Common.Logging.NLog.NLogLogger.TraceFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.TraceFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="TraceFormat" id="M:Common.Logging.ILog.TraceFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="TraceFormat" displayName="TraceFormat" id="M:Common.Logging.NLog.NLogLogger.TraceFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.TraceFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="TraceFormat" id="M:Common.Logging.ILog.TraceFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.NLog.NLogLogger.Trace(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.NLog.NLogLogger.Trace(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.NLog.NLogLogger.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Trace" displayName="Trace" id="M:Common.Logging.NLog.NLogLogger.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Trace" id="M:Common.Logging.ILog.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.NLog.NLogLogger.Debug(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.NLog.NLogLogger.Debug(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Debug" /> level including the stack Debug of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="DebugFormat" displayName="DebugFormat" id="M:Common.Logging.NLog.NLogLogger.DebugFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.DebugFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="DebugFormat" id="M:Common.Logging.ILog.DebugFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="DebugFormat" displayName="DebugFormat" id="M:Common.Logging.NLog.NLogLogger.DebugFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.DebugFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="DebugFormat" id="M:Common.Logging.ILog.DebugFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="DebugFormat" displayName="DebugFormat" id="M:Common.Logging.NLog.NLogLogger.DebugFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.DebugFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="DebugFormat" id="M:Common.Logging.ILog.DebugFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="DebugFormat" displayName="DebugFormat" id="M:Common.Logging.NLog.NLogLogger.DebugFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.DebugFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="DebugFormat" id="M:Common.Logging.ILog.DebugFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.NLog.NLogLogger.Debug(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.NLog.NLogLogger.Debug(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.NLog.NLogLogger.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Debug" displayName="Debug" id="M:Common.Logging.NLog.NLogLogger.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Debug" id="M:Common.Logging.ILog.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.NLog.NLogLogger.Info(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.NLog.NLogLogger.Info(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Info" /> level including the stack Info of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="InfoFormat" displayName="InfoFormat" id="M:Common.Logging.NLog.NLogLogger.InfoFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.InfoFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="InfoFormat" id="M:Common.Logging.ILog.InfoFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="InfoFormat" displayName="InfoFormat" id="M:Common.Logging.NLog.NLogLogger.InfoFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.InfoFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="InfoFormat" id="M:Common.Logging.ILog.InfoFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="InfoFormat" displayName="InfoFormat" id="M:Common.Logging.NLog.NLogLogger.InfoFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.InfoFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="InfoFormat" id="M:Common.Logging.ILog.InfoFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="InfoFormat" displayName="InfoFormat" id="M:Common.Logging.NLog.NLogLogger.InfoFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.InfoFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="InfoFormat" id="M:Common.Logging.ILog.InfoFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.NLog.NLogLogger.Info(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.NLog.NLogLogger.Info(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.NLog.NLogLogger.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Info" displayName="Info" id="M:Common.Logging.NLog.NLogLogger.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Info" id="M:Common.Logging.ILog.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.NLog.NLogLogger.Warn(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.NLog.NLogLogger.Warn(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Warn" /> level including the stack Warn of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="WarnFormat" displayName="WarnFormat" id="M:Common.Logging.NLog.NLogLogger.WarnFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.WarnFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="WarnFormat" id="M:Common.Logging.ILog.WarnFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="WarnFormat" displayName="WarnFormat" id="M:Common.Logging.NLog.NLogLogger.WarnFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.WarnFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="WarnFormat" id="M:Common.Logging.ILog.WarnFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="WarnFormat" displayName="WarnFormat" id="M:Common.Logging.NLog.NLogLogger.WarnFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.WarnFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="WarnFormat" id="M:Common.Logging.ILog.WarnFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="WarnFormat" displayName="WarnFormat" id="M:Common.Logging.NLog.NLogLogger.WarnFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.WarnFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="WarnFormat" id="M:Common.Logging.ILog.WarnFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.NLog.NLogLogger.Warn(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.NLog.NLogLogger.Warn(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.NLog.NLogLogger.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Warn" displayName="Warn" id="M:Common.Logging.NLog.NLogLogger.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Warn" id="M:Common.Logging.ILog.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.NLog.NLogLogger.Error(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.NLog.NLogLogger.Error(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Error" /> level including the stack Error of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ErrorFormat" displayName="ErrorFormat" id="M:Common.Logging.NLog.NLogLogger.ErrorFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.ErrorFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="ErrorFormat" id="M:Common.Logging.ILog.ErrorFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ErrorFormat" displayName="ErrorFormat" id="M:Common.Logging.NLog.NLogLogger.ErrorFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.ErrorFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="ErrorFormat" id="M:Common.Logging.ILog.ErrorFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ErrorFormat" displayName="ErrorFormat" id="M:Common.Logging.NLog.NLogLogger.ErrorFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.ErrorFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="ErrorFormat" id="M:Common.Logging.ILog.ErrorFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ErrorFormat" displayName="ErrorFormat" id="M:Common.Logging.NLog.NLogLogger.ErrorFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.ErrorFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="ErrorFormat" id="M:Common.Logging.ILog.ErrorFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.NLog.NLogLogger.Error(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.NLog.NLogLogger.Error(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.NLog.NLogLogger.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Error" displayName="Error" id="M:Common.Logging.NLog.NLogLogger.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Error" id="M:Common.Logging.ILog.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.NLog.NLogLogger.Fatal(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.Object)" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.Object)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.NLog.NLogLogger.Fatal(System.Object,System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.Object,System.Exception)" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message object with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level including the stack Fatal of the <see cref="T:System.Exception" /> passed as a parameter. </summary></documentation>
            <parameter name="message" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.Object,System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="FatalFormat" displayName="FatalFormat" id="M:Common.Logging.NLog.NLogLogger.FatalFormat(System.IFormatProvider,System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.FatalFormat(System.IFormatProvider,System.String,System.Object[])" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="FatalFormat" id="M:Common.Logging.ILog.FatalFormat(System.IFormatProvider,System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="FatalFormat" displayName="FatalFormat" id="M:Common.Logging.NLog.NLogLogger.FatalFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.FatalFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="FatalFormat" id="M:Common.Logging.ILog.FatalFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="FatalFormat" displayName="FatalFormat" id="M:Common.Logging.NLog.NLogLogger.FatalFormat(System.String,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.FatalFormat(System.String,System.Object[])" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="FatalFormat" id="M:Common.Logging.ILog.FatalFormat(System.String,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="FatalFormat" displayName="FatalFormat" id="M:Common.Logging.NLog.NLogLogger.FatalFormat(System.String,System.Exception,System.Object[])" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.FatalFormat(System.String,System.Exception,System.Object[])" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level. </summary></documentation>
            <parameter name="format" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="args" isParamArray="true" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
              <attribute name="System.ParamArrayAttribute" />
            </parameter>
            <implements name="FatalFormat" id="M:Common.Logging.ILog.FatalFormat(System.String,System.Exception,System.Object[])" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.NLog.NLogLogger.Fatal(System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.Action{Common.Logging.FormatMessageHandler})" overload="3">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.NLog.NLogLogger.Fatal(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="4">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.NLog.NLogLogger.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" overload="5">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="Fatal" displayName="Fatal" id="M:Common.Logging.NLog.NLogLogger.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" access="Public" contract="Virtual" valueType="true" declaringType="Common.Logging.Factory.AbstractLogger" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractLogger.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" overload="6">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level using a callback to obtain the message </summary></documentation>
            <parameter name="formatProvider" typeId="T:System.IFormatProvider" displayName="IFormatProvider" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="formatMessageCallback" typeId="T:System.Action`1" displayName="Action(FormatMessageHandler)" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="FormatMessageHandler" displayName="FormatMessageHandler" namespace="Common.Logging" typeId="T:Common.Logging.FormatMessageHandler" assembly="Common.Logging" />
            </parameter>
            <parameter name="exception" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="Fatal" id="M:Common.Logging.ILog.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)" interface="ILog" interfaceId="T:Common.Logging.ILog" assembly="Common.Logging" declaringType="Common.Logging.ILog" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Common.Logging.NLog.NLogLogger.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Equals" displayName="Equals" id="M:Common.Logging.NLog.NLogLogger.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Common.Logging.NLog.NLogLogger.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="GetType" displayName="GetType" id="M:Common.Logging.NLog.NLogLogger.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Common.Logging.NLog.NLogLogger.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Common.Logging.NLog.NLogLogger.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
        </class>
        <class name="NLogLoggerFactoryAdapter" displayName="NLogLoggerFactoryAdapter" namespace="Common.Logging.NLog" id="T:Common.Logging.NLog.NLogLoggerFactoryAdapter" access="Public">
          <documentation><summary> Concrete subclass of ILoggerFactoryAdapter specific to NLog 1.0.0.505. </summary>
<remarks> The following configuration property values may be configured: <list type="bullet"><item><c>configType</c>: <c>INLINE|FILE</c></item><item><c>configFile</c>: NLog XML configuration file path in case of FILE</item></list> The configType values have the following implications: <list type="bullet"><item>FILE: calls <c>NLog.LogManager.Configuration = new NLog.Config.XmlLoggingConfiguration(configFile)</c>.</item><item>&lt;any other value&gt;: expects NLog to be configured externally</item></list></remarks>
<example> The following snippet shows how to configure EntLib logging for Common.Logging: <code>&lt;configuration&gt;
  &lt;configSections&gt;
      &lt;section name="logging" type="Common.Logging.ConfigurationSectionHandler, Common.Logging" /&gt;
  &lt;/configSections&gt;
  &lt;common&gt;
    &lt;logging&gt;
      &lt;factoryAdapter type="Common.Logging.NLog.NLogLoggerFactoryAdapter, Common.Logging.NLog"&gt;
        &lt;arg key="configType" value="FILE" /&gt;
        &lt;arg key="configFile" value="~/nlog.config" /&gt;
      &lt;/factoryAdapter&gt;
    &lt;/logging&gt;
  &lt;/common&gt;
&lt;/configuration&gt;
</code></example>
<author>Bruno Baia</author>
<author>Erich Eichinger</author></documentation>
          <baseType name="AbstractCachingLoggerFactoryAdapter" id="T:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter" displayName="AbstractCachingLoggerFactoryAdapter" namespace="Common.Logging.Factory" assembly="Common.Logging" />
          <implementsClass type="Common.Logging.ILoggerFactoryAdapter" id="T:Common.Logging.ILoggerFactoryAdapter" displayName="ILoggerFactoryAdapter" namespace="Common.Logging" inherited="true" />
          <constructor name=".ctor" id="M:Common.Logging.NLog.NLogLoggerFactoryAdapter.#ctor(System.Collections.Specialized.NameValueCollection)" access="Public" contract="Normal">
            <documentation><summary> Constructor </summary>
<param name="properties"></param></documentation>
            <parameter name="properties" typeId="T:System.Collections.Specialized.NameValueCollection" displayName="NameValueCollection" namespace="System.Collections.Specialized" assembly="System" nullable="false" valueType="false" />
          </constructor>
          <method name="CreateLogger" displayName="CreateLogger" id="M:Common.Logging.NLog.NLogLoggerFactoryAdapter.CreateLogger(System.String)" access="Family" contract="Override" valueType="false">
            <returnType typeId="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Get a ILog instance by type name </summary>
<param name="name"></param>
<returns></returns></documentation>
            <parameter name="name" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="ClearLoggerCache" displayName="ClearLoggerCache" id="M:Common.Logging.NLog.NLogLoggerFactoryAdapter.ClearLoggerCache" access="Family" contract="Normal" valueType="true" declaringType="Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.ClearLoggerCache">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Purges all loggers from cache </summary></documentation>
          </method>
          <method name="GetLogger" displayName="GetLogger" id="M:Common.Logging.NLog.NLogLoggerFactoryAdapter.GetLogger(System.Type)" access="Public" contract="Final" valueType="false" declaringType="Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.GetLogger(System.Type)" overload="1">
            <returnType typeId="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Get a ILog instance by <see cref="T:System.Type" />. </summary></documentation>
            <parameter name="type" typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="GetLogger" id="M:Common.Logging.ILoggerFactoryAdapter.GetLogger(System.Type)" interface="ILoggerFactoryAdapter" interfaceId="T:Common.Logging.ILoggerFactoryAdapter" assembly="Common.Logging" declaringType="Common.Logging.ILoggerFactoryAdapter" />
          </method>
          <method name="GetLogger" displayName="GetLogger" id="M:Common.Logging.NLog.NLogLoggerFactoryAdapter.GetLogger(System.String)" access="Public" contract="Final" valueType="false" declaringType="Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter" declaringAssembly="Common.Logging" declaringId="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.GetLogger(System.String)" overload="2">
            <returnType typeId="T:Common.Logging.ILog" displayName="ILog" namespace="Common.Logging" assembly="Common.Logging" nullable="false" valueType="false" />
            <documentation><summary> Get a ILog instance by name. </summary></documentation>
            <parameter name="name" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <implements name="GetLogger" id="M:Common.Logging.ILoggerFactoryAdapter.GetLogger(System.String)" interface="ILoggerFactoryAdapter" interfaceId="T:Common.Logging.ILoggerFactoryAdapter" assembly="Common.Logging" declaringType="Common.Logging.ILoggerFactoryAdapter" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Common.Logging.NLog.NLogLoggerFactoryAdapter.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Equals" displayName="Equals" id="M:Common.Logging.NLog.NLogLoggerFactoryAdapter.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Common.Logging.NLog.NLogLoggerFactoryAdapter.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="GetType" displayName="GetType" id="M:Common.Logging.NLog.NLogLoggerFactoryAdapter.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Common.Logging.NLog.NLogLoggerFactoryAdapter.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary></summary></documentation>
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Common.Logging.NLog.NLogLoggerFactoryAdapter.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary></summary></documentation>
          </method>
        </class>
      </namespace>
    </module>
  </assembly>
</ndoc>